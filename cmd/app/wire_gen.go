// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/oklog/run"
	"hello/pkg/repository"
	"hello/pkg/repository/api/baidu"
	"hello/pkg/repository/api/taobao"
	"hello/pkg/repository/dao/audit"
	"hello/pkg/repository/dao/project"
	"hello/pkg/repository/dao/resource"
	"hello/pkg/repository/dao/service"
	"hello/pkg/repository/dao/user"
	"hello/pkg/services"
	audit2 "hello/pkg/services/audit"
	"hello/pkg/services/casbin"
	project2 "hello/pkg/services/project"
	user2 "hello/pkg/services/user"
)

import (
	_ "hello/docs"
)

// Injectors from wire.go:

//var appSet = wire.NewSet(wire.Struct(App{}, "*"))
func InitApp(r *gin.Engine, g *run.Group, name ConfName) (App, error) {
	myConf, err := initConf(name)
	if err != nil {
		return App{}, err
	}
	baseService := baidu.NewBasicService(myConf)
	sugaredLogger := initLog(myConf)
	v := baidu.NewServiceMiddleware(sugaredLogger)
	baiduService := baidu.NewService(baseService, v)
	taobaoBaseService := taobao.NewBasicService(myConf)
	v2 := taobao.NewServiceMiddleware(sugaredLogger)
	taobaoService := taobao.NewService(taobaoBaseService, v2)
	client, err := initEnt(myConf)
	if err != nil {
		return App{}, err
	}
	userBaseService := user.NewBasicService(client)
	v3 := user.NewServiceMiddleware(sugaredLogger)
	userService := user.NewService(userBaseService, v3)
	auditBaseService := audit.NewBasicService(client)
	v4 := audit.NewServiceMiddleware(sugaredLogger)
	auditService := audit.NewService(auditBaseService, v4)
	projectBaseService := project.NewBasicService(client)
	v5 := project.NewServiceMiddleware(sugaredLogger)
	projectService := project.NewService(projectBaseService, v5)
	serviceBaseService := service.NewBasicService(client)
	v6 := service.NewServiceMiddleware(sugaredLogger)
	serviceService := service.NewService(serviceBaseService, v6)
	resourceBaseService := resource.NewBasicService(client)
	v7 := resource.NewServiceMiddleware(sugaredLogger)
	resourceService := resource.NewService(resourceBaseService, v7)
	repositoryRepository := &repository.Repository{
		Baidu:    baiduService,
		Taobao:   taobaoService,
		User:     userService,
		Audit:    auditService,
		Project:  projectService,
		Service:  serviceService,
		Resource: resourceService,
	}
	appInitAuditMid := initAuditMid(r, repositoryRepository)
	repository2 := repository.Repository{
		Baidu:    baiduService,
		Taobao:   taobaoService,
		User:     userService,
		Audit:    auditService,
		Project:  projectService,
		Service:  serviceService,
		Resource: resourceService,
	}
	casbinBaseService := casbin.NewBasicService()
	v8 := casbin.NewServiceMiddleware(sugaredLogger)
	casbinService := casbin.NewService(casbinBaseService, v8)
	baseService2 := user2.NewBasicService(repository2, casbinService, client)
	v9 := user2.NewServiceMiddleware(sugaredLogger)
	userUserService := user2.NewService(baseService2, v9)
	baseService3 := audit2.NewBasicService(client)
	v10 := audit2.NewServiceMiddleware(sugaredLogger)
	auditAuditService := audit2.NewService(baseService3, v10)
	baseService4 := project2.NewBasicService(repository2, client)
	v11 := project2.NewServiceMiddleware(sugaredLogger)
	projectProjectService := project2.NewService(baseService4, v11)
	servicesServices := &services.Services{
		User:    userUserService,
		Audit:   auditAuditService,
		Project: projectProjectService,
		Casbin:  casbinService,
	}
	v12 := initEndpointMiddleware(servicesServices, repository2)
	mws := user2.NewEndpointMiddleware(sugaredLogger, v12)
	endpoints := user2.NewEndpoints(userUserService, mws)
	debugSwitch := initDebugSwitch()
	v13 := initHttpServerOption(debugSwitch)
	ops := user2.NewServiceOption(v13)
	httpHandler := user2.NewHTTPHandler(r, endpoints, ops, debugSwitch)
	auditMws := audit2.NewEndpointMiddleware(sugaredLogger, v12)
	auditEndpoints := audit2.NewEndpoints(auditAuditService, auditMws)
	auditOps := audit2.NewServiceOption(v13)
	auditHttpHandler := audit2.NewHTTPHandler(r, auditEndpoints, auditOps, debugSwitch)
	projectMws := project2.NewEndpointMiddleware(sugaredLogger, v12)
	projectEndpoints := project2.NewEndpoints(projectProjectService, projectMws)
	projectOps := project2.NewServiceOption(v13)
	projectHttpHandler := project2.NewHTTPHandler(r, projectEndpoints, projectOps, debugSwitch)
	servicesHttpHandler := &services.HttpHandler{
		User:    httpHandler,
		Audit:   auditHttpHandler,
		Project: projectHttpHandler,
	}
	tracerProvider := initTracer(myConf)
	db, err := initDb(myConf)
	if err != nil {
		return App{}, err
	}
	profiler, err := initPyroscope(myConf)
	if err != nil {
		return App{}, err
	}
	enforcer, err := initCasbin(myConf)
	if err != nil {
		return App{}, err
	}
	appInitCancelInterrupt := initCancelInterrupt(g)
	appInitMetricsEndpoint := initMetricsEndpoint(g, myConf, debugSwitch)
	appInitMicro, err := initMicro(g, r, myConf)
	if err != nil {
		return App{}, err
	}
	app := App{
		r:                   r,
		repository:          repositoryRepository,
		InitAuditMid:        appInitAuditMid,
		httpHandler:         servicesHttpHandler,
		g:                   g,
		conf:                myConf,
		log:                 sugaredLogger,
		tp:                  tracerProvider,
		db:                  db,
		ent:                 client,
		pyroscope:           profiler,
		casbin:              enforcer,
		InitCancelInterrupt: appInitCancelInterrupt,
		InitMetricsEndpoint: appInitMetricsEndpoint,
		InitMicro:           appInitMicro,
	}
	return app, nil
}

// wire.go:

var confSet = wire.NewSet(initConf)

var logSet = wire.NewSet(initLog)

var traceSet = wire.NewSet(initTracer)

var dbSet = wire.NewSet(initDb)

var entSet = wire.NewSet(initEnt)

var pyroscopeSet = wire.NewSet(initPyroscope)

var casbinSet = wire.NewSet(initCasbin)

var auditMidSet = wire.NewSet(initAuditMid)

var debugSwitchSet = wire.NewSet(initDebugSwitch)

// repo.api.service
var baiduHttpSet = wire.NewSet(baidu.NewBasicService, baidu.NewServiceMiddleware, baidu.NewService)

var taobaoHttpSet = wire.NewSet(taobao.NewBasicService, taobao.NewServiceMiddleware, taobao.NewService)

// repo.dao.service
var userDaoSet = wire.NewSet(user.NewBasicService, user.NewServiceMiddleware, user.NewService)

var repoSet = wire.NewSet(resource.ResourceServiceSet, service.ServiceServiceSet, project.ProjectServiceSet, userDaoSet, baiduHttpSet, taobaoHttpSet, audit.AuditServiceSet, wire.Struct(new(repository.Repository), "*"))

// http service
var casbinServiceSet = wire.NewSet(casbin.NewBasicService, casbin.NewService, casbin.NewServiceMiddleware)

var servicesSet = wire.NewSet(project2.ProjectKitSet, audit2.AuditKitSet, casbinServiceSet, user2.UserServiceSet, wire.Struct(new(services.HttpHandler), "*"), wire.Struct(new(services.Services), "*"))

var mwSet = wire.NewSet(initEndpointMiddleware, initHttpServerOption)

var gSet = wire.NewSet(initCancelInterrupt, initMetricsEndpoint, initMicro)
