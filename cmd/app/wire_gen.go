// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/oklog/run"
	"hello/pkg/repository"
	"hello/pkg/repository/api/baidu"
	"hello/pkg/repository/api/taobao"
	"hello/pkg/repository/dao/pod"
	"hello/pkg/repository/dao/tblservicetree"
	"hello/pkg/repository/dao/user"
	"hello/pkg/services"
	"hello/pkg/services/casbin"
	"hello/pkg/services/hello"
	pod2 "hello/pkg/services/pod"
	"hello/pkg/services/say"
	"hello/pkg/services/say1"
	user2 "hello/pkg/services/user"
)

import (
	_ "hello/docs"
)

// Injectors from wire.go:

//var appSet = wire.NewSet(wire.Struct(App{}, "*"))
func InitApp(r *gin.Engine, g *run.Group, name ConfName) (App, error) {
	myConf, err := initConf(name)
	if err != nil {
		return App{}, err
	}
	baseService := baidu.NewBasicService(myConf)
	sugaredLogger := initLog(myConf)
	v := baidu.NewServiceMiddleware(sugaredLogger)
	baiduService := baidu.NewService(baseService, v)
	taobaoBaseService := taobao.NewBasicService(myConf)
	v2 := taobao.NewServiceMiddleware(sugaredLogger)
	taobaoService := taobao.NewService(taobaoBaseService, v2)
	client, err := initEnt(myConf)
	if err != nil {
		return App{}, err
	}
	userBaseService := user.NewBasicService(client)
	v3 := user.NewServiceMiddleware(sugaredLogger)
	userService := user.NewService(userBaseService, v3)
	podBaseService := pod.NewBasicService(client)
	v4 := pod.NewServiceMiddleware(sugaredLogger)
	podService := pod.NewService(podBaseService, v4)
	tblservicetreeBaseService := tblservicetree.NewBasicService(client)
	v5 := tblservicetree.NewServiceMiddleware(sugaredLogger)
	tblservicetreeService := tblservicetree.NewService(tblservicetreeBaseService, v5)
	repositoryRepository := &repository.Repository{
		Baidu:       baiduService,
		Taobao:      taobaoService,
		User:        userService,
		Pod:         podService,
		ServiceTree: tblservicetreeService,
	}
	repository2 := repository.Repository{
		Baidu:       baiduService,
		Taobao:      taobaoService,
		User:        userService,
		Pod:         podService,
		ServiceTree: tblservicetreeService,
	}
	helloBaseService := hello.NewBasicService(repository2)
	v6 := hello.NewServiceMiddleware(sugaredLogger)
	helloService := hello.NewService(helloBaseService, v6)
	v7 := initEndpointMiddleware()
	mws := hello.NewEndpointMiddleware(sugaredLogger, v7)
	endpoints := hello.NewEndpoints(helloService, mws)
	v8 := initHttpServerOption()
	ops := hello.NewServiceOption(v8)
	httpHandler := hello.NewHTTPHandler(r, endpoints, ops)
	casbinBaseService := casbin.NewBasicService()
	v9 := casbin.NewServiceMiddleware(sugaredLogger)
	casbinService := casbin.NewService(casbinBaseService, v9)
	baseService2 := user2.NewBasicService(repository2, casbinService, client)
	v10 := user2.NewServiceMiddleware(sugaredLogger)
	userUserService := user2.NewService(baseService2, v10)
	userMws := user2.NewEndpointMiddleware(sugaredLogger, v7)
	userEndpoints := user2.NewEndpoints(userUserService, userMws)
	userOps := user2.NewServiceOption(v8)
	userHttpHandler := user2.NewHTTPHandler(r, userEndpoints, userOps)
	sayBaseService := say.NewBasicService(repository2)
	v11 := say.NewServiceMiddleware(sugaredLogger)
	sayService := say.NewService(sayBaseService, v11)
	sayMws := say.NewEndpointMiddleware(sugaredLogger, v7)
	sayEndpoints := say.NewEndpoints(sayService, sayMws)
	sayOps := say.NewServiceOption(v8)
	sayHttpHandler := say.NewHTTPHandler(r, sayEndpoints, sayOps)
	say1BaseService := say1.NewBasicService(repository2)
	v12 := say1.NewServiceMiddleware(sugaredLogger)
	say1Service := say1.NewService(say1BaseService, v12)
	say1Mws := say1.NewEndpointMiddleware(sugaredLogger, v7)
	say1Endpoints := say1.NewEndpoints(say1Service, say1Mws)
	say1Ops := say1.NewServiceOption(v8)
	say1HttpHandler := say1.NewHTTPHandler(r, say1Endpoints, say1Ops)
	baseService3 := pod2.NewBasicService(client)
	v13 := pod2.NewServiceMiddleware(sugaredLogger)
	podPodService := pod2.NewService(baseService3, v13)
	podMws := pod2.NewEndpointMiddleware(sugaredLogger, v7)
	podEndpoints := pod2.NewEndpoints(podPodService, podMws)
	podOps := pod2.NewServiceOption(v8)
	podHttpHandler := pod2.NewHTTPHandler(r, podEndpoints, podOps)
	servicesServices := &services.Services{
		Hello: httpHandler,
		User:  userHttpHandler,
		Say:   sayHttpHandler,
		Say1:  say1HttpHandler,
		Pod:   podHttpHandler,
	}
	tracerProvider := initTracer(myConf)
	db, err := initDb(myConf)
	if err != nil {
		return App{}, err
	}
	profiler, err := initPyroscope(myConf)
	if err != nil {
		return App{}, err
	}
	enforcer, err := initCasbin(myConf)
	if err != nil {
		return App{}, err
	}
	appInitCancelInterrupt := initCancelInterrupt(g)
	appInitMetricsEndpoint := initMetricsEndpoint(g, myConf)
	appInitMicro, err := initMicro(g, r, myConf)
	if err != nil {
		return App{}, err
	}
	app := App{
		r:                   r,
		repository:          repositoryRepository,
		services:            servicesServices,
		g:                   g,
		conf:                myConf,
		log:                 sugaredLogger,
		tp:                  tracerProvider,
		db:                  db,
		ent:                 client,
		pyroscope:           profiler,
		casbin:              enforcer,
		InitCancelInterrupt: appInitCancelInterrupt,
		InitMetricsEndpoint: appInitMetricsEndpoint,
		InitMicro:           appInitMicro,
	}
	return app, nil
}

// wire.go:

var confSet = wire.NewSet(initConf)

var logSet = wire.NewSet(initLog)

var traceSet = wire.NewSet(initTracer)

var dbSet = wire.NewSet(initDb)

var entSet = wire.NewSet(initEnt)

var pyroscopeSet = wire.NewSet(initPyroscope)

var casbinSet = wire.NewSet(initCasbin)

// repo.api.service
var baiduHttpSet = wire.NewSet(baidu.NewBasicService, baidu.NewServiceMiddleware, baidu.NewService)

var taobaoHttpSet = wire.NewSet(taobao.NewBasicService, taobao.NewServiceMiddleware, taobao.NewService)

// repo.dao.service
var userDaoSet = wire.NewSet(user.NewBasicService, user.NewServiceMiddleware, user.NewService)

var podDaoSet = wire.NewSet(pod.NewBasicService, pod.NewServiceMiddleware, pod.NewService)

//var projectDaoSet = wire.NewSet(projectD.NewBasicService, projectD.NewServiceMiddleware, projectD.NewService)
var tblservicetreeDaoSet = wire.NewSet(tblservicetree.NewBasicService, tblservicetree.NewServiceMiddleware, tblservicetree.NewService)

var repoSet = wire.NewSet(podDaoSet, tblservicetreeDaoSet, userDaoSet, baiduHttpSet, taobaoHttpSet, wire.Struct(new(repository.Repository), "*"))

// http service
var casbinServiceSet = wire.NewSet(casbin.NewBasicService, casbin.NewService, casbin.NewServiceMiddleware)

var helloServiceSet = wire.NewSet(hello.NewBasicService, hello.NewService, hello.NewEndpointMiddleware, hello.NewServiceMiddleware, hello.NewEndpoints, hello.NewServiceOption, hello.NewHTTPHandler)

//var userServiceSet = wire.NewSet(user.NewBasicService, user.NewService, user.NewEndpointMiddleware, user.NewServiceMiddleware, user.NewEndpoints, user.NewServiceOption, user.NewHTTPHandler)
var servicesSet = wire.NewSet(pod2.PodKitSet, casbinServiceSet, say.SayKitSet, say1.Say1KitSet, user2.UserServiceSet, helloServiceSet, wire.Struct(new(services.Services), "*"))

var mwSet = wire.NewSet(initEndpointMiddleware, initHttpServerOption)

var gSet = wire.NewSet(initCancelInterrupt, initMetricsEndpoint, initMicro)
