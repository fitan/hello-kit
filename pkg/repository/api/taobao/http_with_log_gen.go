package taobao

// Code generated by gowrap. DO NOT EDIT.
// template: ../../../gowrap/templates/log.tmpl
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"hello/utils/log"

	"github.com/go-resty/resty/v2"
	"go.uber.org/zap"
)

// HttpWithLog implements Http that is instrumented with logging
type HttpWithLog struct {
	_log  *zap.SugaredLogger
	_base Http
}

// NewHttpWithLog instruments an implementation of the Http with simple logging
func NewHttpWithLog(base Http, log *zap.SugaredLogger) HttpWithLog {
	return HttpWithLog{
		_base: base,
		_log:  log,
	}
}

// GetRoot implements Http
func (_d HttpWithLog) GetRoot(ctx context.Context) (rp1 *resty.Response, err error) {

	_log := _d._log.With(log.TraceId(ctx))

	defer func() {
		_log.Debugw("HttpWithLog calling GetRoot", "params", map[string]interface{}{}, "results", map[string]interface{}{
			"rp1": rp1,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{}, "results", map[string]interface{}{
				"rp1": rp1,
				"err": err})
		}

	}()
	return _d._base.GetRoot(ctx)
}

// GetRoot1 implements Http
func (_d HttpWithLog) GetRoot1(ctx context.Context) (rp1 *resty.Response, err error) {

	_log := _d._log.With(log.TraceId(ctx))

	defer func() {
		_log.Debugw("HttpWithLog calling GetRoot1", "params", map[string]interface{}{}, "results", map[string]interface{}{
			"rp1": rp1,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{}, "results", map[string]interface{}{
				"rp1": rp1,
				"err": err})
		}

	}()
	return _d._base.GetRoot1(ctx)
}
