package taobao

// Code generated by gowrap. DO NOT EDIT.
// template: ../../../gowrap/templates/log.tmpl
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"hello/utils/log"

	"github.com/go-resty/resty/v2"
	"go.uber.org/zap"
)

// TaobaoApiWithLog implements TaobaoApi that is instrumented with logging
type TaobaoApiWithLog struct {
	_log  *zap.SugaredLogger
	_base TaobaoApi
}

// NewTaobaoApiWithLog instruments an implementation of the TaobaoApi with simple logging
func NewTaobaoApiWithLog(base TaobaoApi, log *zap.SugaredLogger) TaobaoApiWithLog {
	return TaobaoApiWithLog{
		_base: base,
		_log:  log,
	}
}

// GetRoot implements TaobaoApi
func (_d TaobaoApiWithLog) GetRoot(ctx context.Context) (rp1 *resty.Response, err error) {

	_log := _d._log.With(log.TraceId(ctx))

	defer func() {
		_log.Debugw("TaobaoApiWithLog calling GetRoot", "params", map[string]interface{}{}, "results", map[string]interface{}{
			"rp1": rp1,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{}, "results", map[string]interface{}{
				"rp1": rp1,
				"err": err})
		}

	}()
	return _d._base.GetRoot(ctx)
}

// GetRoot1 implements TaobaoApi
func (_d TaobaoApiWithLog) GetRoot1(ctx context.Context) (rp1 *resty.Response, err error) {

	_log := _d._log.With(log.TraceId(ctx))

	defer func() {
		_log.Debugw("TaobaoApiWithLog calling GetRoot1", "params", map[string]interface{}{}, "results", map[string]interface{}{
			"rp1": rp1,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{}, "results", map[string]interface{}{
				"rp1": rp1,
				"err": err})
		}

	}()
	return _d._base.GetRoot1(ctx)
}
