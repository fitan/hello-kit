package taobao

// Code generated by gowrap. DO NOT EDIT.
// template: ../../../gowrap/templates/prometheus.tmpl
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"time"

	"github.com/go-resty/resty/v2"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// HttpWithPrometheus implements Http interface with all methods wrapped
// with Prometheus metrics
type HttpWithPrometheus struct {
	base         Http
	instanceName string
}

var httpDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "TaobaoHttp_duration_seconds",
		Help:       "http runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"})

// NewHttpWithPrometheus returns an instance of the Http decorated with prometheus summary metric
func NewHttpWithPrometheus(base Http, instanceName string) HttpWithPrometheus {
	return HttpWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// GetRoot implements Http
func (_d HttpWithPrometheus) GetRoot(ctx context.Context) (rp1 *resty.Response, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		httpDurationSummaryVec.WithLabelValues(_d.instanceName, "GetRoot", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetRoot(ctx)
}

// GetRoot1 implements Http
func (_d HttpWithPrometheus) GetRoot1(ctx context.Context) (rp1 *resty.Response, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		httpDurationSummaryVec.WithLabelValues(_d.instanceName, "GetRoot1", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetRoot1(ctx)
}
