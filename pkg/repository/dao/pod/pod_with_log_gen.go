package pod

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"hello/pkg/ent"

	"go.opentelemetry.io/otel/trace"
	"go.uber.org/zap"
)

// PodServiceWithLog implements PodService that is instrumented with logging
type PodServiceWithLog struct {
	_log  *zap.SugaredLogger
	_base PodService
}

// NewPodServiceWithLog instruments an implementation of the PodService with simple logging
func NewPodServiceWithLog(base PodService, log *zap.SugaredLogger) PodServiceWithLog {
	return PodServiceWithLog{
		_base: base,
		_log:  log,
	}
}

// ByQueries implements PodService
func (_d PodServiceWithLog) ByQueries(ctx context.Context, i interface{}) (res ent.Pods, count int, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("PodServiceWithLog calling ByQueries", "params", map[string]interface{}{
			"i": i}, "results", map[string]interface{}{
			"res":   res,
			"count": count,
			"err":   err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"i": i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   err})
		}

	}()
	return _d._base.ByQueries(ctx, i)
}

// Create implements PodService
func (_d PodServiceWithLog) Create(ctx context.Context, v ent.Pod) (res *ent.Pod, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("PodServiceWithLog calling Create", "params", map[string]interface{}{
			"v": v}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"v": v}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.Create(ctx, v)
}

// DeleteById implements PodService
func (_d PodServiceWithLog) DeleteById(ctx context.Context, id int64) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("PodServiceWithLog calling DeleteById", "params", map[string]interface{}{
			"id": id}, "results", map[string]interface{}{
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"err": err})
		}

	}()
	return _d._base.DeleteById(ctx, id)
}

// GetById implements PodService
func (_d PodServiceWithLog) GetById(ctx context.Context, id int64) (res *ent.Pod, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("PodServiceWithLog calling GetById", "params", map[string]interface{}{
			"id": id}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.GetById(ctx, id)
}

// UpdateById implements PodService
func (_d PodServiceWithLog) UpdateById(ctx context.Context, id int64, v *ent.Pod) (pp1 *ent.Pod, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("PodServiceWithLog calling UpdateById", "params", map[string]interface{}{
			"id": id,
			"v":  v}, "results", map[string]interface{}{
			"pp1": pp1,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"id": id,
				"v":  v}, "results", map[string]interface{}{
				"pp1": pp1,
				"err": err})
		}

	}()
	return _d._base.UpdateById(ctx, id, v)
}
