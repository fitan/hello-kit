package tblservicetree

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"time"

	"context"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"

	"hello/pkg/ent"
)

// TblservicetreeServiceWithPrometheus implements TblservicetreeService interface with all methods wrapped
// with Prometheus metrics
type TblservicetreeServiceWithPrometheus struct {
	base         TblservicetreeService
	instanceName string
}

var tblservicetreeserviceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "dao_tblservicetree_duration_seconds",
		Help:       "tblservicetreeservice runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"})

// NewTblservicetreeServiceWithPrometheus returns an instance of the TblservicetreeService decorated with prometheus summary metric
func NewTblservicetreeServiceWithPrometheus(base TblservicetreeService) TblservicetreeServiceWithPrometheus {
	return TblservicetreeServiceWithPrometheus{
		base:         base,
		instanceName: "tblservicetreeservice",
	}
}

// ByQueries implements TblservicetreeService
func (_d TblservicetreeServiceWithPrometheus) ByQueries(ctx context.Context, i interface{}) (res ent.SpiderDevTblServicetrees, count int, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		tblservicetreeserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "ByQueries", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ByQueries(ctx, i)
}

// Create implements TblservicetreeService
func (_d TblservicetreeServiceWithPrometheus) Create(ctx context.Context, v *ent.SpiderDevTblServicetree) (res *ent.SpiderDevTblServicetree, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		tblservicetreeserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "Create", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Create(ctx, v)
}

// CreateMany implements TblservicetreeService
func (_d TblservicetreeServiceWithPrometheus) CreateMany(ctx context.Context, vs ent.SpiderDevTblServicetrees) (s1 ent.SpiderDevTblServicetrees, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		tblservicetreeserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "CreateMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.CreateMany(ctx, vs)
}

// DeleteById implements TblservicetreeService
func (_d TblservicetreeServiceWithPrometheus) DeleteById(ctx context.Context, id int32) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		tblservicetreeserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteById(ctx, id)
}

// DeleteMany implements TblservicetreeService
func (_d TblservicetreeServiceWithPrometheus) DeleteMany(ctx context.Context, ids []int32) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		tblservicetreeserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteMany(ctx, ids)
}

// GetById implements TblservicetreeService
func (_d TblservicetreeServiceWithPrometheus) GetById(ctx context.Context, id int32) (res *ent.SpiderDevTblServicetree, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		tblservicetreeserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetById(ctx, id)
}

// UpdateById implements TblservicetreeService
func (_d TblservicetreeServiceWithPrometheus) UpdateById(ctx context.Context, id int32, v *ent.SpiderDevTblServicetree) (sp1 *ent.SpiderDevTblServicetree, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		tblservicetreeserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateById(ctx, id, v)
}

// UpdateMany implements TblservicetreeService
func (_d TblservicetreeServiceWithPrometheus) UpdateMany(ctx context.Context, vs ent.SpiderDevTblServicetrees) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		tblservicetreeserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateMany(ctx, vs)
}
