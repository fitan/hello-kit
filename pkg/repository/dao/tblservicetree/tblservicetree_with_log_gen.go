package tblservicetree

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"hello/pkg/ent"

	"go.opentelemetry.io/otel/trace"
	"go.uber.org/zap"
)

// TblservicetreeServiceWithLog implements TblservicetreeService that is instrumented with logging
type TblservicetreeServiceWithLog struct {
	_log  *zap.SugaredLogger
	_base TblservicetreeService
}

// NewTblservicetreeServiceWithLog instruments an implementation of the TblservicetreeService with simple logging
func NewTblservicetreeServiceWithLog(base TblservicetreeService, log *zap.SugaredLogger) TblservicetreeServiceWithLog {
	return TblservicetreeServiceWithLog{
		_base: base,
		_log:  log,
	}
}

// ByQueries implements TblservicetreeService
func (_d TblservicetreeServiceWithLog) ByQueries(ctx context.Context, i interface{}) (res ent.SpiderDevTblServicetrees, count int, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("TblservicetreeServiceWithLog calling ByQueries", "params", map[string]interface{}{
			"i": i}, "results", map[string]interface{}{
			"res":   res,
			"count": count,
			"err":   err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"i": i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   err})
		}

	}()
	return _d._base.ByQueries(ctx, i)
}

// Create implements TblservicetreeService
func (_d TblservicetreeServiceWithLog) Create(ctx context.Context, v ent.SpiderDevTblServicetree) (res *ent.SpiderDevTblServicetree, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("TblservicetreeServiceWithLog calling Create", "params", map[string]interface{}{
			"v": v}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"v": v}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.Create(ctx, v)
}

// DeleteById implements TblservicetreeService
func (_d TblservicetreeServiceWithLog) DeleteById(ctx context.Context, id int32) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("TblservicetreeServiceWithLog calling DeleteById", "params", map[string]interface{}{
			"id": id}, "results", map[string]interface{}{
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"err": err})
		}

	}()
	return _d._base.DeleteById(ctx, id)
}

// GetById implements TblservicetreeService
func (_d TblservicetreeServiceWithLog) GetById(ctx context.Context, id int32) (res *ent.SpiderDevTblServicetree, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("TblservicetreeServiceWithLog calling GetById", "params", map[string]interface{}{
			"id": id}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.GetById(ctx, id)
}

// UpdateById implements TblservicetreeService
func (_d TblservicetreeServiceWithLog) UpdateById(ctx context.Context, id int32, v *ent.SpiderDevTblServicetree) (sp1 *ent.SpiderDevTblServicetree, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("TblservicetreeServiceWithLog calling UpdateById", "params", map[string]interface{}{
			"id": id,
			"v":  v}, "results", map[string]interface{}{
			"sp1": sp1,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"id": id,
				"v":  v}, "results", map[string]interface{}{
				"sp1": sp1,
				"err": err})
		}

	}()
	return _d._base.UpdateById(ctx, id, v)
}
