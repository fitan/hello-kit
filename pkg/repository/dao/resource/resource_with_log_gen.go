package resource

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"fmt"

	ginkHttp "github.com/fitan/gink/transport/http"
	"go.opentelemetry.io/otel/trace"
	"go.uber.org/zap"

	"context"

	"hello/pkg/ent"
)

// ResourceServiceWithLog implements ResourceService that is instrumented with logging
type ResourceServiceWithLog struct {
	_log  *zap.SugaredLogger
	_base ResourceService
}

// NewResourceServiceWithLog instruments an implementation of the ResourceService with simple logging
func NewResourceServiceWithLog(base ResourceService, log *zap.SugaredLogger) ResourceServiceWithLog {
	return ResourceServiceWithLog{
		_base: base,
		_log:  log,
	}
}

// ByQueriesAll implements ResourceService
func (_d ResourceServiceWithLog) ByQueriesAll(ctx context.Context, i interface{}) (res []ent.ResourceBaseGetRes, count int, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling ByQueriesAll", "params", map[string]interface{}{
					"i": i}, "results", map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling ByQueriesAll", "params", map[string]interface{}{
					"i": i}, "results", map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling ByQueriesAll", "params", map[string]interface{}{
				"i": i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling ByQueriesAll", "params", map[string]interface{}{
				"i": i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.ByQueriesAll(ctx, i)
}

// ByQueriesOne implements ResourceService
func (_d ResourceServiceWithLog) ByQueriesOne(ctx context.Context, i interface{}) (res ent.ResourceBaseGetRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling ByQueriesOne", "params", map[string]interface{}{
					"i": i}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling ByQueriesOne", "params", map[string]interface{}{
					"i": i}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling ByQueriesOne", "params", map[string]interface{}{
				"i": i}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling ByQueriesOne", "params", map[string]interface{}{
				"i": i}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.ByQueriesOne(ctx, i)
}

// Create implements ResourceService
func (_d ResourceServiceWithLog) Create(ctx context.Context, v ent.ResourceBaseCreateReq) (res *ent.Resource, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling Create", "params", map[string]interface{}{
					"v": v}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling Create", "params", map[string]interface{}{
					"v": v}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling Create", "params", map[string]interface{}{
				"v": v}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling Create", "params", map[string]interface{}{
				"v": v}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.Create(ctx, v)
}

// CreateMany implements ResourceService
func (_d ResourceServiceWithLog) CreateMany(ctx context.Context, vs []ent.ResourceBaseCreateReq) (r1 ent.Resources, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling CreateMany", "params", map[string]interface{}{
					"vs": vs}, "results", map[string]interface{}{
					"r1":  r1,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling CreateMany", "params", map[string]interface{}{
					"vs": vs}, "results", map[string]interface{}{
					"r1":  r1,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling CreateMany", "params", map[string]interface{}{
				"vs": vs}, "results", map[string]interface{}{
				"r1":  r1,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling CreateMany", "params", map[string]interface{}{
				"vs": vs}, "results", map[string]interface{}{
				"r1":  r1,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.CreateMany(ctx, vs)
}

// CreatePreByResourceId implements ResourceService
func (_d ResourceServiceWithLog) CreatePreByResourceId(ctx context.Context, id int, v ent.ResourceBaseCreateReq) (res *ent.Resource, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling CreatePreByResourceId", "params", map[string]interface{}{
					"id": id,
					"v":  v}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling CreatePreByResourceId", "params", map[string]interface{}{
					"id": id,
					"v":  v}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling CreatePreByResourceId", "params", map[string]interface{}{
				"id": id,
				"v":  v}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling CreatePreByResourceId", "params", map[string]interface{}{
				"id": id,
				"v":  v}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.CreatePreByResourceId(ctx, id, v)
}

// CreateResourcesByResourceId implements ResourceService
func (_d ResourceServiceWithLog) CreateResourcesByResourceId(ctx context.Context, id int, vs []ent.ResourceBaseCreateReq) (res *ent.Resource, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling CreateResourcesByResourceId", "params", map[string]interface{}{
					"id": id,
					"vs": vs}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling CreateResourcesByResourceId", "params", map[string]interface{}{
					"id": id,
					"vs": vs}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling CreateResourcesByResourceId", "params", map[string]interface{}{
				"id": id,
				"vs": vs}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling CreateResourcesByResourceId", "params", map[string]interface{}{
				"id": id,
				"vs": vs}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.CreateResourcesByResourceId(ctx, id, vs)
}

// DeleteById implements ResourceService
func (_d ResourceServiceWithLog) DeleteById(ctx context.Context, id int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling DeleteById", "params", map[string]interface{}{
					"id": id}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling DeleteById", "params", map[string]interface{}{
					"id": id}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling DeleteById", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling DeleteById", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.DeleteById(ctx, id)
}

// DeleteMany implements ResourceService
func (_d ResourceServiceWithLog) DeleteMany(ctx context.Context, ids []int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling DeleteMany", "params", map[string]interface{}{
					"ids": ids}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling DeleteMany", "params", map[string]interface{}{
					"ids": ids}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling DeleteMany", "params", map[string]interface{}{
				"ids": ids}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling DeleteMany", "params", map[string]interface{}{
				"ids": ids}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.DeleteMany(ctx, ids)
}

// GetById implements ResourceService
func (_d ResourceServiceWithLog) GetById(ctx context.Context, id int) (res ent.ResourceBaseGetRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling GetById", "params", map[string]interface{}{
					"id": id}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling GetById", "params", map[string]interface{}{
					"id": id}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling GetById", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling GetById", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.GetById(ctx, id)
}

// GetNextByResourceId implements ResourceService
func (_d ResourceServiceWithLog) GetNextByResourceId(ctx context.Context, id int, i interface{}) (res []ent.ResourceBaseGetRes, count int, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling GetNextByResourceId", "params", map[string]interface{}{
					"id": id,
					"i":  i}, "results", map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling GetNextByResourceId", "params", map[string]interface{}{
					"id": id,
					"i":  i}, "results", map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling GetNextByResourceId", "params", map[string]interface{}{
				"id": id,
				"i":  i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling GetNextByResourceId", "params", map[string]interface{}{
				"id": id,
				"i":  i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.GetNextByResourceId(ctx, id, i)
}

// GetPreByResourceId implements ResourceService
func (_d ResourceServiceWithLog) GetPreByResourceId(ctx context.Context, id int) (res ent.ResourceBaseGetRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling GetPreByResourceId", "params", map[string]interface{}{
					"id": id}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling GetPreByResourceId", "params", map[string]interface{}{
					"id": id}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling GetPreByResourceId", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling GetPreByResourceId", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.GetPreByResourceId(ctx, id)
}

// IdByResource implements ResourceService
func (_d ResourceServiceWithLog) IdByResource(ctx context.Context, path string, action string) (i1 int, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling IdByResource", "params", map[string]interface{}{
					"path":   path,
					"action": action}, "results", map[string]interface{}{
					"i1":  i1,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling IdByResource", "params", map[string]interface{}{
					"path":   path,
					"action": action}, "results", map[string]interface{}{
					"i1":  i1,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling IdByResource", "params", map[string]interface{}{
				"path":   path,
				"action": action}, "results", map[string]interface{}{
				"i1":  i1,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling IdByResource", "params", map[string]interface{}{
				"path":   path,
				"action": action}, "results", map[string]interface{}{
				"i1":  i1,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.IdByResource(ctx, path, action)
}

// RawAddBindNextByResourceId implements ResourceService
func (_d ResourceServiceWithLog) RawAddBindNextByResourceId(ctx context.Context, id int, addIds []int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawAddBindNextByResourceId", "params", map[string]interface{}{
					"id":     id,
					"addIds": addIds}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawAddBindNextByResourceId", "params", map[string]interface{}{
					"id":     id,
					"addIds": addIds}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawAddBindNextByResourceId", "params", map[string]interface{}{
				"id":     id,
				"addIds": addIds}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawAddBindNextByResourceId", "params", map[string]interface{}{
				"id":     id,
				"addIds": addIds}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawAddBindNextByResourceId(ctx, id, addIds)
}

// RawAddBindPreByResourceId implements ResourceService
func (_d ResourceServiceWithLog) RawAddBindPreByResourceId(ctx context.Context, id int, addId int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawAddBindPreByResourceId", "params", map[string]interface{}{
					"id":    id,
					"addId": addId}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawAddBindPreByResourceId", "params", map[string]interface{}{
					"id":    id,
					"addId": addId}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawAddBindPreByResourceId", "params", map[string]interface{}{
				"id":    id,
				"addId": addId}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawAddBindPreByResourceId", "params", map[string]interface{}{
				"id":    id,
				"addId": addId}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawAddBindPreByResourceId(ctx, id, addId)
}

// RawByQueriesAll implements ResourceService
func (_d ResourceServiceWithLog) RawByQueriesAll(ctx context.Context, i interface{}) (res ent.Resources, count int, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawByQueriesAll", "params", map[string]interface{}{
					"i": i}, "results", map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawByQueriesAll", "params", map[string]interface{}{
					"i": i}, "results", map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawByQueriesAll", "params", map[string]interface{}{
				"i": i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawByQueriesAll", "params", map[string]interface{}{
				"i": i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawByQueriesAll(ctx, i)
}

// RawByQueriesOne implements ResourceService
func (_d ResourceServiceWithLog) RawByQueriesOne(ctx context.Context, i interface{}) (res *ent.Resource, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawByQueriesOne", "params", map[string]interface{}{
					"i": i}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawByQueriesOne", "params", map[string]interface{}{
					"i": i}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawByQueriesOne", "params", map[string]interface{}{
				"i": i}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawByQueriesOne", "params", map[string]interface{}{
				"i": i}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawByQueriesOne(ctx, i)
}

// RawCreate implements ResourceService
func (_d ResourceServiceWithLog) RawCreate(ctx context.Context, v *ent.Resource) (res *ent.Resource, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawCreate", "params", map[string]interface{}{
					"v": v}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawCreate", "params", map[string]interface{}{
					"v": v}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawCreate", "params", map[string]interface{}{
				"v": v}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawCreate", "params", map[string]interface{}{
				"v": v}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawCreate(ctx, v)
}

// RawCreateMany implements ResourceService
func (_d ResourceServiceWithLog) RawCreateMany(ctx context.Context, vs ent.Resources) (r1 ent.Resources, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawCreateMany", "params", map[string]interface{}{
					"vs": vs}, "results", map[string]interface{}{
					"r1":  r1,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawCreateMany", "params", map[string]interface{}{
					"vs": vs}, "results", map[string]interface{}{
					"r1":  r1,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawCreateMany", "params", map[string]interface{}{
				"vs": vs}, "results", map[string]interface{}{
				"r1":  r1,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawCreateMany", "params", map[string]interface{}{
				"vs": vs}, "results", map[string]interface{}{
				"r1":  r1,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawCreateMany(ctx, vs)
}

// RawCreatePreByResourceId implements ResourceService
func (_d ResourceServiceWithLog) RawCreatePreByResourceId(ctx context.Context, id int, v *ent.Resource) (res *ent.Resource, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawCreatePreByResourceId", "params", map[string]interface{}{
					"id": id,
					"v":  v}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawCreatePreByResourceId", "params", map[string]interface{}{
					"id": id,
					"v":  v}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawCreatePreByResourceId", "params", map[string]interface{}{
				"id": id,
				"v":  v}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawCreatePreByResourceId", "params", map[string]interface{}{
				"id": id,
				"v":  v}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawCreatePreByResourceId(ctx, id, v)
}

// RawCreateResourcesByResourceId implements ResourceService
func (_d ResourceServiceWithLog) RawCreateResourcesByResourceId(ctx context.Context, id int, vs ent.Resources) (res *ent.Resource, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawCreateResourcesByResourceId", "params", map[string]interface{}{
					"id": id,
					"vs": vs}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawCreateResourcesByResourceId", "params", map[string]interface{}{
					"id": id,
					"vs": vs}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawCreateResourcesByResourceId", "params", map[string]interface{}{
				"id": id,
				"vs": vs}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawCreateResourcesByResourceId", "params", map[string]interface{}{
				"id": id,
				"vs": vs}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawCreateResourcesByResourceId(ctx, id, vs)
}

// RawDeleteNextByResourceId implements ResourceService
func (_d ResourceServiceWithLog) RawDeleteNextByResourceId(ctx context.Context, id int, deleteIds []int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawDeleteNextByResourceId", "params", map[string]interface{}{
					"id":        id,
					"deleteIds": deleteIds}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawDeleteNextByResourceId", "params", map[string]interface{}{
					"id":        id,
					"deleteIds": deleteIds}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawDeleteNextByResourceId", "params", map[string]interface{}{
				"id":        id,
				"deleteIds": deleteIds}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawDeleteNextByResourceId", "params", map[string]interface{}{
				"id":        id,
				"deleteIds": deleteIds}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawDeleteNextByResourceId(ctx, id, deleteIds)
}

// RawDeletePreByResourceId implements ResourceService
func (_d ResourceServiceWithLog) RawDeletePreByResourceId(ctx context.Context, id int, deleteId int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawDeletePreByResourceId", "params", map[string]interface{}{
					"id":       id,
					"deleteId": deleteId}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawDeletePreByResourceId", "params", map[string]interface{}{
					"id":       id,
					"deleteId": deleteId}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawDeletePreByResourceId", "params", map[string]interface{}{
				"id":       id,
				"deleteId": deleteId}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawDeletePreByResourceId", "params", map[string]interface{}{
				"id":       id,
				"deleteId": deleteId}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawDeletePreByResourceId(ctx, id, deleteId)
}

// RawGetById implements ResourceService
func (_d ResourceServiceWithLog) RawGetById(ctx context.Context, id int) (res *ent.Resource, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawGetById", "params", map[string]interface{}{
					"id": id}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawGetById", "params", map[string]interface{}{
					"id": id}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawGetById", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawGetById", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawGetById(ctx, id)
}

// RawGetNextByResourceId implements ResourceService
func (_d ResourceServiceWithLog) RawGetNextByResourceId(ctx context.Context, id int, i interface{}) (res ent.Resources, count int, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawGetNextByResourceId", "params", map[string]interface{}{
					"id": id,
					"i":  i}, "results", map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawGetNextByResourceId", "params", map[string]interface{}{
					"id": id,
					"i":  i}, "results", map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawGetNextByResourceId", "params", map[string]interface{}{
				"id": id,
				"i":  i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawGetNextByResourceId", "params", map[string]interface{}{
				"id": id,
				"i":  i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawGetNextByResourceId(ctx, id, i)
}

// RawGetPreByResourceId implements ResourceService
func (_d ResourceServiceWithLog) RawGetPreByResourceId(ctx context.Context, id int) (res *ent.Resource, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawGetPreByResourceId", "params", map[string]interface{}{
					"id": id}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawGetPreByResourceId", "params", map[string]interface{}{
					"id": id}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawGetPreByResourceId", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawGetPreByResourceId", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawGetPreByResourceId(ctx, id)
}

// RawRemoveBindNextByResourceId implements ResourceService
func (_d ResourceServiceWithLog) RawRemoveBindNextByResourceId(ctx context.Context, id int, removeIds []int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawRemoveBindNextByResourceId", "params", map[string]interface{}{
					"id":        id,
					"removeIds": removeIds}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawRemoveBindNextByResourceId", "params", map[string]interface{}{
					"id":        id,
					"removeIds": removeIds}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawRemoveBindNextByResourceId", "params", map[string]interface{}{
				"id":        id,
				"removeIds": removeIds}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawRemoveBindNextByResourceId", "params", map[string]interface{}{
				"id":        id,
				"removeIds": removeIds}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawRemoveBindNextByResourceId(ctx, id, removeIds)
}

// RawRemoveBindPreByResourceId implements ResourceService
func (_d ResourceServiceWithLog) RawRemoveBindPreByResourceId(ctx context.Context, id int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawRemoveBindPreByResourceId", "params", map[string]interface{}{
					"id": id}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawRemoveBindPreByResourceId", "params", map[string]interface{}{
					"id": id}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawRemoveBindPreByResourceId", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawRemoveBindPreByResourceId", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawRemoveBindPreByResourceId(ctx, id)
}

// RawUpdateBindNextByResourceId implements ResourceService
func (_d ResourceServiceWithLog) RawUpdateBindNextByResourceId(ctx context.Context, id int, removeIds []int, addIds []int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawUpdateBindNextByResourceId", "params", map[string]interface{}{
					"id":        id,
					"removeIds": removeIds,
					"addIds":    addIds}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawUpdateBindNextByResourceId", "params", map[string]interface{}{
					"id":        id,
					"removeIds": removeIds,
					"addIds":    addIds}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawUpdateBindNextByResourceId", "params", map[string]interface{}{
				"id":        id,
				"removeIds": removeIds,
				"addIds":    addIds}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawUpdateBindNextByResourceId", "params", map[string]interface{}{
				"id":        id,
				"removeIds": removeIds,
				"addIds":    addIds}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawUpdateBindNextByResourceId(ctx, id, removeIds, addIds)
}

// RawUpdateBindPreByResourceId implements ResourceService
func (_d ResourceServiceWithLog) RawUpdateBindPreByResourceId(ctx context.Context, id int, updateId int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawUpdateBindPreByResourceId", "params", map[string]interface{}{
					"id":       id,
					"updateId": updateId}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawUpdateBindPreByResourceId", "params", map[string]interface{}{
					"id":       id,
					"updateId": updateId}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawUpdateBindPreByResourceId", "params", map[string]interface{}{
				"id":       id,
				"updateId": updateId}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawUpdateBindPreByResourceId", "params", map[string]interface{}{
				"id":       id,
				"updateId": updateId}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawUpdateBindPreByResourceId(ctx, id, updateId)
}

// RawUpdateById implements ResourceService
func (_d ResourceServiceWithLog) RawUpdateById(ctx context.Context, id int, v *ent.Resource) (rp1 *ent.Resource, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawUpdateById", "params", map[string]interface{}{
					"id": id,
					"v":  v}, "results", map[string]interface{}{
					"rp1": rp1,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawUpdateById", "params", map[string]interface{}{
					"id": id,
					"v":  v}, "results", map[string]interface{}{
					"rp1": rp1,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawUpdateById", "params", map[string]interface{}{
				"id": id,
				"v":  v}, "results", map[string]interface{}{
				"rp1": rp1,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawUpdateById", "params", map[string]interface{}{
				"id": id,
				"v":  v}, "results", map[string]interface{}{
				"rp1": rp1,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawUpdateById(ctx, id, v)
}

// RawUpdateMany implements ResourceService
func (_d ResourceServiceWithLog) RawUpdateMany(ctx context.Context, vs ent.Resources) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawUpdateMany", "params", map[string]interface{}{
					"vs": vs}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawUpdateMany", "params", map[string]interface{}{
					"vs": vs}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawUpdateMany", "params", map[string]interface{}{
				"vs": vs}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawUpdateMany", "params", map[string]interface{}{
				"vs": vs}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawUpdateMany(ctx, vs)
}

// UpdateById implements ResourceService
func (_d ResourceServiceWithLog) UpdateById(ctx context.Context, id int, v ent.ResourceBaseUpdateReq) (rp1 *ent.Resource, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling UpdateById", "params", map[string]interface{}{
					"id": id,
					"v":  v}, "results", map[string]interface{}{
					"rp1": rp1,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling UpdateById", "params", map[string]interface{}{
					"id": id,
					"v":  v}, "results", map[string]interface{}{
					"rp1": rp1,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling UpdateById", "params", map[string]interface{}{
				"id": id,
				"v":  v}, "results", map[string]interface{}{
				"rp1": rp1,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling UpdateById", "params", map[string]interface{}{
				"id": id,
				"v":  v}, "results", map[string]interface{}{
				"rp1": rp1,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.UpdateById(ctx, id, v)
}

// UpdateMany implements ResourceService
func (_d ResourceServiceWithLog) UpdateMany(ctx context.Context, vs []ent.ResourceBaseUpdateReq) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling UpdateMany", "params", map[string]interface{}{
					"vs": vs}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling UpdateMany", "params", map[string]interface{}{
					"vs": vs}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling UpdateMany", "params", map[string]interface{}{
				"vs": vs}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling UpdateMany", "params", map[string]interface{}{
				"vs": vs}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.UpdateMany(ctx, vs)
}
