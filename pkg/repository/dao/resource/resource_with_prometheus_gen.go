package resource

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"

	"context"

	"hello/pkg/ent"
)

// ResourceServiceWithPrometheus implements ResourceService interface with all methods wrapped
// with Prometheus metrics
type ResourceServiceWithPrometheus struct {
	base         ResourceService
	instanceName string
}

var resourceserviceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "dao_resource_duration_seconds",
		Help:       "resourceservice runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"})

// NewResourceServiceWithPrometheus returns an instance of the ResourceService decorated with prometheus summary metric
func NewResourceServiceWithPrometheus(base ResourceService) ResourceServiceWithPrometheus {
	return ResourceServiceWithPrometheus{
		base:         base,
		instanceName: "resourceservice",
	}
}

// ByQueriesAll implements ResourceService
func (_d ResourceServiceWithPrometheus) ByQueriesAll(ctx context.Context, i interface{}) (res []ent.ResourceBaseGetRes, count int, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		resourceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "ByQueriesAll", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ByQueriesAll(ctx, i)
}

// ByQueriesOne implements ResourceService
func (_d ResourceServiceWithPrometheus) ByQueriesOne(ctx context.Context, i interface{}) (res ent.ResourceBaseGetRes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		resourceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "ByQueriesOne", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ByQueriesOne(ctx, i)
}

// Create implements ResourceService
func (_d ResourceServiceWithPrometheus) Create(ctx context.Context, v ent.ResourceBaseCreateReq) (res *ent.Resource, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		resourceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "Create", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Create(ctx, v)
}

// CreateMany implements ResourceService
func (_d ResourceServiceWithPrometheus) CreateMany(ctx context.Context, vs []ent.ResourceBaseCreateReq) (r1 ent.Resources, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		resourceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "CreateMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.CreateMany(ctx, vs)
}

// DeleteById implements ResourceService
func (_d ResourceServiceWithPrometheus) DeleteById(ctx context.Context, id int) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		resourceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteById(ctx, id)
}

// DeleteMany implements ResourceService
func (_d ResourceServiceWithPrometheus) DeleteMany(ctx context.Context, ids []int) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		resourceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteMany(ctx, ids)
}

// GetById implements ResourceService
func (_d ResourceServiceWithPrometheus) GetById(ctx context.Context, id int) (res ent.ResourceBaseGetRes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		resourceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetById(ctx, id)
}

// IdByResource implements ResourceService
func (_d ResourceServiceWithPrometheus) IdByResource(ctx context.Context, path string, action string) (i1 int, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		resourceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "IdByResource", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.IdByResource(ctx, path, action)
}

// RawByQueriesAll implements ResourceService
func (_d ResourceServiceWithPrometheus) RawByQueriesAll(ctx context.Context, i interface{}) (res ent.Resources, count int, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		resourceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RawByQueriesAll", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RawByQueriesAll(ctx, i)
}

// RawByQueriesOne implements ResourceService
func (_d ResourceServiceWithPrometheus) RawByQueriesOne(ctx context.Context, i interface{}) (res *ent.Resource, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		resourceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RawByQueriesOne", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RawByQueriesOne(ctx, i)
}

// RawCreate implements ResourceService
func (_d ResourceServiceWithPrometheus) RawCreate(ctx context.Context, v *ent.Resource) (res *ent.Resource, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		resourceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RawCreate", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RawCreate(ctx, v)
}

// RawCreateMany implements ResourceService
func (_d ResourceServiceWithPrometheus) RawCreateMany(ctx context.Context, vs ent.Resources) (r1 ent.Resources, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		resourceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RawCreateMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RawCreateMany(ctx, vs)
}

// RawGetById implements ResourceService
func (_d ResourceServiceWithPrometheus) RawGetById(ctx context.Context, id int) (res *ent.Resource, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		resourceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RawGetById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RawGetById(ctx, id)
}

// RawUpdateById implements ResourceService
func (_d ResourceServiceWithPrometheus) RawUpdateById(ctx context.Context, id int, v *ent.Resource) (rp1 *ent.Resource, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		resourceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RawUpdateById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RawUpdateById(ctx, id, v)
}

// RawUpdateMany implements ResourceService
func (_d ResourceServiceWithPrometheus) RawUpdateMany(ctx context.Context, vs ent.Resources) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		resourceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RawUpdateMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RawUpdateMany(ctx, vs)
}

// UpdateById implements ResourceService
func (_d ResourceServiceWithPrometheus) UpdateById(ctx context.Context, id int, v ent.ResourceBaseUpdateReq) (rp1 *ent.Resource, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		resourceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateById(ctx, id, v)
}

// UpdateMany implements ResourceService
func (_d ResourceServiceWithPrometheus) UpdateMany(ctx context.Context, vs []ent.ResourceBaseUpdateReq) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		resourceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateMany(ctx, vs)
}
