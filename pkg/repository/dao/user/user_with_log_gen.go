package user

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"

	"go.opentelemetry.io/otel/trace"
	"go.uber.org/zap"

	"hello/pkg/ent"
)

// UserServiceWithLog implements UserService that is instrumented with logging
type UserServiceWithLog struct {
	_log  *zap.SugaredLogger
	_base UserService
}

// NewUserServiceWithLog instruments an implementation of the UserService with simple logging
func NewUserServiceWithLog(base UserService, log *zap.SugaredLogger) UserServiceWithLog {
	return UserServiceWithLog{
		_base: base,
		_log:  log,
	}
}

// ByQueries implements UserService
func (_d UserServiceWithLog) ByQueries(ctx context.Context, i interface{}) (res ent.Users, count int, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("UserServiceWithLog calling ByQueries", "params", map[string]interface{}{
			"i": i}, "results", map[string]interface{}{
			"res":   res,
			"count": count,
			"err":   err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"i": i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   err})
		}

	}()
	return _d._base.ByQueries(ctx, i)
}

// Create implements UserService
func (_d UserServiceWithLog) Create(ctx context.Context, v ent.User) (res *ent.User, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("UserServiceWithLog calling Create", "params", map[string]interface{}{
			"v": v}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"v": v}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.Create(ctx, v)
}

// CreateMany implements UserService
func (_d UserServiceWithLog) CreateMany(ctx context.Context, vs ent.Users) (u1 ent.Users, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("UserServiceWithLog calling CreateMany", "params", map[string]interface{}{
			"vs": vs}, "results", map[string]interface{}{
			"u1":  u1,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"vs": vs}, "results", map[string]interface{}{
				"u1":  u1,
				"err": err})
		}

	}()
	return _d._base.CreateMany(ctx, vs)
}

// CreatePodsSliceByUserId implements UserService
func (_d UserServiceWithLog) CreatePodsSliceByUserId(ctx context.Context, id int, vs ent.Pods) (res *ent.User, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("UserServiceWithLog calling CreatePodsSliceByUserId", "params", map[string]interface{}{
			"id": id,
			"vs": vs}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"id": id,
				"vs": vs}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.CreatePodsSliceByUserId(ctx, id, vs)
}

// DeleteById implements UserService
func (_d UserServiceWithLog) DeleteById(ctx context.Context, id int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("UserServiceWithLog calling DeleteById", "params", map[string]interface{}{
			"id": id}, "results", map[string]interface{}{
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"err": err})
		}

	}()
	return _d._base.DeleteById(ctx, id)
}

// DeleteMany implements UserService
func (_d UserServiceWithLog) DeleteMany(ctx context.Context, ids []int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("UserServiceWithLog calling UserRestDeleteMany", "params", map[string]interface{}{
			"ids": ids}, "results", map[string]interface{}{
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"ids": ids}, "results", map[string]interface{}{
				"err": err})
		}

	}()
	return _d._base.DeleteMany(ctx, ids)
}

// GetById implements UserService
func (_d UserServiceWithLog) GetById(ctx context.Context, id int) (res *ent.User, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("UserServiceWithLog calling GetById", "params", map[string]interface{}{
			"id": id}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.GetById(ctx, id)
}

// GetPodsSliceByUserId implements UserService
func (_d UserServiceWithLog) GetPodsSliceByUserId(ctx context.Context, id int, i interface{}) (res ent.Pods, count int, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("UserServiceWithLog calling GetPodsSliceByUserId", "params", map[string]interface{}{
			"id": id,
			"i":  i}, "results", map[string]interface{}{
			"res":   res,
			"count": count,
			"err":   err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"id": id,
				"i":  i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   err})
		}

	}()
	return _d._base.GetPodsSliceByUserId(ctx, id, i)
}

// UpdateById implements UserService
func (_d UserServiceWithLog) UpdateById(ctx context.Context, id int, v *ent.User) (up1 *ent.User, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("UserServiceWithLog calling UpdateById", "params", map[string]interface{}{
			"id": id,
			"v":  v}, "results", map[string]interface{}{
			"up1": up1,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"id": id,
				"v":  v}, "results", map[string]interface{}{
				"up1": up1,
				"err": err})
		}

	}()
	return _d._base.UpdateById(ctx, id, v)
}

// UpdateMany implements UserService
func (_d UserServiceWithLog) UpdateMany(ctx context.Context, vs ent.Users) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("UserServiceWithLog calling UpdateMany", "params", map[string]interface{}{
			"vs": vs}, "results", map[string]interface{}{
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"vs": vs}, "results", map[string]interface{}{
				"err": err})
		}

	}()
	return _d._base.UpdateMany(ctx, vs)
}
