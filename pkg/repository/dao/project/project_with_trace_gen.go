package project

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"encoding/json"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
	semconv "go.opentelemetry.io/otel/semconv/v1.7.0"
	"go.opentelemetry.io/otel/trace"

	"context"

	"hello/pkg/ent"
)

// ProjectServiceWithTracing implements ProjectService interface instrumented with opentracing spans
type ProjectServiceWithTracing struct {
	ProjectService
}

// NewProjectServiceWithTracing returns ProjectServiceWithTracing
func NewProjectServiceWithTracing(base ProjectService) ProjectService {
	d := ProjectServiceWithTracing{
		ProjectService: base,
	}

	return d
}

// ByQueriesAll implements ProjectService
func (_d ProjectServiceWithTracing) ByQueriesAll(ctx context.Context, i interface{}) (res []ent.ProjectBaseGetRes, count int, err error) {

	var name = "ProjectService.ByQueriesAll"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"i": i},
				"result": map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.ByQueriesAll(ctx, i)
}

// ByQueriesOne implements ProjectService
func (_d ProjectServiceWithTracing) ByQueriesOne(ctx context.Context, i interface{}) (res ent.ProjectBaseGetRes, err error) {

	var name = "ProjectService.ByQueriesOne"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"i": i},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.ByQueriesOne(ctx, i)
}

// Create implements ProjectService
func (_d ProjectServiceWithTracing) Create(ctx context.Context, v ent.ProjectBaseCreateReq) (res *ent.Project, err error) {

	var name = "ProjectService.Create"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"v": v},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.Create(ctx, v)
}

// CreateMany implements ProjectService
func (_d ProjectServiceWithTracing) CreateMany(ctx context.Context, vs []ent.ProjectBaseCreateReq) (p1 ent.Projects, err error) {

	var name = "ProjectService.CreateMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"vs": vs},
				"result": map[string]interface{}{
					"p1":  p1,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.CreateMany(ctx, vs)
}

// CreateServicesByProjectId implements ProjectService
func (_d ProjectServiceWithTracing) CreateServicesByProjectId(ctx context.Context, id int, vs []ent.ServiceBaseCreateReq) (res *ent.Project, err error) {

	var name = "ProjectService.CreateServicesByProjectId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"id": id,
					"vs": vs},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.CreateServicesByProjectId(ctx, id, vs)
}

// DeleteById implements ProjectService
func (_d ProjectServiceWithTracing) DeleteById(ctx context.Context, id int) (err error) {

	var name = "ProjectService.DeleteById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"id": id},
				"result": map[string]interface{}{
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.DeleteById(ctx, id)
}

// DeleteMany implements ProjectService
func (_d ProjectServiceWithTracing) DeleteMany(ctx context.Context, ids []int) (err error) {

	var name = "ProjectService.DeleteMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"ids": ids},
				"result": map[string]interface{}{
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.DeleteMany(ctx, ids)
}

// GetById implements ProjectService
func (_d ProjectServiceWithTracing) GetById(ctx context.Context, id int) (res ent.ProjectBaseGetRes, err error) {

	var name = "ProjectService.GetById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"id": id},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.GetById(ctx, id)
}

// GetOneWithServiceQsById implements ProjectService
func (_d ProjectServiceWithTracing) GetOneWithServiceQsById(ctx context.Context, id int, qs interface{}) (pp1 *ent.Project, err error) {

	var name = "ProjectService.GetOneWithServiceQsById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"id": id,
					"qs": qs},
				"result": map[string]interface{}{
					"pp1": pp1,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.GetOneWithServiceQsById(ctx, id, qs)
}

// GetServicesByProjectId implements ProjectService
func (_d ProjectServiceWithTracing) GetServicesByProjectId(ctx context.Context, id int, i interface{}) (res []ent.ServiceBaseGetRes, count int, err error) {

	var name = "ProjectService.GetServicesByProjectId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"id": id,
					"i":  i},
				"result": map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.GetServicesByProjectId(ctx, id, i)
}

// RawAddBindServicesByProjectId implements ProjectService
func (_d ProjectServiceWithTracing) RawAddBindServicesByProjectId(ctx context.Context, id int, addIds []int) (err error) {

	var name = "ProjectService.RawAddBindServicesByProjectId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"id":     id,
					"addIds": addIds},
				"result": map[string]interface{}{
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.RawAddBindServicesByProjectId(ctx, id, addIds)
}

// RawByQueriesAll implements ProjectService
func (_d ProjectServiceWithTracing) RawByQueriesAll(ctx context.Context, i interface{}) (res ent.Projects, count int, err error) {

	var name = "ProjectService.RawByQueriesAll"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"i": i},
				"result": map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.RawByQueriesAll(ctx, i)
}

// RawByQueriesOne implements ProjectService
func (_d ProjectServiceWithTracing) RawByQueriesOne(ctx context.Context, i interface{}) (res *ent.Project, err error) {

	var name = "ProjectService.RawByQueriesOne"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"i": i},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.RawByQueriesOne(ctx, i)
}

// RawCreate implements ProjectService
func (_d ProjectServiceWithTracing) RawCreate(ctx context.Context, v *ent.Project) (res *ent.Project, err error) {

	var name = "ProjectService.RawCreate"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"v": v},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.RawCreate(ctx, v)
}

// RawCreateMany implements ProjectService
func (_d ProjectServiceWithTracing) RawCreateMany(ctx context.Context, vs ent.Projects) (p1 ent.Projects, err error) {

	var name = "ProjectService.RawCreateMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"vs": vs},
				"result": map[string]interface{}{
					"p1":  p1,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.RawCreateMany(ctx, vs)
}

// RawCreateServicesByProjectId implements ProjectService
func (_d ProjectServiceWithTracing) RawCreateServicesByProjectId(ctx context.Context, id int, vs ent.Services) (res *ent.Project, err error) {

	var name = "ProjectService.RawCreateServicesByProjectId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"id": id,
					"vs": vs},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.RawCreateServicesByProjectId(ctx, id, vs)
}

// RawDeleteServicesByProjectId implements ProjectService
func (_d ProjectServiceWithTracing) RawDeleteServicesByProjectId(ctx context.Context, id int, deleteIds []int) (err error) {

	var name = "ProjectService.RawDeleteServicesByProjectId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"id":        id,
					"deleteIds": deleteIds},
				"result": map[string]interface{}{
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.RawDeleteServicesByProjectId(ctx, id, deleteIds)
}

// RawGetById implements ProjectService
func (_d ProjectServiceWithTracing) RawGetById(ctx context.Context, id int) (res *ent.Project, err error) {

	var name = "ProjectService.RawGetById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"id": id},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.RawGetById(ctx, id)
}

// RawGetServicesByProjectId implements ProjectService
func (_d ProjectServiceWithTracing) RawGetServicesByProjectId(ctx context.Context, id int, i interface{}) (res ent.Services, count int, err error) {

	var name = "ProjectService.RawGetServicesByProjectId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"id": id,
					"i":  i},
				"result": map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.RawGetServicesByProjectId(ctx, id, i)
}

// RawRemoveBindServicesByProjectId implements ProjectService
func (_d ProjectServiceWithTracing) RawRemoveBindServicesByProjectId(ctx context.Context, id int, removeIds []int) (err error) {

	var name = "ProjectService.RawRemoveBindServicesByProjectId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"id":        id,
					"removeIds": removeIds},
				"result": map[string]interface{}{
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.RawRemoveBindServicesByProjectId(ctx, id, removeIds)
}

// RawUpdateBindServicesByProjectId implements ProjectService
func (_d ProjectServiceWithTracing) RawUpdateBindServicesByProjectId(ctx context.Context, id int, removeIds []int, addIds []int) (err error) {

	var name = "ProjectService.RawUpdateBindServicesByProjectId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"id":        id,
					"removeIds": removeIds,
					"addIds":    addIds},
				"result": map[string]interface{}{
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.RawUpdateBindServicesByProjectId(ctx, id, removeIds, addIds)
}

// RawUpdateById implements ProjectService
func (_d ProjectServiceWithTracing) RawUpdateById(ctx context.Context, id int, v *ent.Project) (pp1 *ent.Project, err error) {

	var name = "ProjectService.RawUpdateById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"id": id,
					"v":  v},
				"result": map[string]interface{}{
					"pp1": pp1,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.RawUpdateById(ctx, id, v)
}

// RawUpdateMany implements ProjectService
func (_d ProjectServiceWithTracing) RawUpdateMany(ctx context.Context, vs ent.Projects) (err error) {

	var name = "ProjectService.RawUpdateMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"vs": vs},
				"result": map[string]interface{}{
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.RawUpdateMany(ctx, vs)
}

// UpdateById implements ProjectService
func (_d ProjectServiceWithTracing) UpdateById(ctx context.Context, id int, v ent.ProjectBaseUpdateReq) (pp1 *ent.Project, err error) {

	var name = "ProjectService.UpdateById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"id": id,
					"v":  v},
				"result": map[string]interface{}{
					"pp1": pp1,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.UpdateById(ctx, id, v)
}

// UpdateMany implements ProjectService
func (_d ProjectServiceWithTracing) UpdateMany(ctx context.Context, vs []ent.ProjectBaseUpdateReq) (err error) {

	var name = "ProjectService.UpdateMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"vs": vs},
				"result": map[string]interface{}{
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.UpdateMany(ctx, vs)
}
