package project

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"hello/pkg/ent"

	"go.opentelemetry.io/otel/trace"
	"go.uber.org/zap"
)

// ProjectServiceWithLog implements ProjectService that is instrumented with logging
type ProjectServiceWithLog struct {
	_log  *zap.SugaredLogger
	_base ProjectService
}

// NewProjectServiceWithLog instruments an implementation of the ProjectService with simple logging
func NewProjectServiceWithLog(base ProjectService, log *zap.SugaredLogger) ProjectServiceWithLog {
	return ProjectServiceWithLog{
		_base: base,
		_log:  log,
	}
}

// ByQueries implements ProjectService
func (_d ProjectServiceWithLog) ByQueries(ctx context.Context, i interface{}) (res ent.Projects, count int, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("ProjectServiceWithLog calling ByQueries", "params", map[string]interface{}{
			"i": i}, "results", map[string]interface{}{
			"res":   res,
			"count": count,
			"err":   err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"i": i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   err})
		}

	}()
	return _d._base.ByQueries(ctx, i)
}

// Create implements ProjectService
func (_d ProjectServiceWithLog) Create(ctx context.Context, v ent.Project) (res *ent.Project, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("ProjectServiceWithLog calling Create", "params", map[string]interface{}{
			"v": v}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"v": v}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.Create(ctx, v)
}

// DeleteById implements ProjectService
func (_d ProjectServiceWithLog) DeleteById(ctx context.Context, id int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("ProjectServiceWithLog calling DeleteById", "params", map[string]interface{}{
			"id": id}, "results", map[string]interface{}{
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"err": err})
		}

	}()
	return _d._base.DeleteById(ctx, id)
}

// GetById implements ProjectService
func (_d ProjectServiceWithLog) GetById(ctx context.Context, id int) (res *ent.Project, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("ProjectServiceWithLog calling GetById", "params", map[string]interface{}{
			"id": id}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.GetById(ctx, id)
}

// UpdateById implements ProjectService
func (_d ProjectServiceWithLog) UpdateById(ctx context.Context, id int, v *ent.Project) (pp1 *ent.Project, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("ProjectServiceWithLog calling UpdateById", "params", map[string]interface{}{
			"id": id,
			"v":  v}, "results", map[string]interface{}{
			"pp1": pp1,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"id": id,
				"v":  v}, "results", map[string]interface{}{
				"pp1": pp1,
				"err": err})
		}

	}()
	return _d._base.UpdateById(ctx, id, v)
}
