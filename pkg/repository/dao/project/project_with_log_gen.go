package project

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"fmt"

	ginkHttp "github.com/fitan/gink/transport/http"
	"go.opentelemetry.io/otel/trace"
	"go.uber.org/zap"

	"context"

	"hello/pkg/ent"
)

// ProjectServiceWithLog implements ProjectService that is instrumented with logging
type ProjectServiceWithLog struct {
	_log  *zap.SugaredLogger
	_base ProjectService
}

// NewProjectServiceWithLog instruments an implementation of the ProjectService with simple logging
func NewProjectServiceWithLog(base ProjectService, log *zap.SugaredLogger) ProjectServiceWithLog {
	return ProjectServiceWithLog{
		_base: base,
		_log:  log,
	}
}

// ByQueriesAll implements ProjectService
func (_d ProjectServiceWithLog) ByQueriesAll(ctx context.Context, i interface{}) (res []ent.ProjectBaseGetRes, count int, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling ByQueriesAll", "params", map[string]interface{}{
					"i": i}, "results", map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling ByQueriesAll", "params", map[string]interface{}{
					"i": i}, "results", map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling ByQueriesAll", "params", map[string]interface{}{
				"i": i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling ByQueriesAll", "params", map[string]interface{}{
				"i": i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.ByQueriesAll(ctx, i)
}

// ByQueriesOne implements ProjectService
func (_d ProjectServiceWithLog) ByQueriesOne(ctx context.Context, i interface{}) (res ent.ProjectBaseGetRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling ByQueriesOne", "params", map[string]interface{}{
					"i": i}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling ByQueriesOne", "params", map[string]interface{}{
					"i": i}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling ByQueriesOne", "params", map[string]interface{}{
				"i": i}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling ByQueriesOne", "params", map[string]interface{}{
				"i": i}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.ByQueriesOne(ctx, i)
}

// Create implements ProjectService
func (_d ProjectServiceWithLog) Create(ctx context.Context, v ent.ProjectBaseCreateReq) (res *ent.Project, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling Create", "params", map[string]interface{}{
					"v": v}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling Create", "params", map[string]interface{}{
					"v": v}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling Create", "params", map[string]interface{}{
				"v": v}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling Create", "params", map[string]interface{}{
				"v": v}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.Create(ctx, v)
}

// CreateMany implements ProjectService
func (_d ProjectServiceWithLog) CreateMany(ctx context.Context, vs []ent.ProjectBaseCreateReq) (p1 ent.Projects, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling CreateMany", "params", map[string]interface{}{
					"vs": vs}, "results", map[string]interface{}{
					"p1":  p1,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling CreateMany", "params", map[string]interface{}{
					"vs": vs}, "results", map[string]interface{}{
					"p1":  p1,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling CreateMany", "params", map[string]interface{}{
				"vs": vs}, "results", map[string]interface{}{
				"p1":  p1,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling CreateMany", "params", map[string]interface{}{
				"vs": vs}, "results", map[string]interface{}{
				"p1":  p1,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.CreateMany(ctx, vs)
}

// CreateServicesByProjectId implements ProjectService
func (_d ProjectServiceWithLog) CreateServicesByProjectId(ctx context.Context, id int, vs []ent.ServiceBaseCreateReq) (res *ent.Project, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling CreateServicesByProjectId", "params", map[string]interface{}{
					"id": id,
					"vs": vs}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling CreateServicesByProjectId", "params", map[string]interface{}{
					"id": id,
					"vs": vs}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling CreateServicesByProjectId", "params", map[string]interface{}{
				"id": id,
				"vs": vs}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling CreateServicesByProjectId", "params", map[string]interface{}{
				"id": id,
				"vs": vs}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.CreateServicesByProjectId(ctx, id, vs)
}

// DeleteById implements ProjectService
func (_d ProjectServiceWithLog) DeleteById(ctx context.Context, id int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling DeleteById", "params", map[string]interface{}{
					"id": id}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling DeleteById", "params", map[string]interface{}{
					"id": id}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling DeleteById", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling DeleteById", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.DeleteById(ctx, id)
}

// DeleteMany implements ProjectService
func (_d ProjectServiceWithLog) DeleteMany(ctx context.Context, ids []int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling DeleteMany", "params", map[string]interface{}{
					"ids": ids}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling DeleteMany", "params", map[string]interface{}{
					"ids": ids}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling DeleteMany", "params", map[string]interface{}{
				"ids": ids}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling DeleteMany", "params", map[string]interface{}{
				"ids": ids}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.DeleteMany(ctx, ids)
}

// GetById implements ProjectService
func (_d ProjectServiceWithLog) GetById(ctx context.Context, id int) (res ent.ProjectBaseGetRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling GetById", "params", map[string]interface{}{
					"id": id}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling GetById", "params", map[string]interface{}{
					"id": id}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling GetById", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling GetById", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.GetById(ctx, id)
}

// GetOneWithServiceQsById implements ProjectService
func (_d ProjectServiceWithLog) GetOneWithServiceQsById(ctx context.Context, id int, qs interface{}) (pp1 *ent.Project, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling GetOneWithServiceQsById", "params", map[string]interface{}{
					"id": id,
					"qs": qs}, "results", map[string]interface{}{
					"pp1": pp1,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling GetOneWithServiceQsById", "params", map[string]interface{}{
					"id": id,
					"qs": qs}, "results", map[string]interface{}{
					"pp1": pp1,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling GetOneWithServiceQsById", "params", map[string]interface{}{
				"id": id,
				"qs": qs}, "results", map[string]interface{}{
				"pp1": pp1,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling GetOneWithServiceQsById", "params", map[string]interface{}{
				"id": id,
				"qs": qs}, "results", map[string]interface{}{
				"pp1": pp1,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.GetOneWithServiceQsById(ctx, id, qs)
}

// GetServicesByProjectId implements ProjectService
func (_d ProjectServiceWithLog) GetServicesByProjectId(ctx context.Context, id int, i interface{}) (res []ent.ServiceBaseGetRes, count int, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling GetServicesByProjectId", "params", map[string]interface{}{
					"id": id,
					"i":  i}, "results", map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling GetServicesByProjectId", "params", map[string]interface{}{
					"id": id,
					"i":  i}, "results", map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling GetServicesByProjectId", "params", map[string]interface{}{
				"id": id,
				"i":  i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling GetServicesByProjectId", "params", map[string]interface{}{
				"id": id,
				"i":  i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.GetServicesByProjectId(ctx, id, i)
}

// RawAddBindServicesByProjectId implements ProjectService
func (_d ProjectServiceWithLog) RawAddBindServicesByProjectId(ctx context.Context, id int, addIds []int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawAddBindServicesByProjectId", "params", map[string]interface{}{
					"id":     id,
					"addIds": addIds}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawAddBindServicesByProjectId", "params", map[string]interface{}{
					"id":     id,
					"addIds": addIds}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawAddBindServicesByProjectId", "params", map[string]interface{}{
				"id":     id,
				"addIds": addIds}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawAddBindServicesByProjectId", "params", map[string]interface{}{
				"id":     id,
				"addIds": addIds}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawAddBindServicesByProjectId(ctx, id, addIds)
}

// RawByQueriesAll implements ProjectService
func (_d ProjectServiceWithLog) RawByQueriesAll(ctx context.Context, i interface{}) (res ent.Projects, count int, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawByQueriesAll", "params", map[string]interface{}{
					"i": i}, "results", map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawByQueriesAll", "params", map[string]interface{}{
					"i": i}, "results", map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawByQueriesAll", "params", map[string]interface{}{
				"i": i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawByQueriesAll", "params", map[string]interface{}{
				"i": i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawByQueriesAll(ctx, i)
}

// RawByQueriesOne implements ProjectService
func (_d ProjectServiceWithLog) RawByQueriesOne(ctx context.Context, i interface{}) (res *ent.Project, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawByQueriesOne", "params", map[string]interface{}{
					"i": i}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawByQueriesOne", "params", map[string]interface{}{
					"i": i}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawByQueriesOne", "params", map[string]interface{}{
				"i": i}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawByQueriesOne", "params", map[string]interface{}{
				"i": i}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawByQueriesOne(ctx, i)
}

// RawCreate implements ProjectService
func (_d ProjectServiceWithLog) RawCreate(ctx context.Context, v *ent.Project) (res *ent.Project, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawCreate", "params", map[string]interface{}{
					"v": v}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawCreate", "params", map[string]interface{}{
					"v": v}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawCreate", "params", map[string]interface{}{
				"v": v}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawCreate", "params", map[string]interface{}{
				"v": v}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawCreate(ctx, v)
}

// RawCreateMany implements ProjectService
func (_d ProjectServiceWithLog) RawCreateMany(ctx context.Context, vs ent.Projects) (p1 ent.Projects, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawCreateMany", "params", map[string]interface{}{
					"vs": vs}, "results", map[string]interface{}{
					"p1":  p1,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawCreateMany", "params", map[string]interface{}{
					"vs": vs}, "results", map[string]interface{}{
					"p1":  p1,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawCreateMany", "params", map[string]interface{}{
				"vs": vs}, "results", map[string]interface{}{
				"p1":  p1,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawCreateMany", "params", map[string]interface{}{
				"vs": vs}, "results", map[string]interface{}{
				"p1":  p1,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawCreateMany(ctx, vs)
}

// RawCreateServicesByProjectId implements ProjectService
func (_d ProjectServiceWithLog) RawCreateServicesByProjectId(ctx context.Context, id int, vs ent.Services) (res *ent.Project, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawCreateServicesByProjectId", "params", map[string]interface{}{
					"id": id,
					"vs": vs}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawCreateServicesByProjectId", "params", map[string]interface{}{
					"id": id,
					"vs": vs}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawCreateServicesByProjectId", "params", map[string]interface{}{
				"id": id,
				"vs": vs}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawCreateServicesByProjectId", "params", map[string]interface{}{
				"id": id,
				"vs": vs}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawCreateServicesByProjectId(ctx, id, vs)
}

// RawDeleteServicesByProjectId implements ProjectService
func (_d ProjectServiceWithLog) RawDeleteServicesByProjectId(ctx context.Context, id int, deleteIds []int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawDeleteServicesByProjectId", "params", map[string]interface{}{
					"id":        id,
					"deleteIds": deleteIds}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawDeleteServicesByProjectId", "params", map[string]interface{}{
					"id":        id,
					"deleteIds": deleteIds}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawDeleteServicesByProjectId", "params", map[string]interface{}{
				"id":        id,
				"deleteIds": deleteIds}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawDeleteServicesByProjectId", "params", map[string]interface{}{
				"id":        id,
				"deleteIds": deleteIds}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawDeleteServicesByProjectId(ctx, id, deleteIds)
}

// RawGetById implements ProjectService
func (_d ProjectServiceWithLog) RawGetById(ctx context.Context, id int) (res *ent.Project, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawGetById", "params", map[string]interface{}{
					"id": id}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawGetById", "params", map[string]interface{}{
					"id": id}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawGetById", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawGetById", "params", map[string]interface{}{
				"id": id}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawGetById(ctx, id)
}

// RawGetServicesByProjectId implements ProjectService
func (_d ProjectServiceWithLog) RawGetServicesByProjectId(ctx context.Context, id int, i interface{}) (res ent.Services, count int, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawGetServicesByProjectId", "params", map[string]interface{}{
					"id": id,
					"i":  i}, "results", map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawGetServicesByProjectId", "params", map[string]interface{}{
					"id": id,
					"i":  i}, "results", map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawGetServicesByProjectId", "params", map[string]interface{}{
				"id": id,
				"i":  i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawGetServicesByProjectId", "params", map[string]interface{}{
				"id": id,
				"i":  i}, "results", map[string]interface{}{
				"res":   res,
				"count": count,
				"err":   fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawGetServicesByProjectId(ctx, id, i)
}

// RawRemoveBindServicesByProjectId implements ProjectService
func (_d ProjectServiceWithLog) RawRemoveBindServicesByProjectId(ctx context.Context, id int, removeIds []int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawRemoveBindServicesByProjectId", "params", map[string]interface{}{
					"id":        id,
					"removeIds": removeIds}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawRemoveBindServicesByProjectId", "params", map[string]interface{}{
					"id":        id,
					"removeIds": removeIds}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawRemoveBindServicesByProjectId", "params", map[string]interface{}{
				"id":        id,
				"removeIds": removeIds}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawRemoveBindServicesByProjectId", "params", map[string]interface{}{
				"id":        id,
				"removeIds": removeIds}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawRemoveBindServicesByProjectId(ctx, id, removeIds)
}

// RawUpdateBindServicesByProjectId implements ProjectService
func (_d ProjectServiceWithLog) RawUpdateBindServicesByProjectId(ctx context.Context, id int, removeIds []int, addIds []int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawUpdateBindServicesByProjectId", "params", map[string]interface{}{
					"id":        id,
					"removeIds": removeIds,
					"addIds":    addIds}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawUpdateBindServicesByProjectId", "params", map[string]interface{}{
					"id":        id,
					"removeIds": removeIds,
					"addIds":    addIds}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawUpdateBindServicesByProjectId", "params", map[string]interface{}{
				"id":        id,
				"removeIds": removeIds,
				"addIds":    addIds}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawUpdateBindServicesByProjectId", "params", map[string]interface{}{
				"id":        id,
				"removeIds": removeIds,
				"addIds":    addIds}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawUpdateBindServicesByProjectId(ctx, id, removeIds, addIds)
}

// RawUpdateById implements ProjectService
func (_d ProjectServiceWithLog) RawUpdateById(ctx context.Context, id int, v *ent.Project) (pp1 *ent.Project, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawUpdateById", "params", map[string]interface{}{
					"id": id,
					"v":  v}, "results", map[string]interface{}{
					"pp1": pp1,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawUpdateById", "params", map[string]interface{}{
					"id": id,
					"v":  v}, "results", map[string]interface{}{
					"pp1": pp1,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawUpdateById", "params", map[string]interface{}{
				"id": id,
				"v":  v}, "results", map[string]interface{}{
				"pp1": pp1,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawUpdateById", "params", map[string]interface{}{
				"id": id,
				"v":  v}, "results", map[string]interface{}{
				"pp1": pp1,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawUpdateById(ctx, id, v)
}

// RawUpdateMany implements ProjectService
func (_d ProjectServiceWithLog) RawUpdateMany(ctx context.Context, vs ent.Projects) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RawUpdateMany", "params", map[string]interface{}{
					"vs": vs}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RawUpdateMany", "params", map[string]interface{}{
					"vs": vs}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RawUpdateMany", "params", map[string]interface{}{
				"vs": vs}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RawUpdateMany", "params", map[string]interface{}{
				"vs": vs}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RawUpdateMany(ctx, vs)
}

// UpdateById implements ProjectService
func (_d ProjectServiceWithLog) UpdateById(ctx context.Context, id int, v ent.ProjectBaseUpdateReq) (pp1 *ent.Project, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling UpdateById", "params", map[string]interface{}{
					"id": id,
					"v":  v}, "results", map[string]interface{}{
					"pp1": pp1,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling UpdateById", "params", map[string]interface{}{
					"id": id,
					"v":  v}, "results", map[string]interface{}{
					"pp1": pp1,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling UpdateById", "params", map[string]interface{}{
				"id": id,
				"v":  v}, "results", map[string]interface{}{
				"pp1": pp1,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling UpdateById", "params", map[string]interface{}{
				"id": id,
				"v":  v}, "results", map[string]interface{}{
				"pp1": pp1,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.UpdateById(ctx, id, v)
}

// UpdateMany implements ProjectService
func (_d ProjectServiceWithLog) UpdateMany(ctx context.Context, vs []ent.ProjectBaseUpdateReq) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling UpdateMany", "params", map[string]interface{}{
					"vs": vs}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling UpdateMany", "params", map[string]interface{}{
					"vs": vs}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling UpdateMany", "params", map[string]interface{}{
				"vs": vs}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling UpdateMany", "params", map[string]interface{}{
				"vs": vs}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.UpdateMany(ctx, vs)
}
