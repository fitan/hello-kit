package project

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"hello/pkg/ent"
	"time"

	"context"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// ProjectServiceWithPrometheus implements ProjectService interface with all methods wrapped
// with Prometheus metrics
type ProjectServiceWithPrometheus struct {
	base         ProjectService
	instanceName string
}

var projectserviceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "projectservice_duration_seconds",
		Help:       "projectservice runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"})

// NewProjectServiceWithPrometheus returns an instance of the ProjectService decorated with prometheus summary metric
func NewProjectServiceWithPrometheus(base ProjectService, instanceName string) ProjectServiceWithPrometheus {
	return ProjectServiceWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// ByQueries implements ProjectService
func (_d ProjectServiceWithPrometheus) ByQueries(ctx context.Context, i interface{}) (res ent.Projects, count int, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "ByQueries", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ByQueries(ctx, i)
}

// Create implements ProjectService
func (_d ProjectServiceWithPrometheus) Create(ctx context.Context, v ent.Project) (res *ent.Project, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "Create", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Create(ctx, v)
}

// DeleteById implements ProjectService
func (_d ProjectServiceWithPrometheus) DeleteById(ctx context.Context, id int) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteById(ctx, id)
}

// GetById implements ProjectService
func (_d ProjectServiceWithPrometheus) GetById(ctx context.Context, id int) (res *ent.Project, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetById(ctx, id)
}

// UpdateById implements ProjectService
func (_d ProjectServiceWithPrometheus) UpdateById(ctx context.Context, id int, v *ent.Project) (pp1 *ent.Project, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateById(ctx, id, v)
}
