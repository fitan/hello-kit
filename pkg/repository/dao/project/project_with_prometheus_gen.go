package project

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"

	"context"

	"hello/pkg/ent"
)

// ProjectServiceWithPrometheus implements ProjectService interface with all methods wrapped
// with Prometheus metrics
type ProjectServiceWithPrometheus struct {
	base         ProjectService
	instanceName string
}

var projectserviceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "dao_project_duration_seconds",
		Help:       "projectservice runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"})

// NewProjectServiceWithPrometheus returns an instance of the ProjectService decorated with prometheus summary metric
func NewProjectServiceWithPrometheus(base ProjectService) ProjectServiceWithPrometheus {
	return ProjectServiceWithPrometheus{
		base:         base,
		instanceName: "projectservice",
	}
}

// ByQueriesAll implements ProjectService
func (_d ProjectServiceWithPrometheus) ByQueriesAll(ctx context.Context, i interface{}) (res []ent.ProjectBaseGetRes, count int, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "ByQueriesAll", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ByQueriesAll(ctx, i)
}

// Create implements ProjectService
func (_d ProjectServiceWithPrometheus) Create(ctx context.Context, v ent.ProjectBaseCreateReq) (res *ent.Project, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "Create", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Create(ctx, v)
}

// CreateMany implements ProjectService
func (_d ProjectServiceWithPrometheus) CreateMany(ctx context.Context, vs []ent.ProjectBaseCreateReq) (p1 ent.Projects, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "CreateMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.CreateMany(ctx, vs)
}

// CreateServicesSliceByProjectId implements ProjectService
func (_d ProjectServiceWithPrometheus) CreateServicesSliceByProjectId(ctx context.Context, id int, vs []ent.ServiceBaseCreateReq) (res *ent.Project, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "CreateServicesSliceByProjectId", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.CreateServicesSliceByProjectId(ctx, id, vs)
}

// DeleteById implements ProjectService
func (_d ProjectServiceWithPrometheus) DeleteById(ctx context.Context, id int) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteById(ctx, id)
}

// DeleteMany implements ProjectService
func (_d ProjectServiceWithPrometheus) DeleteMany(ctx context.Context, ids []int) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteMany(ctx, ids)
}

// GetById implements ProjectService
func (_d ProjectServiceWithPrometheus) GetById(ctx context.Context, id int) (res ent.ProjectBaseGetRes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetById(ctx, id)
}

// GetOneWithServiceQsById implements ProjectService
func (_d ProjectServiceWithPrometheus) GetOneWithServiceQsById(ctx context.Context, id int, qs interface{}) (pp1 *ent.Project, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetOneWithServiceQsById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetOneWithServiceQsById(ctx, id, qs)
}

// GetServicesSliceByProjectId implements ProjectService
func (_d ProjectServiceWithPrometheus) GetServicesSliceByProjectId(ctx context.Context, id int, i interface{}) (res []ent.ServiceBaseGetRes, count int, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetServicesSliceByProjectId", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetServicesSliceByProjectId(ctx, id, i)
}

// UpdateById implements ProjectService
func (_d ProjectServiceWithPrometheus) UpdateById(ctx context.Context, id int, v ent.ProjectBaseUpdateReq) (pp1 *ent.Project, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateById(ctx, id, v)
}

// UpdateMany implements ProjectService
func (_d ProjectServiceWithPrometheus) UpdateMany(ctx context.Context, vs []ent.ProjectBaseUpdateReq) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateMany(ctx, vs)
}
