package audit

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"encoding/json"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
	semconv "go.opentelemetry.io/otel/semconv/v1.7.0"
	"go.opentelemetry.io/otel/trace"

	"hello/pkg/ent"
)

// AuditServiceWithTracing implements AuditService interface instrumented with opentracing spans
type AuditServiceWithTracing struct {
	AuditService
}

// NewAuditServiceWithTracing returns AuditServiceWithTracing
func NewAuditServiceWithTracing(base AuditService) AuditService {
	d := AuditServiceWithTracing{
		AuditService: base,
	}

	return d
}

// ByQueriesAll implements AuditService
func (_d AuditServiceWithTracing) ByQueriesAll(ctx context.Context, i interface{}) (res []ent.AuditBaseGetRes, count int, err error) {

	var name = "AuditService.ByQueriesAll"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"i": i},
				"result": map[string]interface{}{
					"res":   res,
					"count": count,
					"err":   err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.AuditService.ByQueriesAll(ctx, i)
}

// ByQueriesOne implements AuditService
func (_d AuditServiceWithTracing) ByQueriesOne(ctx context.Context, i interface{}) (res ent.AuditBaseGetRes, err error) {

	var name = "AuditService.ByQueriesOne"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"i": i},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.AuditService.ByQueriesOne(ctx, i)
}

// Create implements AuditService
func (_d AuditServiceWithTracing) Create(ctx context.Context, v ent.AuditBaseCreateReq) (res *ent.Audit, err error) {

	var name = "AuditService.Create"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"v": v},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.AuditService.Create(ctx, v)
}

// CreateMany implements AuditService
func (_d AuditServiceWithTracing) CreateMany(ctx context.Context, vs []ent.AuditBaseCreateReq) (a1 ent.Audits, err error) {

	var name = "AuditService.CreateMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"vs": vs},
				"result": map[string]interface{}{
					"a1":  a1,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.AuditService.CreateMany(ctx, vs)
}

// DeleteById implements AuditService
func (_d AuditServiceWithTracing) DeleteById(ctx context.Context, id int) (err error) {

	var name = "AuditService.DeleteById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"id": id},
				"result": map[string]interface{}{
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.AuditService.DeleteById(ctx, id)
}

// DeleteMany implements AuditService
func (_d AuditServiceWithTracing) DeleteMany(ctx context.Context, ids []int) (err error) {

	var name = "AuditService.DeleteMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"ids": ids},
				"result": map[string]interface{}{
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.AuditService.DeleteMany(ctx, ids)
}

// GetById implements AuditService
func (_d AuditServiceWithTracing) GetById(ctx context.Context, id int) (res ent.AuditBaseGetRes, err error) {

	var name = "AuditService.GetById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"id": id},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.AuditService.GetById(ctx, id)
}

// UpdateById implements AuditService
func (_d AuditServiceWithTracing) UpdateById(ctx context.Context, id int, v ent.AuditBaseUpdateReq) (ap1 *ent.Audit, err error) {

	var name = "AuditService.UpdateById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"id": id,
					"v":  v},
				"result": map[string]interface{}{
					"ap1": ap1,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.AuditService.UpdateById(ctx, id, v)
}

// UpdateMany implements AuditService
func (_d AuditServiceWithTracing) UpdateMany(ctx context.Context, vs []ent.AuditBaseUpdateReq) (err error) {

	var name = "AuditService.UpdateMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"vs": vs},
				"result": map[string]interface{}{
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.AuditService.UpdateMany(ctx, vs)
}
