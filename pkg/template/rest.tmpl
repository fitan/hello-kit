{{/* gotype: entgo.io/ent/entc/gen.Type */}}

{{  define "query/additional/form" }}
{{ $builder := $.QueryName }}
{{ $receiver := receiver $builder }}
func ({{ $receiver }} *{{ $builder }}) ByQueries(ctx context.Context, i interface{}) (res {{plural .Name}},count int, err error) {
	Set{{.Name}}FormQueries(i, {{ $receiver }})
	count,err = {{ $receiver }}.Count(ctx)
	if err != nil {
		return
	}
	res,err = {{ $receiver }}.All(ctx)
	return
}

type {{$.Name}}TableFormer interface {
	Query(q *{{$.Name}}Query)
}

type {{$.Name}}TablePagingForm struct {
	Limit *int `json:"_limit" form:"_limit"`
	Page *int `json:"_page" form:"_page"`
}
func (f {{$.Name}}TablePagingForm) Query(q *{{$.Name}}Query) {
	if f.Limit != nil && f.Page != nil {
		q.Limit(*f.Limit).Offset((*f.Page-1) * *f.Limit)
	}
}

type {{$.Name}}TableOrderForm struct {
	Order *string `json:"order" form:"_order" binding:"omitempty,oneof=acs desc"`
	SortBy *string `json:"sortBy" form:"_sortBy"`
}

func (f {{$.Name}}TableOrderForm) Query(q *{{$.Name}}Query) {
	if f.Order != nil && f.SortBy != nil {
		if *f.Order == "acs" {
			q.Order(Asc(*f.SortBy))
		}

		if *f.Order == "desc" {
			q.Order(Desc(*f.SortBy))
		}
	}
}
	
func Set{{$.Name}}FormQueries(o interface{}, q *{{$.Name}}Query) []{{$.Name}}TableFormer {
	l := make([]{{$.Name}}TableFormer,0)
	v := reflect.ValueOf(o)
	former := reflect.TypeOf((*{{$.Name}}TableFormer)(nil)).Elem()
	{{$.Name}}FormDepValue(v, former, &l)
	for _, e := range l {
		e.Query(q)
	}
	return l
}

func {{$.Name}}FormDepValue(v reflect.Value, former reflect.Type, l *[]{{$.Name}}TableFormer)  {
	for i := 0; i < v.NumField(); i++ {
		f := v.Field(i)
		if f.IsZero() {
			continue
		}
		if f.Type().Implements(former) {
			*l = append(*l, f.Interface().({{$.Name}}TableFormer))
			continue
		}
		if f.Type().Kind() == reflect.Struct {
			{{$.Name}}FormDepValue(f, former, l)
		}
	}
}

{{range $f := $.Fields}}
{{ range $op := $f.Ops }}
{{if ne $op.Niladic true}}
{{ $func := print $f.StructField $op.Name }}
type {{$.Name}}Table{{ $func }}Form struct {
    {{ $func }} *{{if $op.Variadic}}[]{{end}}{{ $f.Type }} `form:"{{ $func }}" json:"{{ $func }}"`
}
func (f {{$.Name}}Table{{ $func }}Form) Query(q *{{$.Name}}Query) {
	if f.{{ $func }} != nil {
		q.Where({{lower $.Name}}.{{ $func }}(*f.{{ $func }}{{ if $op.Variadic }}...{{end}}))
	}
}
{{end}}

{{end}}
{{end}}


{{ end }}


{{ define "client/additional/interface" }}
{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{range $n := $.Nodes}}
{{$structName := print $n.Name "Base"}}
{{$interfaceName := print $structName "Interface"}}
type {{$interfaceName}} interface {
	Create(ctx context.Context, v {{$n.Name}}) (res *{{$n.Name}},err error )
	CreateMany(ctx context.Context, vs {{plural $n.Name}}) ({{plural $n.Name}}, error)
	GetById(ctx context.Context, id {{$n.ID.Type.String}}) (res *{{$n.Name}},err error)
	ByQueries(ctx context.Context, i interface{}) (res {{plural $n.Name}}, count int,err error)
	UpdateById(ctx context.Context,id {{$n.ID.Type.String}}, v *{{$n.Name}}) (*{{$n.Name}}, error)
	UpdateMany(ctx context.Context, vs {{plural $n.Name}}) (err error)
	DeleteById(ctx context.Context, id {{$n.ID.Type.String}}) error
	DeleteMany(ctx context.Context, ids []{{$n.ID.Type.String}}) (err error)
	{{range $e := $n.Edges }}
	{{if or $e.O2O $e.M2O}}
	Create{{pascal $e.Name}}By{{$n.Name}}Id(ctx context.Context,id {{$n.ID.Type.String}},v *{{$e.Type.Name}}) (res *{{$n.Name}}, err error)
	Get{{pascal $e.Name}}By{{$n.Name}}Id(ctx context.Context,id {{$n.ID.Type.String}}) (res *{{$e.Type.Name}}, err error)
	{{end}}
    {{if or $e.O2M $e.M2M}}
	Create{{pascal (plural $e.Name)}}By{{$n.Name}}Id(ctx context.Context,id {{$n.ID.Type.String}},vs {{plural $e.Type.Name}}) (res *{{$n.Name}}, err error)
	Get{{plural (pascal $e.Name)}}By{{$n.Name}}Id(ctx context.Context,id {{$n.ID.Type.String}}, i interface{}) (res {{plural $e.Type.Name}},count int,err error)
    {{end}}
    {{end}}
}

type {{$structName}} struct {
	client *Client
}

func (c *{{$structName}}) Create(ctx context.Context, v {{$n.Name}}) (res *{{$n.Name}}, err error) {
	return c.client.{{$n.Name}}.Create().
		{{- range $f := $n.Fields}}{{ $func := print "Set" $f.StructField }}
			{{$func}}(v.{{$f.StructField}}).{{- end}}Save(ctx)
}

func (c *{{$structName}}) CreateMany(ctx context.Context, vs {{plural $n.Name}}) ({{plural $n.Name}}, error) {
	bulk := make([]*{{$n.Name}}Create, len(vs))
	for i, v := range vs {
		bulk[i] = c.client.{{$n.Name}}.Create()
			{{- range $f := $n.Fields}}.{{ $func := print "Set" $f.StructField }}
				{{$func}}(v.{{$f.StructField}}){{- end}}
	}
	return c.client.{{$n.Name}}.CreateBulk(bulk...).Save(ctx)
}

func (c *{{$structName}}) GetById(ctx context.Context, id {{$n.ID.Type.String}}) (res *{{$n.Name}}, err error) {
	return c.client.{{$n.Name}}.Get(ctx, id)
}

func (c *{{$structName}}) ByQueries(ctx context.Context, i interface{}) (res {{plural $n.Name}}, count int, err error) {
	res, count, err = c.client.{{$n.Name}}.Query().ByQueries(ctx,i)
	return
}

func (c *{{$structName}}) UpdateById(ctx context.Context, id {{$n.ID.Type.String}}, v *{{$n.Name}}) (*{{$n.Name}}, error) {
	return c.client.{{$n.Name}}.UpdateOne(v).Save(ctx)
}

func (c *{{$structName}}) UpdateMany(ctx context.Context, vs {{plural $n.Name}}) (err error) {
	tx, err := c.client.Tx(ctx)

	if err != nil {
		return err
	}

	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}

		err = tx.Commit()
	}()

	for _,v := range vs {
		_, err = tx.{{$n.Name}}.UpdateOneID(v.{{$n.ID.StructField}}).
			{{- range $f := $n.Fields}}{{ $func := print "Set" $f.StructField }}
			{{$func}}(v.{{$f.StructField}}).{{- end}}Save(ctx)
		if err != nil {
			return err
		}
	}
	return nil
}

func (c *{{$structName}}) DeleteById(ctx context.Context, id {{$n.ID.Type.String}}) error {
	return c.client.{{$n.Name}}.DeleteOneID(id).Exec(ctx)
}

func (c *{{$structName}}) DeleteMany(ctx context.Context, ids []{{$n.ID.Type.String}}) error {
	_,err := c.client.{{$n.Name}}.Delete().Where({{lower $n.Name}}.IDIn(ids...)).Exec(ctx)
	return err
}

{{range $e := $n.Edges }}
	{{if or $e.O2O $e.M2O}}
func (c *{{$structName}}) Create{{pascal $e.Name}}By{{$n.Name}}Id(ctx context.Context,id {{$n.ID.Type.String}},v *{{$e.Type.Name}}) (res *{{$n.Name}}, err error) {
	return c.client.{{$n.Name}}.UpdateOneID(id).Set{{pascal $e.Name}}(v).Save(ctx)
}
func (c *{{$structName}}) Get{{pascal $e.Name}}By{{$n.Name}}Id(ctx context.Context,id {{$n.ID.Type.String}}) (res *{{$e.Type.Name}}, err error) {
	return c.client.{{$n.Name}}.Query().Where({{lower $n.Name}}.ID(id)).Query{{pascal $e.Name}}().First(ctx)
}
	{{end}}
    {{if or $e.O2M $e.M2M}}
func (c *{{$structName}}) Create{{pascal (plural $e.Name)}}By{{$n.Name}}Id(ctx context.Context,id {{$n.ID.Type.String}},vs {{plural $e.Type.Name}}) (res *{{$n.Name}}, err error) {
	return c.client.{{$n.Name}}.UpdateOneID(id).Add{{pascal $e.Name}}(vs...).Save(ctx)
}
func (c *{{$structName}}) Get{{plural (pascal $e.Name)}}By{{$n.Name}}Id(ctx context.Context,id {{$n.ID.Type.String}}, i interface{}) (res {{plural $e.Type.Name}},count int,err error) {
	return c.client.{{$n.Name}}.Query().Where({{lower $n.Name}}.ID(id)).Query{{pascal $e.Name}}().ByQueries(ctx, i)
}
    {{end}}
{{end}}

func New{{$structName}}(client *Client) {{$structName}}Interface {
	return &{{$structName}}{client: client}
}
{{end}}
{{end}}