{{/* gotype: entgo.io/ent/entc/gen.Type */}}

{{  define "query/additional/form" }}
{{ $builder := $.QueryName }}
{{ $receiver := receiver $builder }}
func ({{ $receiver }} *{{ $builder }}) Queries(i interface{}) *{{ $builder }} {
	queryList, _ := Set{{.Name}}FormQueries(i)
	for _,v := range queryList {
		v.Query({{ $receiver }})
	}
	return {{ $receiver }}
}

func ({{ $receiver }} *{{ $builder }}) ByQueriesAll(ctx context.Context, i interface{}) (res {{plural (pascal $.Name)}},count int, err error) {
	queryList, countList := Set{{.Name}}FormQueries(i)
	countQ := {{ $receiver }}.Clone()
	for _,v := range queryList {
		v.Query({{ $receiver }})
	}
	for _, v := range countList {
		v.Query(countQ)
	}
	count,err = countQ.Count(ctx)
	if err != nil {
		return
	}
	res, err = {{ $receiver }}.All(ctx)
	return
}

type {{$.Name}}TableFormer interface {
	Query(q *{{$.Name}}Query)
	CountQuery() bool
}

type {{$.Name}}TablePagingForm struct {
	Limit *int `json:"_limit" form:"_limit" {{if and $.Annotations.rest (hasKey $.Annotations.rest "pagingLimitMax")}}{{$.Annotations.pagingLimitMax}}{{end}}`
	Page *int `json:"_page" form:"_page"`
}

func (f {{$.Name}}TablePagingForm) Query(q *{{$.Name}}Query) {
	if f.Limit != nil && f.Page != nil {
		q.Limit(*f.Limit).Offset((*f.Page-1) * *f.Limit)
	}
}

func (f {{$.Name}}TablePagingForm) CountQuery() bool {
	return false
}

type {{$.Name}}TableOrderForm struct {
	Order *string `json:"order" form:"_order" binding:"omitempty,oneof=acs desc"`
	SortBy *string `json:"sortBy" form:"_sortBy"`
}

func (f {{$.Name}}TableOrderForm) Query(q *{{$.Name}}Query) {
	if f.Order != nil && f.SortBy != nil {
		if *f.Order == "acs" {
			q.Order(Asc(*f.SortBy))
		}

		if *f.Order == "desc" {
			q.Order(Desc(*f.SortBy))
		}
	}
}
func (f {{$.Name}}TableOrderForm) CountQuery() bool {
	return false
}

func Set{{$.Name}}FormQueries(o interface{}) ([]{{$.Name}}TableFormer,[]{{$.Name}}TableFormer) {
	queryList := make([]{{$.Name}}TableFormer,0)
	countList := make([]{{$.Name}}TableFormer,0)
	v := reflect.ValueOf(o)
	former := reflect.TypeOf((*{{$.Name}}TableFormer)(nil)).Elem()
	{{$.Name}}FormDepValue(v, former, &queryList, &countList)
	return queryList, countList
}

func {{$.Name}}FormDepValue(v reflect.Value, former reflect.Type, queryList *[]{{$.Name}}TableFormer, countList *[]{{$.Name}}TableFormer)  {
	for i := 0; i < v.NumField(); i++ {
		f := v.Field(i)
		if f.IsZero() {
			continue
		}
		if f.Type().Implements(former) {
			former := f.Interface().({{$.Name}}TableFormer)
			*queryList = append(*queryList, former)
			if former.CountQuery() {
				*countList = append(*countList, former)
			}
			continue
		}
		if f.Type().Kind() == reflect.Struct {
			{{$.Name}}FormDepValue(f, former, queryList, countList)
		}
	}
}

type {{$.Name}}QueryOps struct {
{{if $.Annotations.rest}}
	*{{$.Name}}TablePagingForm {{if hasKey $.Annotations.rest "pagingMust"}}`binding:"required"`{{end}}
    {{$.Name}}TableOrderForm
{{end}}
{{range $f := $.Fields}}
{{if $f.Annotations.rest}}
{{range $op := $f.Ops}}
{{if (hasKey $f.Annotations.rest.queryOps $op.Name)}}
{{ $func := print $f.StructField $op.Name }}
	{{$.Name}}Table{{ $func }}Form
{{end}}
{{end}}
{{end}}
{{end}}
}

{{range $f := $.Fields}}
{{ range $op := $f.Ops }}
{{if ne $op.Niladic true}}
{{ $func := print $f.StructField $op.Name }}
type {{$.Name}}Table{{ $func }}Form struct {
    {{ $func }} *{{if $op.Variadic}}[]{{end}}{{ $f.Type }} `form:"{{ $func }}" json:"{{ $func }}"`
}
func (f {{$.Name}}Table{{ $func }}Form) Query(q *{{$.Name}}Query) {
	if f.{{ $func }} != nil {
		q.Where({{lower $.Name}}.{{ $func }}(*f.{{ $func }}{{ if $op.Variadic }}...{{end}}))
	}
}
func (f {{$.Name}}Table{{ $func }}Form) CountQuery() bool {
	return true
}
{{end}}
{{end}}
{{end}}


{{ end }}


{{ define "client/additional/interface" }}
{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{range $n := $.Nodes}}
{{$structName := print $n.Name "Base"}}
{{$interfaceName := print $structName "Interface"}}
type {{$interfaceName}} interface {
	Create(ctx context.Context, v {{$structName}}CreateReq) (res *{{$n.Name}},err error )
	CreateMany(ctx context.Context, vs []{{$structName}}CreateReq) ({{plural $n.Name}}, error)
	GetById(ctx context.Context, id {{$n.ID.Type.String}}) (res {{$structName}}GetRes,err error)
	ByQueriesAll(ctx context.Context, i interface{}) (res []{{$structName}}GetRes, count int,err error)
	ByQueriesOne(ctx context.Context, i interface{}) (res {{$structName}}GetRes, err error)
	UpdateById(ctx context.Context,id {{$n.ID.Type.String}}, v {{$structName}}UpdateReq) (*{{$n.Name}}, error)
	UpdateMany(ctx context.Context, vs []{{$structName}}UpdateReq) (err error)
	DeleteById(ctx context.Context, id {{$n.ID.Type.String}}) error
	DeleteMany(ctx context.Context, ids []{{$n.ID.Type.String}}) (err error)
	{{range $e := $n.Edges }}
    {{$edgeNamePre := print $e.Type.Name "Base"}}
    {{if or $e.O2O $e.M2O}}
	Create{{pascal $e.Type.Name}}By{{$n.Name}}Id(ctx context.Context,id {{$n.ID.Type.String}},v {{$edgeNamePre}}CreateReq) (res *{{$n.Name}}, err error)
	Get{{pascal $e.Type.Name}}By{{$n.Name}}Id(ctx context.Context,id {{$n.ID.Type.String}}) (res {{$edgeNamePre}}GetRes, err error)
	{{end}}
    {{if or $e.O2M $e.M2M}}
	Create{{pascal (plural $e.Type.Name)}}By{{$n.Name}}Id(ctx context.Context,id {{$n.ID.Type.String}},vs []{{$edgeNamePre}}CreateReq) (res *{{$n.Name}}, err error)
	Get{{plural (pascal $e.Type.Name)}}By{{$n.Name}}Id(ctx context.Context,id {{$n.ID.Type.String}}, i interface{}) (res []{{$edgeNamePre}}GetRes,count int,err error)
    {{end}}
    {{end}}
}

type {{$structName}} struct {
	client *Client
}
type {{$structName}}CreateReq struct {
	{{range $f := $n.Fields}}{{if hasKey $f.Annotations.rest "create"}}
	{{pascal $f.Name}} {{$f.Type}} `{{$f.StructTag}}"`
	{{end}}{{end}}
}

func {{$structName}}CreateSet(create *{{$n.Name}}Create, v {{$structName}}CreateReq) *{{$n.Name}}Create {
	return create
		{{- range $f := $n.Fields}}{{if hasKey $f.Annotations.rest "create"}}.{{ $func := print "Set" $f.StructField }}
			{{$func}}(v.{{$f.StructField}}){{end}}{{- end}}
}

func (c *{{$structName}}) Create(ctx context.Context, v {{$structName}}CreateReq) (res *{{$n.Name}}, err error) {
	create := c.client.{{$n.Name}}.Create()
	{{$structName}}CreateSet(create, v)
	return create.Save(ctx)
}

func (c *{{$structName}}) CreateMany(ctx context.Context, vs []{{$structName}}CreateReq) ({{plural $n.Name}}, error) {
	bulk := make([]*{{$n.Name}}Create, len(vs))
	for i, v := range vs {
		create := c.client.{{$n.Name}}.Create()
		{{$structName}}CreateSet(create, v)
		bulk[i] = create
	}
	return c.client.{{$n.Name}}.CreateBulk(bulk...).Save(ctx)
}
type {{$structName}}GetRes struct {
	{{pascal $n.ID.Name}} {{$n.ID.Type.String}} `{{$n.ID.StructTag}}`
{{range $f := $n.Fields}}{{if hasKey $f.Annotations.rest "read"}}
	{{pascal $f.Name}} {{$f.Type.String}} `{{$f.StructTag}}`
{{end}}{{end}}
}

func (c *{{$structName}}) GetById(ctx context.Context, id {{$n.ID.Type.String}}) (res {{$structName}}GetRes, err error) {
	query := c.client.{{$n.Name}}.Query()
	query = query.Where({{lower $n.Name}}.IDEQ(id))

	v, err := query.First(ctx)
	if err != nil {
		return
	}

	res.{{pascal $n.ID.Name}} = v.{{pascal $n.ID.Name}}
	{{range $f := $n.Fields}}{{if hasKey $f.Annotations.rest "read"}}
	res.{{pascal $f.Name}} = v.{{pascal $f.Name}}
	{{end}}{{end}}

	return
}

func (c *{{$structName}}) ByQueriesOne(ctx context.Context, i interface{}) (res {{$structName}}GetRes, err error) {
	v, err := c.client.{{$n.Name}}.Query().Queries(i).First(ctx)
	if err != nil {
		return
	}
	res.{{pascal $n.ID.Name}} = v.{{pascal $n.ID.Name}}
	{{range $f := $n.Fields}}{{if hasKey $f.Annotations.rest "read"}}
	res.{{pascal $f.Name}} = v.{{pascal $f.Name}}
	{{end}}{{end}}
	return
}

func (c *{{$structName}}) ByQueriesAll(ctx context.Context, i interface{}) (res []{{$structName}}GetRes, count int, err error) {
	vs, count, err := c.client.{{$n.Name}}.Query().ByQueriesAll(ctx,i)
    for _,v := range vs {
		res = append(res, {{$structName}}GetRes{
			{{pascal $n.ID.Name}}: v.{{pascal $n.ID.Name}},
			{{range $f := $n.Fields}}{{if hasKey $f.Annotations.rest "read"}}
			{{pascal $f.Name}}: v.{{pascal $f.Name}},
			{{end}}{{end}}
		})
	}
	return
}

type {{$structName}}UpdateReq struct {
	{{pascal $n.ID.Name}} {{$n.ID.Type.String}} `{{$n.ID.StructTag}}`
{{range $f := $n.Fields}}{{if hasKey $f.Annotations.rest "update"}}
    {{pascal $f.Name}} {{$f.Type.String}} `{{$f.StructTag}}`
{{end}}{{end}}
}

func {{$structName}}UpdateSet(update *{{$n.Name}}UpdateOne, v {{$structName}}UpdateReq) *{{$n.Name}}UpdateOne  {
	return update
		{{- range $f := $n.Fields}}{{if hasKey $f.Annotations.rest "update"}}.{{ $func := print "Set" $f.StructField }}
			{{$func}}(v.{{$f.StructField}}){{end}}{{- end}}
}


func (c *{{$structName}}) UpdateById(ctx context.Context, id {{$n.ID.Type.String}}, v {{$structName}}UpdateReq) (*{{$n.Name}}, error) {
	update := c.client.{{$n.Name}}.UpdateOneID(id)
	{{$structName}}UpdateSet(update, v)
	return update.Save(ctx)
}

func (c *{{$structName}}) UpdateMany(ctx context.Context, vs []{{$structName}}UpdateReq) (err error) {
	tx, err := c.client.Tx(ctx)

	if err != nil {
		return err
	}

	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}

		err = tx.Commit()
	}()

	for _,v := range vs {
		update := tx.{{$n.Name}}.UpdateOneID(v.ID)
		{{$structName}}UpdateSet(update, v)
		_, err = update.Save(ctx)
		if err != nil {
			return err
		}
	}
	return nil
}

func (c *{{$structName}}) DeleteById(ctx context.Context, id {{$n.ID.Type.String}}) error {
	return c.client.{{$n.Name}}.DeleteOneID(id).Exec(ctx)
}

func (c *{{$structName}}) DeleteMany(ctx context.Context, ids []{{$n.ID.Type.String}}) error {
	_,err := c.client.{{$n.Name}}.Delete().Where({{lower $n.Name}}.IDIn(ids...)).Exec(ctx)
	return err
}

{{range $e := $n.Edges }}
{{$edgeNamePre := print $e.Type.Name "Base"}}
    {{if or $e.O2O $e.M2O}}
func (c *{{$structName}}) Create{{pascal $e.Type.Name}}By{{$n.Name}}Id(ctx context.Context,id {{$n.ID.Type.String}},v {{$edgeNamePre}}CreateReq) (res *{{$n.Name}}, err error) {
	tx , err := c.client.Tx(ctx)
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}
		err =tx.Commit()
	}()

	create := tx.{{$e.Type.Name}}.Create()
	{{$edgeNamePre}}CreateSet(create, v)
	save, err := create.Save(ctx)
	if err != nil {
		return
	}

	return tx.{{$n.Name}}.UpdateOneID(id).Set{{pascal $e.Name}}(save).Save(ctx)
}

func (c *{{$structName}}) Get{{pascal $e.Type.Name}}By{{$n.Name}}Id(ctx context.Context,id {{$n.ID.Type.String}}) (res {{$edgeNamePre}}GetRes, err error) {
	v, err := c.client.{{$n.Name}}.Query().Where({{lower $n.Name}}.ID(id)).Query{{pascal $e.Name}}().First(ctx)
    if err != nil {
		return
	}
	res.{{pascal $e.Type.ID.Name}} = v.{{pascal $e.Type.ID.Name}}
{{range $f := $e.Type.Fields}}{{if hasKey $f.Annotations.rest "read"}}
	res.{{pascal $f.Name}} = v.{{pascal $f.Name}}
{{end}}{{end}}
	return
}
	{{end}}
    {{if or $e.O2M $e.M2M}}
func (c *{{$structName}}) Create{{pascal (plural $e.Type.Name)}}By{{$n.Name}}Id(ctx context.Context,id {{$n.ID.Type.String}},vs []{{$edgeNamePre}}CreateReq) (res *{{$n.Name}}, err error) {
	tx , err := c.client.Tx(ctx)
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}
		err =tx.Commit()
	}()

	bulk := make([]*{{$e.Type.Name}}Create, len(vs))
	for i, v := range vs {
		create := c.client.{{$e.Type.Name}}.Create()
		{{$edgeNamePre}}CreateSet(create, v)
		bulk[i] = create
	}
	save, err := tx.{{$e.Type.Name}}.CreateBulk(bulk...).Save(ctx)
	if err != nil {
		return
	}

	return tx.{{$n.Name}}.UpdateOneID(id).Add{{pascal $e.Name}}(save...).Save(ctx)
}
func (c *{{$structName}}) Get{{plural (pascal $e.Type.Name)}}By{{$n.Name}}Id(ctx context.Context,id {{$n.ID.Type.String}}, i interface{}) (res []{{$edgeNamePre}}GetRes,count int,err error) {
	vs, count, err := c.client.{{$n.Name}}.Query().Where({{lower $n.Name}}.ID(id)).Query{{pascal $e.Name}}().ByQueriesAll(ctx, i)
	for _,v := range vs {
		res = append(res, {{$edgeNamePre}}GetRes{
{{pascal $e.Type.ID.Name}}: v.{{pascal $e.Type.ID.Name}},
{{range $f := $e.Type.Fields}}{{if hasKey $f.Annotations.rest "read"}}
	{{pascal $f.Name}}:  v.{{pascal $f.Name}},
{{end}}{{end}}
		})
	}
	return
}
    {{end}}
{{end}}

func New{{$structName}}(client *Client) {{$structName}}Interface {
	return &{{$structName}}{client: client}
}
{{end}}
{{end}}

{{ define "client/additional/rest" }}
{{/* gotype: entgo.io/ent/entc/gen.Graph */}}
type RestInterface interface {
{{range $n := $.Nodes}}
	{{$n.Name}}RestInterface
{{end}}
}

type rest struct {
{{range $n := $.Nodes}}
    {{$n.Name}}RestInterface
{{end}}
}

func NewRest(db *Client) *rest {
	return &rest {
		{{range $n := $.Nodes}}
        {{$n.Name}}RestInterface: New{{$n.Name}}Rest(db),
		{{end}}
	}
}

{{range $n := $.Nodes}}
{{$structName := print $n.Name "Rest"}}
{{$interfaceName := print $structName "Interface"}}
{{$nodeHttpName := lower (plural $n.Name)}}
{{$baseNamePre := print $n.Name "Base"}}
type {{$interfaceName}} interface {
	// @http-gin /{{lower $n.Name}} POST
	{{- $funcName := print $structName "Create"}} {{$req := print $funcName "Req" }} {{$res := print $funcName "Res" }}
	{{$funcName}}(ctx context.Context, req {{$req}}) (res *{{$n.Name}},err error )
	// @http-gin /{{$nodeHttpName}} POST
	{{- $funcName = print $structName "CreateMany"}} {{$req = print $funcName "Req" }} {{$res = print $funcName "Res" }}
	{{$funcName}}(ctx context.Context, req {{$req}}) (res {{plural $n.Name}},err error)
	// @http-gin /{{$nodeHttpName}}/:{{lower $n.Name}}Id GET
	{{- $funcName = print $structName "GetById"}} {{$req = print $funcName "Req" }} {{$res = print $funcName "Res" }}
	{{$funcName}}(ctx context.Context, req {{$req}}) (res {{$baseNamePre}}GetRes,err error)
	// @http-gin /{{$nodeHttpName}} GET
	{{- $funcName = print $structName "ByQueriesAll"}} {{$req = print $funcName "Req" }} {{$res = print $funcName "Res" }}
	{{$funcName}}(ctx context.Context, req {{$req}}) (res {{$res}},err error)
	// @http-gin /{{$nodeHttpName}}/:{{lower $n.Name}}Id PUT
	{{- $funcName = print $structName "UpdateById"}} {{$req = print $funcName "Req" }} {{$res = print $funcName "Res" }}
	{{$funcName}}(ctx context.Context,req {{$req}}) (res *{{$n.Name}},err error)
	// @http-gin /{{$nodeHttpName}} PUT
	{{- $funcName = print $structName "UpdateMany"}} {{$req = print $funcName "Req" }} {{$res = print $funcName "Res" }}
	{{$funcName}}(ctx context.Context, req {{$req}}) (success bool,err error)
	// @http-gin /{{$nodeHttpName}}/:{{lower $n.Name}}Id DELETE
	{{- $funcName = print $structName "DeleteById"}} {{$req = print $funcName "Req" }} {{$res = print $funcName "Res" }}
	{{$funcName}}(ctx context.Context, req {{$req}}) (success bool,err error)
	// @http-gin /{{$nodeHttpName}} DELETE
	{{- $funcName = print $structName "DeleteMany"}} {{$req = print $funcName "Req" }} {{$res = print $funcName "Res" }}
	{{$funcName}}(ctx context.Context, req {{$req}}) (success bool,err error)
	{{range $e := $n.Edges }}
	{{$edgeHttpName := lower (pascal $e.Type.Name)}}
    {{$edgeBasePre := print $e.Type.Name "Base"}}
    {{if or $e.O2O $e.M2O}}
		// @http-gin /{{$nodeHttpName}}/:{{lower $n.Name}}Id/{{lower $e.Name}} POST
        {{- $funcName = print $structName "Create" (pascal $e.Type.Name) "By" $n.Name "Id"}} {{$req = print $funcName "Req" }} {{$res = print $funcName "Res" }}
		{{$funcName}}(ctx context.Context,req {{$req}}) (res *{{$n.Name}}, err error)
		// @http-gin /{{$nodeHttpName}}/:{{lower $n.Name}}Id/{{lower $e.Name}} GET
        {{- $funcName = print $structName "Get" (pascal $e.Type.Name) "By" $n.Name "Id"}} {{$req = print $funcName "Req" }} {{$res = print $funcName "Res" }}
		{{$funcName}}(ctx context.Context,req {{$req}}) (res {{$edgeBasePre}}GetRes, err error)
	{{end}}
    {{if or $e.O2M $e.M2M}}
	    // @http-gin /{{$nodeHttpName}}/:{{lower $n.Name}}Id/{{plural $edgeHttpName}} POST
        {{- $funcName = print $structName "Create" (pascal (plural $e.Type.Name)) "By" $n.Name "Id"}} {{$req = print $funcName "Req" }}  {{$res = print $funcName "Res" }}
	    {{$funcName}}(ctx context.Context,req {{$req}}) (res *{{$n.Name}}, err error)
	    // @http-gin /{{$nodeHttpName}}/:{{lower $n.Name}}Id/{{plural $edgeHttpName}} GET
        {{- $funcName = print $structName "Get" (plural (pascal $e.Type.Name)) "By" $n.Name "Id"}} {{$req = print $funcName "Req" }} {{$res = print $funcName "Res" }}
	    {{$funcName}}(ctx context.Context,req {{$req}}) (res {{$res}},err error)
    {{end}}
	{{end}}
}
func New{{$n.Name}}Rest(client *Client) {{$n.Name}}RestInterface  {
	return &{{$n.Name}}Rest{repo: &{{$n.Name}}Base{client: client}}
}

type {{$structName}} struct {
	repo {{print $n.Name "BaseInterface"}}
}

{{$funcName = print $structName "Create"}} {{$req = print $funcName "Req" }}  {{$res = print $funcName "Res" }}
type {{$req}} struct {
	Body {{$baseNamePre}}CreateReq `json:"body"`
}

func (rest *{{$structName}}) {{$funcName}}(ctx context.Context, req {{$req}}) (res *{{$n.Name}}, err error) {
	return rest.repo.Create(ctx, req.Body)
}
{{$funcName = print $structName "CreateMany"}} {{$req = print $funcName "Req" }}  {{$res = print $funcName "Res" }}
type {{$req}} struct {
	Body []{{$baseNamePre}}CreateReq `json:"body"`
}

func (rest *{{$structName}}) {{$funcName}}(ctx context.Context, req {{$req}}) (res {{plural $n.Name}},err error) {
	return rest.repo.CreateMany(ctx, req.Body)
}

{{$funcName = print $structName "GetById"}} {{$req = print $funcName "Req" }}  {{$res = print $funcName "Res" }}
type {{$req}} struct {
	Uri struct{
		Id {{$n.ID.Type}} `json:"id" uri:"{{lower $n.Name}}Id"`
	}
}
type {{$req}} struct {
	{{pascal $n.ID.Name}} {{$n.ID.Type.String}} `{{$n.ID.StructTag}}`
{{range $f := $n.Fields}}{{if hasKey $f.Annotations.rest "read"}}
	{{pascal $f.Name}} {{$f.Type.String}} `{{$f.StructTag}}`
{{end}}{{end}}
}

func (rest *{{$structName}}) {{$funcName}}(ctx context.Context, req {{$req}}) (res {{$baseNamePre}}GetRes, err error) {
	return rest.repo.GetById(ctx, req.Uri.Id)
}
{{$funcName = print $structName "ByQueriesAll"}} {{$req = print $funcName "Req" }} {{$res = print  $funcName "Res" }}
type {{$req}} struct {
	Query {{$n.Name}}QueryOps `json:"query"`
}

type {{$res}} struct {
	List []{{$baseNamePre}}GetRes `json:"items"`
	Total int `json:"total"`
}


func (rest *{{$structName}}) {{$funcName}}(ctx context.Context, req {{$req}}) (res {{$res}}, err error) {
	list, total,err := rest.repo.ByQueriesAll(ctx, req.Query)
	return {{$res}}{List:list, Total:total},err
}
{{$funcName = print $structName "UpdateById"}} {{$req = print  $funcName "Req" }}  {{$res = print $funcName "Res" }}
type {{$req}} struct {
	Uri struct{
		Id {{$n.ID.Type}} `json:"id" uri:"{{lower $n.Name}}Id"`
	} `json:"uri"`
	Body {{$baseNamePre}}UpdateReq `json:"body"`
}

func (rest *{{$structName}}) {{$funcName}}(ctx context.Context, req {{$req}}) (res *{{$n.Name}},err error) {
	return rest.repo.UpdateById(ctx, req.Uri.Id, req.Body)
}
{{$funcName = print $structName "UpdateMany"}} {{$req = print $funcName "Req" }}  {{$res = print $funcName "Res" }}
type {{$req}} struct {
	Body []{{$baseNamePre}}UpdateReq `json:"body"`
}

func (rest *{{$structName}}) {{$funcName}}(ctx context.Context, req {{$req}}) (success bool,err error) {
	err = rest.repo.UpdateMany(ctx, req.Body)
	if err != nil {
		return false, err
	}
	return true, err
}
{{$funcName = print $structName "DeleteById"}} {{$req = print $funcName "Req" }}  {{$res = print $funcName "Res" }}
type {{$req}} struct {
	Uri struct{
		Id {{$n.ID.Type}} `json:"id" uri:"{{lower $n.Name}}Id"`
	} `json:"uri"`
}

func (rest *{{$structName}}) {{$funcName}}(ctx context.Context, req {{$req}}) (success bool,err error) {
	err = rest.repo.DeleteById(ctx, req.Uri.Id)
	if err != nil {
		return false, err
	}
	return true, err
}
{{$funcName = print $structName "DeleteMany"}} {{$req = print $funcName "Req" }}  {{$res = print $funcName "Res" }}
type {{$req}} struct {
	Query struct{
		Ids []{{$n.ID.Type}} `json:"ids" form:"ids"`
	} `json:"query"`
}

func (rest *{{$structName}}) {{$funcName}}(ctx context.Context, req {{$req}}) (success bool,err error) {
	err = rest.repo.DeleteMany(ctx, req.Query.Ids)
	if err != nil {
		return false, err
	}
	return true, err
}
{{range $e := $n.Edges }}
    {{$edgeHttpName := lower (plural $e.Name)}}
    {{$edgeBasePre := print $e.Type.Name "Base"}}
    {{if or $e.O2O $e.M2O}}
    {{$baseName := print "Create" (pascal $e.Type.Name) "By" $n.Name "Id"}} {{$funcName = print $structName $baseName}} {{$req = print $funcName "Req" }}  {{$res = print $funcName "Res" }}
type {{$req}} struct {
	Uri struct{
		Id {{$n.ID.Type}} `json:"id" uri:"{{lower $n.Name}}Id"`
	}
	Body {{$edgeBasePre}}CreateReq `json:"body"`
}

func (rest *{{$structName}}) {{$funcName}}(ctx context.Context, req {{$req}}) (res *{{$n.Name}}, err error) {
	return rest.repo.{{$baseName}}(ctx, req.Uri.Id, req.Body)
}
    {{$baseName = print "Get" (pascal $e.Type.Name) "By" $n.Name "Id"}} {{$funcName = print $structName $baseName}} {{$req = print $funcName "Req" }}  {{$res = print $funcName "Res" }}
type {{$req}} struct {
	Uri struct{
		Id {{$n.ID.Type}} `json:"id" uri:"{{lower $n.Name}}Id"`
	} `json:"uri"`
}

func (rest *{{$structName}}) {{$funcName}}(ctx context.Context, req {{$req}}) (res {{$edgeBasePre}}GetRes, err error) {
	return rest.repo.{{$baseName}}(ctx, req.Uri.Id)
}
    {{end}}
    {{if or $e.O2M $e.M2M}}
    {{$baseName := print "Create" (pascal (plural $e.Type.Name)) "By" $n.Name "Id"}} {{$funcName = print $structName $baseName}} {{$req = print $funcName "Req" }}  {{$res = print $funcName "Res" }}
type {{$req}} struct {
	Uri struct{
		Id {{$n.ID.Type}} `json:"id" uri:"{{lower $n.Name}}Id"`
	}
	Body []{{$edgeBasePre}}CreateReq `json:"body"`
}

func (rest *{{$structName}}) {{$funcName}}(ctx context.Context, req {{$req}}) (res *{{$n.Name}}, err error) {
	return rest.repo.{{$baseName}}(ctx, req.Uri.Id, req.Body)
}
    {{$baseName = print "Get" (plural (pascal $e.Type.Name)) "By" $n.Name "Id"}} {{$funcName = print $structName $baseName}} {{$req = print $funcName "Req" }} {{$res = print $funcName "Res" }}
type {{$req}} struct {
	Uri struct{
		Id {{$n.ID.Type}} `json:"id" uri:"{{lower $n.Name}}Id"`
	} `json:"uri"`
	Query {{$e.Type.Name}}QueryOps `json:"query"`
}

type {{$res}} struct {
	List []{{$edgeBasePre}}GetRes `json:"list"`
	Total int `json:"total"`
}

func (rest *{{$structName}}) {{$funcName}}(ctx context.Context, req {{$req}}) (res {{$res}}, err error) {
	list, total,err := rest.repo.{{$baseName}}(ctx, req.Uri.Id, req.Query)
    return {{$res}}{List:list, Total:total},err
}
    {{end}}
{{end}}




{{end}}
{{end}}


