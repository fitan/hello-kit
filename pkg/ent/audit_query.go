// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hello/pkg/ent/audit"
	"hello/pkg/ent/predicate"
	"math"
	"reflect"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuditQuery is the builder for querying Audit entities.
type AuditQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.Audit
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AuditQuery builder.
func (aq *AuditQuery) Where(ps ...predicate.Audit) *AuditQuery {
	aq.predicates = append(aq.predicates, ps...)
	return aq
}

// Limit adds a limit step to the query.
func (aq *AuditQuery) Limit(limit int) *AuditQuery {
	aq.limit = &limit
	return aq
}

// Offset adds an offset step to the query.
func (aq *AuditQuery) Offset(offset int) *AuditQuery {
	aq.offset = &offset
	return aq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aq *AuditQuery) Unique(unique bool) *AuditQuery {
	aq.unique = &unique
	return aq
}

// Order adds an order step to the query.
func (aq *AuditQuery) Order(o ...OrderFunc) *AuditQuery {
	aq.order = append(aq.order, o...)
	return aq
}

// First returns the first Audit entity from the query.
// Returns a *NotFoundError when no Audit was found.
func (aq *AuditQuery) First(ctx context.Context) (*Audit, error) {
	nodes, err := aq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{audit.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aq *AuditQuery) FirstX(ctx context.Context) *Audit {
	node, err := aq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Audit ID from the query.
// Returns a *NotFoundError when no Audit ID was found.
func (aq *AuditQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{audit.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aq *AuditQuery) FirstIDX(ctx context.Context) int {
	id, err := aq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Audit entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Audit entity is found.
// Returns a *NotFoundError when no Audit entities are found.
func (aq *AuditQuery) Only(ctx context.Context) (*Audit, error) {
	nodes, err := aq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{audit.Label}
	default:
		return nil, &NotSingularError{audit.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aq *AuditQuery) OnlyX(ctx context.Context) *Audit {
	node, err := aq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Audit ID in the query.
// Returns a *NotSingularError when more than one Audit ID is found.
// Returns a *NotFoundError when no entities are found.
func (aq *AuditQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{audit.Label}
	default:
		err = &NotSingularError{audit.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aq *AuditQuery) OnlyIDX(ctx context.Context) int {
	id, err := aq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Audits.
func (aq *AuditQuery) All(ctx context.Context) ([]*Audit, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return aq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (aq *AuditQuery) AllX(ctx context.Context) []*Audit {
	nodes, err := aq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Audit IDs.
func (aq *AuditQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := aq.Select(audit.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aq *AuditQuery) IDsX(ctx context.Context) []int {
	ids, err := aq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aq *AuditQuery) Count(ctx context.Context) (int, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return aq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (aq *AuditQuery) CountX(ctx context.Context) int {
	count, err := aq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aq *AuditQuery) Exist(ctx context.Context) (bool, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return aq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (aq *AuditQuery) ExistX(ctx context.Context) bool {
	exist, err := aq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AuditQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aq *AuditQuery) Clone() *AuditQuery {
	if aq == nil {
		return nil
	}
	return &AuditQuery{
		config:     aq.config,
		limit:      aq.limit,
		offset:     aq.offset,
		order:      append([]OrderFunc{}, aq.order...),
		predicates: append([]predicate.Audit{}, aq.predicates...),
		// clone intermediate query.
		sql:    aq.sql.Clone(),
		path:   aq.path,
		unique: aq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Audit.Query().
//		GroupBy(audit.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (aq *AuditQuery) GroupBy(field string, fields ...string) *AuditGroupBy {
	group := &AuditGroupBy{config: aq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return aq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.Audit.Query().
//		Select(audit.FieldCreateTime).
//		Scan(ctx, &v)
//
func (aq *AuditQuery) Select(fields ...string) *AuditSelect {
	aq.fields = append(aq.fields, fields...)
	return &AuditSelect{AuditQuery: aq}
}

func (aq *AuditQuery) prepareQuery(ctx context.Context) error {
	for _, f := range aq.fields {
		if !audit.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aq.path != nil {
		prev, err := aq.path(ctx)
		if err != nil {
			return err
		}
		aq.sql = prev
	}
	return nil
}

func (aq *AuditQuery) sqlAll(ctx context.Context) ([]*Audit, error) {
	var (
		nodes = []*Audit{}
		_spec = aq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Audit{config: aq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, aq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (aq *AuditQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aq.querySpec()
	_spec.Node.Columns = aq.fields
	if len(aq.fields) > 0 {
		_spec.Unique = aq.unique != nil && *aq.unique
	}
	return sqlgraph.CountNodes(ctx, aq.driver, _spec)
}

func (aq *AuditQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := aq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (aq *AuditQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   audit.Table,
			Columns: audit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: audit.FieldID,
			},
		},
		From:   aq.sql,
		Unique: true,
	}
	if unique := aq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := aq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, audit.FieldID)
		for i := range fields {
			if fields[i] != audit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aq *AuditQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aq.driver.Dialect())
	t1 := builder.Table(audit.Table)
	columns := aq.fields
	if len(columns) == 0 {
		columns = audit.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aq.sql != nil {
		selector = aq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aq.unique != nil && *aq.unique {
		selector.Distinct()
	}
	for _, p := range aq.predicates {
		p(selector)
	}
	for _, p := range aq.order {
		p(selector)
	}
	if offset := aq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

func (aq *AuditQuery) Queries(i interface{}) *AuditQuery {
	queryList, _ := SetAuditFormQueries(i)
	for _, v := range queryList {
		v.Query(aq)
	}
	return aq
}

func (aq *AuditQuery) ByQueriesAll(ctx context.Context, i interface{}) (res Audits, count int, err error) {
	queryList, countList := SetAuditFormQueries(i)
	countQ := aq.Clone()
	for _, v := range queryList {
		v.Query(aq)
	}
	for _, v := range countList {
		v.Query(countQ)
	}
	count, err = countQ.Count(ctx)
	if err != nil {
		return
	}
	res, err = aq.All(ctx)
	return
}

type AuditTableFormer interface {
	Query(q *AuditQuery)
	CountQuery() bool
}

type AuditTablePagingForm struct {
	Limit *int `json:"_limit" form:"_limit" `
	Page  *int `json:"_page" form:"_page"`
}

func (f AuditTablePagingForm) Query(q *AuditQuery) {
	if f.Limit != nil && f.Page != nil {
		q.Limit(*f.Limit).Offset((*f.Page - 1) * *f.Limit)
	}
}

func (f AuditTablePagingForm) CountQuery() bool {
	return false
}

type AuditTableOrderForm struct {
	Order  *string `json:"order" form:"_order" binding:"omitempty,oneof=acs desc"`
	SortBy *string `json:"sortBy" form:"_sortBy"`
}

func (f AuditTableOrderForm) Query(q *AuditQuery) {
	if f.Order != nil && f.SortBy != nil {
		if *f.Order == "acs" {
			q.Order(Asc(*f.SortBy))
		}

		if *f.Order == "desc" {
			q.Order(Desc(*f.SortBy))
		}
	}
}
func (f AuditTableOrderForm) CountQuery() bool {
	return false
}

func SetAuditFormQueries(o interface{}) ([]AuditTableFormer, []AuditTableFormer) {
	queryList := make([]AuditTableFormer, 0)
	countList := make([]AuditTableFormer, 0)
	v := reflect.ValueOf(o)
	former := reflect.TypeOf((*AuditTableFormer)(nil)).Elem()
	AuditFormDepValue(v, former, &queryList, &countList)
	return queryList, countList
}

func AuditFormDepValue(v reflect.Value, former reflect.Type, queryList *[]AuditTableFormer, countList *[]AuditTableFormer) {
	for i := 0; i < v.NumField(); i++ {
		f := v.Field(i)
		if f.IsZero() {
			continue
		}
		if f.Type().Implements(former) {
			former := f.Interface().(AuditTableFormer)
			*queryList = append(*queryList, former)
			if former.CountQuery() {
				*countList = append(*countList, former)
			}
			continue
		}
		if f.Type().Kind() == reflect.Struct {
			AuditFormDepValue(f, former, queryList, countList)
		}
	}
}

type AuditQueryOps struct {
	AuditTableURLContainsForm

	AuditTableQueryContainsForm

	AuditTableMethodContainsForm

	AuditTableRequestContainsForm

	AuditTableResponseContainsForm

	AuditTableHeaderContainsForm

	AuditTableStatusCodeEQForm

	AuditTableRemoteIPContainsForm

	AuditTableClientIPContainsForm

	AuditTableCostTimeContainsForm
}

type AuditTableCreateTimeEQForm struct {
	CreateTimeEQ *time.Time `form:"CreateTimeEQ" json:"CreateTimeEQ"`
}

func (f AuditTableCreateTimeEQForm) Query(q *AuditQuery) {
	if f.CreateTimeEQ != nil {
		q.Where(audit.CreateTimeEQ(*f.CreateTimeEQ))
	}
}
func (f AuditTableCreateTimeEQForm) CountQuery() bool {
	return true
}

type AuditTableCreateTimeNEQForm struct {
	CreateTimeNEQ *time.Time `form:"CreateTimeNEQ" json:"CreateTimeNEQ"`
}

func (f AuditTableCreateTimeNEQForm) Query(q *AuditQuery) {
	if f.CreateTimeNEQ != nil {
		q.Where(audit.CreateTimeNEQ(*f.CreateTimeNEQ))
	}
}
func (f AuditTableCreateTimeNEQForm) CountQuery() bool {
	return true
}

type AuditTableCreateTimeInForm struct {
	CreateTimeIn *[]time.Time `form:"CreateTimeIn" json:"CreateTimeIn"`
}

func (f AuditTableCreateTimeInForm) Query(q *AuditQuery) {
	if f.CreateTimeIn != nil {
		q.Where(audit.CreateTimeIn(*f.CreateTimeIn...))
	}
}
func (f AuditTableCreateTimeInForm) CountQuery() bool {
	return true
}

type AuditTableCreateTimeNotInForm struct {
	CreateTimeNotIn *[]time.Time `form:"CreateTimeNotIn" json:"CreateTimeNotIn"`
}

func (f AuditTableCreateTimeNotInForm) Query(q *AuditQuery) {
	if f.CreateTimeNotIn != nil {
		q.Where(audit.CreateTimeNotIn(*f.CreateTimeNotIn...))
	}
}
func (f AuditTableCreateTimeNotInForm) CountQuery() bool {
	return true
}

type AuditTableCreateTimeGTForm struct {
	CreateTimeGT *time.Time `form:"CreateTimeGT" json:"CreateTimeGT"`
}

func (f AuditTableCreateTimeGTForm) Query(q *AuditQuery) {
	if f.CreateTimeGT != nil {
		q.Where(audit.CreateTimeGT(*f.CreateTimeGT))
	}
}
func (f AuditTableCreateTimeGTForm) CountQuery() bool {
	return true
}

type AuditTableCreateTimeGTEForm struct {
	CreateTimeGTE *time.Time `form:"CreateTimeGTE" json:"CreateTimeGTE"`
}

func (f AuditTableCreateTimeGTEForm) Query(q *AuditQuery) {
	if f.CreateTimeGTE != nil {
		q.Where(audit.CreateTimeGTE(*f.CreateTimeGTE))
	}
}
func (f AuditTableCreateTimeGTEForm) CountQuery() bool {
	return true
}

type AuditTableCreateTimeLTForm struct {
	CreateTimeLT *time.Time `form:"CreateTimeLT" json:"CreateTimeLT"`
}

func (f AuditTableCreateTimeLTForm) Query(q *AuditQuery) {
	if f.CreateTimeLT != nil {
		q.Where(audit.CreateTimeLT(*f.CreateTimeLT))
	}
}
func (f AuditTableCreateTimeLTForm) CountQuery() bool {
	return true
}

type AuditTableCreateTimeLTEForm struct {
	CreateTimeLTE *time.Time `form:"CreateTimeLTE" json:"CreateTimeLTE"`
}

func (f AuditTableCreateTimeLTEForm) Query(q *AuditQuery) {
	if f.CreateTimeLTE != nil {
		q.Where(audit.CreateTimeLTE(*f.CreateTimeLTE))
	}
}
func (f AuditTableCreateTimeLTEForm) CountQuery() bool {
	return true
}

type AuditTableUpdateTimeEQForm struct {
	UpdateTimeEQ *time.Time `form:"UpdateTimeEQ" json:"UpdateTimeEQ"`
}

func (f AuditTableUpdateTimeEQForm) Query(q *AuditQuery) {
	if f.UpdateTimeEQ != nil {
		q.Where(audit.UpdateTimeEQ(*f.UpdateTimeEQ))
	}
}
func (f AuditTableUpdateTimeEQForm) CountQuery() bool {
	return true
}

type AuditTableUpdateTimeNEQForm struct {
	UpdateTimeNEQ *time.Time `form:"UpdateTimeNEQ" json:"UpdateTimeNEQ"`
}

func (f AuditTableUpdateTimeNEQForm) Query(q *AuditQuery) {
	if f.UpdateTimeNEQ != nil {
		q.Where(audit.UpdateTimeNEQ(*f.UpdateTimeNEQ))
	}
}
func (f AuditTableUpdateTimeNEQForm) CountQuery() bool {
	return true
}

type AuditTableUpdateTimeInForm struct {
	UpdateTimeIn *[]time.Time `form:"UpdateTimeIn" json:"UpdateTimeIn"`
}

func (f AuditTableUpdateTimeInForm) Query(q *AuditQuery) {
	if f.UpdateTimeIn != nil {
		q.Where(audit.UpdateTimeIn(*f.UpdateTimeIn...))
	}
}
func (f AuditTableUpdateTimeInForm) CountQuery() bool {
	return true
}

type AuditTableUpdateTimeNotInForm struct {
	UpdateTimeNotIn *[]time.Time `form:"UpdateTimeNotIn" json:"UpdateTimeNotIn"`
}

func (f AuditTableUpdateTimeNotInForm) Query(q *AuditQuery) {
	if f.UpdateTimeNotIn != nil {
		q.Where(audit.UpdateTimeNotIn(*f.UpdateTimeNotIn...))
	}
}
func (f AuditTableUpdateTimeNotInForm) CountQuery() bool {
	return true
}

type AuditTableUpdateTimeGTForm struct {
	UpdateTimeGT *time.Time `form:"UpdateTimeGT" json:"UpdateTimeGT"`
}

func (f AuditTableUpdateTimeGTForm) Query(q *AuditQuery) {
	if f.UpdateTimeGT != nil {
		q.Where(audit.UpdateTimeGT(*f.UpdateTimeGT))
	}
}
func (f AuditTableUpdateTimeGTForm) CountQuery() bool {
	return true
}

type AuditTableUpdateTimeGTEForm struct {
	UpdateTimeGTE *time.Time `form:"UpdateTimeGTE" json:"UpdateTimeGTE"`
}

func (f AuditTableUpdateTimeGTEForm) Query(q *AuditQuery) {
	if f.UpdateTimeGTE != nil {
		q.Where(audit.UpdateTimeGTE(*f.UpdateTimeGTE))
	}
}
func (f AuditTableUpdateTimeGTEForm) CountQuery() bool {
	return true
}

type AuditTableUpdateTimeLTForm struct {
	UpdateTimeLT *time.Time `form:"UpdateTimeLT" json:"UpdateTimeLT"`
}

func (f AuditTableUpdateTimeLTForm) Query(q *AuditQuery) {
	if f.UpdateTimeLT != nil {
		q.Where(audit.UpdateTimeLT(*f.UpdateTimeLT))
	}
}
func (f AuditTableUpdateTimeLTForm) CountQuery() bool {
	return true
}

type AuditTableUpdateTimeLTEForm struct {
	UpdateTimeLTE *time.Time `form:"UpdateTimeLTE" json:"UpdateTimeLTE"`
}

func (f AuditTableUpdateTimeLTEForm) Query(q *AuditQuery) {
	if f.UpdateTimeLTE != nil {
		q.Where(audit.UpdateTimeLTE(*f.UpdateTimeLTE))
	}
}
func (f AuditTableUpdateTimeLTEForm) CountQuery() bool {
	return true
}

type AuditTableURLEQForm struct {
	URLEQ *string `form:"URLEQ" json:"URLEQ"`
}

func (f AuditTableURLEQForm) Query(q *AuditQuery) {
	if f.URLEQ != nil {
		q.Where(audit.URLEQ(*f.URLEQ))
	}
}
func (f AuditTableURLEQForm) CountQuery() bool {
	return true
}

type AuditTableURLNEQForm struct {
	URLNEQ *string `form:"URLNEQ" json:"URLNEQ"`
}

func (f AuditTableURLNEQForm) Query(q *AuditQuery) {
	if f.URLNEQ != nil {
		q.Where(audit.URLNEQ(*f.URLNEQ))
	}
}
func (f AuditTableURLNEQForm) CountQuery() bool {
	return true
}

type AuditTableURLInForm struct {
	URLIn *[]string `form:"URLIn" json:"URLIn"`
}

func (f AuditTableURLInForm) Query(q *AuditQuery) {
	if f.URLIn != nil {
		q.Where(audit.URLIn(*f.URLIn...))
	}
}
func (f AuditTableURLInForm) CountQuery() bool {
	return true
}

type AuditTableURLNotInForm struct {
	URLNotIn *[]string `form:"URLNotIn" json:"URLNotIn"`
}

func (f AuditTableURLNotInForm) Query(q *AuditQuery) {
	if f.URLNotIn != nil {
		q.Where(audit.URLNotIn(*f.URLNotIn...))
	}
}
func (f AuditTableURLNotInForm) CountQuery() bool {
	return true
}

type AuditTableURLGTForm struct {
	URLGT *string `form:"URLGT" json:"URLGT"`
}

func (f AuditTableURLGTForm) Query(q *AuditQuery) {
	if f.URLGT != nil {
		q.Where(audit.URLGT(*f.URLGT))
	}
}
func (f AuditTableURLGTForm) CountQuery() bool {
	return true
}

type AuditTableURLGTEForm struct {
	URLGTE *string `form:"URLGTE" json:"URLGTE"`
}

func (f AuditTableURLGTEForm) Query(q *AuditQuery) {
	if f.URLGTE != nil {
		q.Where(audit.URLGTE(*f.URLGTE))
	}
}
func (f AuditTableURLGTEForm) CountQuery() bool {
	return true
}

type AuditTableURLLTForm struct {
	URLLT *string `form:"URLLT" json:"URLLT"`
}

func (f AuditTableURLLTForm) Query(q *AuditQuery) {
	if f.URLLT != nil {
		q.Where(audit.URLLT(*f.URLLT))
	}
}
func (f AuditTableURLLTForm) CountQuery() bool {
	return true
}

type AuditTableURLLTEForm struct {
	URLLTE *string `form:"URLLTE" json:"URLLTE"`
}

func (f AuditTableURLLTEForm) Query(q *AuditQuery) {
	if f.URLLTE != nil {
		q.Where(audit.URLLTE(*f.URLLTE))
	}
}
func (f AuditTableURLLTEForm) CountQuery() bool {
	return true
}

type AuditTableURLContainsForm struct {
	URLContains *string `form:"URLContains" json:"URLContains"`
}

func (f AuditTableURLContainsForm) Query(q *AuditQuery) {
	if f.URLContains != nil {
		q.Where(audit.URLContains(*f.URLContains))
	}
}
func (f AuditTableURLContainsForm) CountQuery() bool {
	return true
}

type AuditTableURLHasPrefixForm struct {
	URLHasPrefix *string `form:"URLHasPrefix" json:"URLHasPrefix"`
}

func (f AuditTableURLHasPrefixForm) Query(q *AuditQuery) {
	if f.URLHasPrefix != nil {
		q.Where(audit.URLHasPrefix(*f.URLHasPrefix))
	}
}
func (f AuditTableURLHasPrefixForm) CountQuery() bool {
	return true
}

type AuditTableURLHasSuffixForm struct {
	URLHasSuffix *string `form:"URLHasSuffix" json:"URLHasSuffix"`
}

func (f AuditTableURLHasSuffixForm) Query(q *AuditQuery) {
	if f.URLHasSuffix != nil {
		q.Where(audit.URLHasSuffix(*f.URLHasSuffix))
	}
}
func (f AuditTableURLHasSuffixForm) CountQuery() bool {
	return true
}

type AuditTableURLEqualFoldForm struct {
	URLEqualFold *string `form:"URLEqualFold" json:"URLEqualFold"`
}

func (f AuditTableURLEqualFoldForm) Query(q *AuditQuery) {
	if f.URLEqualFold != nil {
		q.Where(audit.URLEqualFold(*f.URLEqualFold))
	}
}
func (f AuditTableURLEqualFoldForm) CountQuery() bool {
	return true
}

type AuditTableURLContainsFoldForm struct {
	URLContainsFold *string `form:"URLContainsFold" json:"URLContainsFold"`
}

func (f AuditTableURLContainsFoldForm) Query(q *AuditQuery) {
	if f.URLContainsFold != nil {
		q.Where(audit.URLContainsFold(*f.URLContainsFold))
	}
}
func (f AuditTableURLContainsFoldForm) CountQuery() bool {
	return true
}

type AuditTableQueryEQForm struct {
	QueryEQ *string `form:"QueryEQ" json:"QueryEQ"`
}

func (f AuditTableQueryEQForm) Query(q *AuditQuery) {
	if f.QueryEQ != nil {
		q.Where(audit.QueryEQ(*f.QueryEQ))
	}
}
func (f AuditTableQueryEQForm) CountQuery() bool {
	return true
}

type AuditTableQueryNEQForm struct {
	QueryNEQ *string `form:"QueryNEQ" json:"QueryNEQ"`
}

func (f AuditTableQueryNEQForm) Query(q *AuditQuery) {
	if f.QueryNEQ != nil {
		q.Where(audit.QueryNEQ(*f.QueryNEQ))
	}
}
func (f AuditTableQueryNEQForm) CountQuery() bool {
	return true
}

type AuditTableQueryInForm struct {
	QueryIn *[]string `form:"QueryIn" json:"QueryIn"`
}

func (f AuditTableQueryInForm) Query(q *AuditQuery) {
	if f.QueryIn != nil {
		q.Where(audit.QueryIn(*f.QueryIn...))
	}
}
func (f AuditTableQueryInForm) CountQuery() bool {
	return true
}

type AuditTableQueryNotInForm struct {
	QueryNotIn *[]string `form:"QueryNotIn" json:"QueryNotIn"`
}

func (f AuditTableQueryNotInForm) Query(q *AuditQuery) {
	if f.QueryNotIn != nil {
		q.Where(audit.QueryNotIn(*f.QueryNotIn...))
	}
}
func (f AuditTableQueryNotInForm) CountQuery() bool {
	return true
}

type AuditTableQueryGTForm struct {
	QueryGT *string `form:"QueryGT" json:"QueryGT"`
}

func (f AuditTableQueryGTForm) Query(q *AuditQuery) {
	if f.QueryGT != nil {
		q.Where(audit.QueryGT(*f.QueryGT))
	}
}
func (f AuditTableQueryGTForm) CountQuery() bool {
	return true
}

type AuditTableQueryGTEForm struct {
	QueryGTE *string `form:"QueryGTE" json:"QueryGTE"`
}

func (f AuditTableQueryGTEForm) Query(q *AuditQuery) {
	if f.QueryGTE != nil {
		q.Where(audit.QueryGTE(*f.QueryGTE))
	}
}
func (f AuditTableQueryGTEForm) CountQuery() bool {
	return true
}

type AuditTableQueryLTForm struct {
	QueryLT *string `form:"QueryLT" json:"QueryLT"`
}

func (f AuditTableQueryLTForm) Query(q *AuditQuery) {
	if f.QueryLT != nil {
		q.Where(audit.QueryLT(*f.QueryLT))
	}
}
func (f AuditTableQueryLTForm) CountQuery() bool {
	return true
}

type AuditTableQueryLTEForm struct {
	QueryLTE *string `form:"QueryLTE" json:"QueryLTE"`
}

func (f AuditTableQueryLTEForm) Query(q *AuditQuery) {
	if f.QueryLTE != nil {
		q.Where(audit.QueryLTE(*f.QueryLTE))
	}
}
func (f AuditTableQueryLTEForm) CountQuery() bool {
	return true
}

type AuditTableQueryContainsForm struct {
	QueryContains *string `form:"QueryContains" json:"QueryContains"`
}

func (f AuditTableQueryContainsForm) Query(q *AuditQuery) {
	if f.QueryContains != nil {
		q.Where(audit.QueryContains(*f.QueryContains))
	}
}
func (f AuditTableQueryContainsForm) CountQuery() bool {
	return true
}

type AuditTableQueryHasPrefixForm struct {
	QueryHasPrefix *string `form:"QueryHasPrefix" json:"QueryHasPrefix"`
}

func (f AuditTableQueryHasPrefixForm) Query(q *AuditQuery) {
	if f.QueryHasPrefix != nil {
		q.Where(audit.QueryHasPrefix(*f.QueryHasPrefix))
	}
}
func (f AuditTableQueryHasPrefixForm) CountQuery() bool {
	return true
}

type AuditTableQueryHasSuffixForm struct {
	QueryHasSuffix *string `form:"QueryHasSuffix" json:"QueryHasSuffix"`
}

func (f AuditTableQueryHasSuffixForm) Query(q *AuditQuery) {
	if f.QueryHasSuffix != nil {
		q.Where(audit.QueryHasSuffix(*f.QueryHasSuffix))
	}
}
func (f AuditTableQueryHasSuffixForm) CountQuery() bool {
	return true
}

type AuditTableQueryEqualFoldForm struct {
	QueryEqualFold *string `form:"QueryEqualFold" json:"QueryEqualFold"`
}

func (f AuditTableQueryEqualFoldForm) Query(q *AuditQuery) {
	if f.QueryEqualFold != nil {
		q.Where(audit.QueryEqualFold(*f.QueryEqualFold))
	}
}
func (f AuditTableQueryEqualFoldForm) CountQuery() bool {
	return true
}

type AuditTableQueryContainsFoldForm struct {
	QueryContainsFold *string `form:"QueryContainsFold" json:"QueryContainsFold"`
}

func (f AuditTableQueryContainsFoldForm) Query(q *AuditQuery) {
	if f.QueryContainsFold != nil {
		q.Where(audit.QueryContainsFold(*f.QueryContainsFold))
	}
}
func (f AuditTableQueryContainsFoldForm) CountQuery() bool {
	return true
}

type AuditTableMethodEQForm struct {
	MethodEQ *string `form:"MethodEQ" json:"MethodEQ"`
}

func (f AuditTableMethodEQForm) Query(q *AuditQuery) {
	if f.MethodEQ != nil {
		q.Where(audit.MethodEQ(*f.MethodEQ))
	}
}
func (f AuditTableMethodEQForm) CountQuery() bool {
	return true
}

type AuditTableMethodNEQForm struct {
	MethodNEQ *string `form:"MethodNEQ" json:"MethodNEQ"`
}

func (f AuditTableMethodNEQForm) Query(q *AuditQuery) {
	if f.MethodNEQ != nil {
		q.Where(audit.MethodNEQ(*f.MethodNEQ))
	}
}
func (f AuditTableMethodNEQForm) CountQuery() bool {
	return true
}

type AuditTableMethodInForm struct {
	MethodIn *[]string `form:"MethodIn" json:"MethodIn"`
}

func (f AuditTableMethodInForm) Query(q *AuditQuery) {
	if f.MethodIn != nil {
		q.Where(audit.MethodIn(*f.MethodIn...))
	}
}
func (f AuditTableMethodInForm) CountQuery() bool {
	return true
}

type AuditTableMethodNotInForm struct {
	MethodNotIn *[]string `form:"MethodNotIn" json:"MethodNotIn"`
}

func (f AuditTableMethodNotInForm) Query(q *AuditQuery) {
	if f.MethodNotIn != nil {
		q.Where(audit.MethodNotIn(*f.MethodNotIn...))
	}
}
func (f AuditTableMethodNotInForm) CountQuery() bool {
	return true
}

type AuditTableMethodGTForm struct {
	MethodGT *string `form:"MethodGT" json:"MethodGT"`
}

func (f AuditTableMethodGTForm) Query(q *AuditQuery) {
	if f.MethodGT != nil {
		q.Where(audit.MethodGT(*f.MethodGT))
	}
}
func (f AuditTableMethodGTForm) CountQuery() bool {
	return true
}

type AuditTableMethodGTEForm struct {
	MethodGTE *string `form:"MethodGTE" json:"MethodGTE"`
}

func (f AuditTableMethodGTEForm) Query(q *AuditQuery) {
	if f.MethodGTE != nil {
		q.Where(audit.MethodGTE(*f.MethodGTE))
	}
}
func (f AuditTableMethodGTEForm) CountQuery() bool {
	return true
}

type AuditTableMethodLTForm struct {
	MethodLT *string `form:"MethodLT" json:"MethodLT"`
}

func (f AuditTableMethodLTForm) Query(q *AuditQuery) {
	if f.MethodLT != nil {
		q.Where(audit.MethodLT(*f.MethodLT))
	}
}
func (f AuditTableMethodLTForm) CountQuery() bool {
	return true
}

type AuditTableMethodLTEForm struct {
	MethodLTE *string `form:"MethodLTE" json:"MethodLTE"`
}

func (f AuditTableMethodLTEForm) Query(q *AuditQuery) {
	if f.MethodLTE != nil {
		q.Where(audit.MethodLTE(*f.MethodLTE))
	}
}
func (f AuditTableMethodLTEForm) CountQuery() bool {
	return true
}

type AuditTableMethodContainsForm struct {
	MethodContains *string `form:"MethodContains" json:"MethodContains"`
}

func (f AuditTableMethodContainsForm) Query(q *AuditQuery) {
	if f.MethodContains != nil {
		q.Where(audit.MethodContains(*f.MethodContains))
	}
}
func (f AuditTableMethodContainsForm) CountQuery() bool {
	return true
}

type AuditTableMethodHasPrefixForm struct {
	MethodHasPrefix *string `form:"MethodHasPrefix" json:"MethodHasPrefix"`
}

func (f AuditTableMethodHasPrefixForm) Query(q *AuditQuery) {
	if f.MethodHasPrefix != nil {
		q.Where(audit.MethodHasPrefix(*f.MethodHasPrefix))
	}
}
func (f AuditTableMethodHasPrefixForm) CountQuery() bool {
	return true
}

type AuditTableMethodHasSuffixForm struct {
	MethodHasSuffix *string `form:"MethodHasSuffix" json:"MethodHasSuffix"`
}

func (f AuditTableMethodHasSuffixForm) Query(q *AuditQuery) {
	if f.MethodHasSuffix != nil {
		q.Where(audit.MethodHasSuffix(*f.MethodHasSuffix))
	}
}
func (f AuditTableMethodHasSuffixForm) CountQuery() bool {
	return true
}

type AuditTableMethodEqualFoldForm struct {
	MethodEqualFold *string `form:"MethodEqualFold" json:"MethodEqualFold"`
}

func (f AuditTableMethodEqualFoldForm) Query(q *AuditQuery) {
	if f.MethodEqualFold != nil {
		q.Where(audit.MethodEqualFold(*f.MethodEqualFold))
	}
}
func (f AuditTableMethodEqualFoldForm) CountQuery() bool {
	return true
}

type AuditTableMethodContainsFoldForm struct {
	MethodContainsFold *string `form:"MethodContainsFold" json:"MethodContainsFold"`
}

func (f AuditTableMethodContainsFoldForm) Query(q *AuditQuery) {
	if f.MethodContainsFold != nil {
		q.Where(audit.MethodContainsFold(*f.MethodContainsFold))
	}
}
func (f AuditTableMethodContainsFoldForm) CountQuery() bool {
	return true
}

type AuditTableRequestEQForm struct {
	RequestEQ *string `form:"RequestEQ" json:"RequestEQ"`
}

func (f AuditTableRequestEQForm) Query(q *AuditQuery) {
	if f.RequestEQ != nil {
		q.Where(audit.RequestEQ(*f.RequestEQ))
	}
}
func (f AuditTableRequestEQForm) CountQuery() bool {
	return true
}

type AuditTableRequestNEQForm struct {
	RequestNEQ *string `form:"RequestNEQ" json:"RequestNEQ"`
}

func (f AuditTableRequestNEQForm) Query(q *AuditQuery) {
	if f.RequestNEQ != nil {
		q.Where(audit.RequestNEQ(*f.RequestNEQ))
	}
}
func (f AuditTableRequestNEQForm) CountQuery() bool {
	return true
}

type AuditTableRequestInForm struct {
	RequestIn *[]string `form:"RequestIn" json:"RequestIn"`
}

func (f AuditTableRequestInForm) Query(q *AuditQuery) {
	if f.RequestIn != nil {
		q.Where(audit.RequestIn(*f.RequestIn...))
	}
}
func (f AuditTableRequestInForm) CountQuery() bool {
	return true
}

type AuditTableRequestNotInForm struct {
	RequestNotIn *[]string `form:"RequestNotIn" json:"RequestNotIn"`
}

func (f AuditTableRequestNotInForm) Query(q *AuditQuery) {
	if f.RequestNotIn != nil {
		q.Where(audit.RequestNotIn(*f.RequestNotIn...))
	}
}
func (f AuditTableRequestNotInForm) CountQuery() bool {
	return true
}

type AuditTableRequestGTForm struct {
	RequestGT *string `form:"RequestGT" json:"RequestGT"`
}

func (f AuditTableRequestGTForm) Query(q *AuditQuery) {
	if f.RequestGT != nil {
		q.Where(audit.RequestGT(*f.RequestGT))
	}
}
func (f AuditTableRequestGTForm) CountQuery() bool {
	return true
}

type AuditTableRequestGTEForm struct {
	RequestGTE *string `form:"RequestGTE" json:"RequestGTE"`
}

func (f AuditTableRequestGTEForm) Query(q *AuditQuery) {
	if f.RequestGTE != nil {
		q.Where(audit.RequestGTE(*f.RequestGTE))
	}
}
func (f AuditTableRequestGTEForm) CountQuery() bool {
	return true
}

type AuditTableRequestLTForm struct {
	RequestLT *string `form:"RequestLT" json:"RequestLT"`
}

func (f AuditTableRequestLTForm) Query(q *AuditQuery) {
	if f.RequestLT != nil {
		q.Where(audit.RequestLT(*f.RequestLT))
	}
}
func (f AuditTableRequestLTForm) CountQuery() bool {
	return true
}

type AuditTableRequestLTEForm struct {
	RequestLTE *string `form:"RequestLTE" json:"RequestLTE"`
}

func (f AuditTableRequestLTEForm) Query(q *AuditQuery) {
	if f.RequestLTE != nil {
		q.Where(audit.RequestLTE(*f.RequestLTE))
	}
}
func (f AuditTableRequestLTEForm) CountQuery() bool {
	return true
}

type AuditTableRequestContainsForm struct {
	RequestContains *string `form:"RequestContains" json:"RequestContains"`
}

func (f AuditTableRequestContainsForm) Query(q *AuditQuery) {
	if f.RequestContains != nil {
		q.Where(audit.RequestContains(*f.RequestContains))
	}
}
func (f AuditTableRequestContainsForm) CountQuery() bool {
	return true
}

type AuditTableRequestHasPrefixForm struct {
	RequestHasPrefix *string `form:"RequestHasPrefix" json:"RequestHasPrefix"`
}

func (f AuditTableRequestHasPrefixForm) Query(q *AuditQuery) {
	if f.RequestHasPrefix != nil {
		q.Where(audit.RequestHasPrefix(*f.RequestHasPrefix))
	}
}
func (f AuditTableRequestHasPrefixForm) CountQuery() bool {
	return true
}

type AuditTableRequestHasSuffixForm struct {
	RequestHasSuffix *string `form:"RequestHasSuffix" json:"RequestHasSuffix"`
}

func (f AuditTableRequestHasSuffixForm) Query(q *AuditQuery) {
	if f.RequestHasSuffix != nil {
		q.Where(audit.RequestHasSuffix(*f.RequestHasSuffix))
	}
}
func (f AuditTableRequestHasSuffixForm) CountQuery() bool {
	return true
}

type AuditTableRequestEqualFoldForm struct {
	RequestEqualFold *string `form:"RequestEqualFold" json:"RequestEqualFold"`
}

func (f AuditTableRequestEqualFoldForm) Query(q *AuditQuery) {
	if f.RequestEqualFold != nil {
		q.Where(audit.RequestEqualFold(*f.RequestEqualFold))
	}
}
func (f AuditTableRequestEqualFoldForm) CountQuery() bool {
	return true
}

type AuditTableRequestContainsFoldForm struct {
	RequestContainsFold *string `form:"RequestContainsFold" json:"RequestContainsFold"`
}

func (f AuditTableRequestContainsFoldForm) Query(q *AuditQuery) {
	if f.RequestContainsFold != nil {
		q.Where(audit.RequestContainsFold(*f.RequestContainsFold))
	}
}
func (f AuditTableRequestContainsFoldForm) CountQuery() bool {
	return true
}

type AuditTableResponseEQForm struct {
	ResponseEQ *string `form:"ResponseEQ" json:"ResponseEQ"`
}

func (f AuditTableResponseEQForm) Query(q *AuditQuery) {
	if f.ResponseEQ != nil {
		q.Where(audit.ResponseEQ(*f.ResponseEQ))
	}
}
func (f AuditTableResponseEQForm) CountQuery() bool {
	return true
}

type AuditTableResponseNEQForm struct {
	ResponseNEQ *string `form:"ResponseNEQ" json:"ResponseNEQ"`
}

func (f AuditTableResponseNEQForm) Query(q *AuditQuery) {
	if f.ResponseNEQ != nil {
		q.Where(audit.ResponseNEQ(*f.ResponseNEQ))
	}
}
func (f AuditTableResponseNEQForm) CountQuery() bool {
	return true
}

type AuditTableResponseInForm struct {
	ResponseIn *[]string `form:"ResponseIn" json:"ResponseIn"`
}

func (f AuditTableResponseInForm) Query(q *AuditQuery) {
	if f.ResponseIn != nil {
		q.Where(audit.ResponseIn(*f.ResponseIn...))
	}
}
func (f AuditTableResponseInForm) CountQuery() bool {
	return true
}

type AuditTableResponseNotInForm struct {
	ResponseNotIn *[]string `form:"ResponseNotIn" json:"ResponseNotIn"`
}

func (f AuditTableResponseNotInForm) Query(q *AuditQuery) {
	if f.ResponseNotIn != nil {
		q.Where(audit.ResponseNotIn(*f.ResponseNotIn...))
	}
}
func (f AuditTableResponseNotInForm) CountQuery() bool {
	return true
}

type AuditTableResponseGTForm struct {
	ResponseGT *string `form:"ResponseGT" json:"ResponseGT"`
}

func (f AuditTableResponseGTForm) Query(q *AuditQuery) {
	if f.ResponseGT != nil {
		q.Where(audit.ResponseGT(*f.ResponseGT))
	}
}
func (f AuditTableResponseGTForm) CountQuery() bool {
	return true
}

type AuditTableResponseGTEForm struct {
	ResponseGTE *string `form:"ResponseGTE" json:"ResponseGTE"`
}

func (f AuditTableResponseGTEForm) Query(q *AuditQuery) {
	if f.ResponseGTE != nil {
		q.Where(audit.ResponseGTE(*f.ResponseGTE))
	}
}
func (f AuditTableResponseGTEForm) CountQuery() bool {
	return true
}

type AuditTableResponseLTForm struct {
	ResponseLT *string `form:"ResponseLT" json:"ResponseLT"`
}

func (f AuditTableResponseLTForm) Query(q *AuditQuery) {
	if f.ResponseLT != nil {
		q.Where(audit.ResponseLT(*f.ResponseLT))
	}
}
func (f AuditTableResponseLTForm) CountQuery() bool {
	return true
}

type AuditTableResponseLTEForm struct {
	ResponseLTE *string `form:"ResponseLTE" json:"ResponseLTE"`
}

func (f AuditTableResponseLTEForm) Query(q *AuditQuery) {
	if f.ResponseLTE != nil {
		q.Where(audit.ResponseLTE(*f.ResponseLTE))
	}
}
func (f AuditTableResponseLTEForm) CountQuery() bool {
	return true
}

type AuditTableResponseContainsForm struct {
	ResponseContains *string `form:"ResponseContains" json:"ResponseContains"`
}

func (f AuditTableResponseContainsForm) Query(q *AuditQuery) {
	if f.ResponseContains != nil {
		q.Where(audit.ResponseContains(*f.ResponseContains))
	}
}
func (f AuditTableResponseContainsForm) CountQuery() bool {
	return true
}

type AuditTableResponseHasPrefixForm struct {
	ResponseHasPrefix *string `form:"ResponseHasPrefix" json:"ResponseHasPrefix"`
}

func (f AuditTableResponseHasPrefixForm) Query(q *AuditQuery) {
	if f.ResponseHasPrefix != nil {
		q.Where(audit.ResponseHasPrefix(*f.ResponseHasPrefix))
	}
}
func (f AuditTableResponseHasPrefixForm) CountQuery() bool {
	return true
}

type AuditTableResponseHasSuffixForm struct {
	ResponseHasSuffix *string `form:"ResponseHasSuffix" json:"ResponseHasSuffix"`
}

func (f AuditTableResponseHasSuffixForm) Query(q *AuditQuery) {
	if f.ResponseHasSuffix != nil {
		q.Where(audit.ResponseHasSuffix(*f.ResponseHasSuffix))
	}
}
func (f AuditTableResponseHasSuffixForm) CountQuery() bool {
	return true
}

type AuditTableResponseEqualFoldForm struct {
	ResponseEqualFold *string `form:"ResponseEqualFold" json:"ResponseEqualFold"`
}

func (f AuditTableResponseEqualFoldForm) Query(q *AuditQuery) {
	if f.ResponseEqualFold != nil {
		q.Where(audit.ResponseEqualFold(*f.ResponseEqualFold))
	}
}
func (f AuditTableResponseEqualFoldForm) CountQuery() bool {
	return true
}

type AuditTableResponseContainsFoldForm struct {
	ResponseContainsFold *string `form:"ResponseContainsFold" json:"ResponseContainsFold"`
}

func (f AuditTableResponseContainsFoldForm) Query(q *AuditQuery) {
	if f.ResponseContainsFold != nil {
		q.Where(audit.ResponseContainsFold(*f.ResponseContainsFold))
	}
}
func (f AuditTableResponseContainsFoldForm) CountQuery() bool {
	return true
}

type AuditTableHeaderEQForm struct {
	HeaderEQ *string `form:"HeaderEQ" json:"HeaderEQ"`
}

func (f AuditTableHeaderEQForm) Query(q *AuditQuery) {
	if f.HeaderEQ != nil {
		q.Where(audit.HeaderEQ(*f.HeaderEQ))
	}
}
func (f AuditTableHeaderEQForm) CountQuery() bool {
	return true
}

type AuditTableHeaderNEQForm struct {
	HeaderNEQ *string `form:"HeaderNEQ" json:"HeaderNEQ"`
}

func (f AuditTableHeaderNEQForm) Query(q *AuditQuery) {
	if f.HeaderNEQ != nil {
		q.Where(audit.HeaderNEQ(*f.HeaderNEQ))
	}
}
func (f AuditTableHeaderNEQForm) CountQuery() bool {
	return true
}

type AuditTableHeaderInForm struct {
	HeaderIn *[]string `form:"HeaderIn" json:"HeaderIn"`
}

func (f AuditTableHeaderInForm) Query(q *AuditQuery) {
	if f.HeaderIn != nil {
		q.Where(audit.HeaderIn(*f.HeaderIn...))
	}
}
func (f AuditTableHeaderInForm) CountQuery() bool {
	return true
}

type AuditTableHeaderNotInForm struct {
	HeaderNotIn *[]string `form:"HeaderNotIn" json:"HeaderNotIn"`
}

func (f AuditTableHeaderNotInForm) Query(q *AuditQuery) {
	if f.HeaderNotIn != nil {
		q.Where(audit.HeaderNotIn(*f.HeaderNotIn...))
	}
}
func (f AuditTableHeaderNotInForm) CountQuery() bool {
	return true
}

type AuditTableHeaderGTForm struct {
	HeaderGT *string `form:"HeaderGT" json:"HeaderGT"`
}

func (f AuditTableHeaderGTForm) Query(q *AuditQuery) {
	if f.HeaderGT != nil {
		q.Where(audit.HeaderGT(*f.HeaderGT))
	}
}
func (f AuditTableHeaderGTForm) CountQuery() bool {
	return true
}

type AuditTableHeaderGTEForm struct {
	HeaderGTE *string `form:"HeaderGTE" json:"HeaderGTE"`
}

func (f AuditTableHeaderGTEForm) Query(q *AuditQuery) {
	if f.HeaderGTE != nil {
		q.Where(audit.HeaderGTE(*f.HeaderGTE))
	}
}
func (f AuditTableHeaderGTEForm) CountQuery() bool {
	return true
}

type AuditTableHeaderLTForm struct {
	HeaderLT *string `form:"HeaderLT" json:"HeaderLT"`
}

func (f AuditTableHeaderLTForm) Query(q *AuditQuery) {
	if f.HeaderLT != nil {
		q.Where(audit.HeaderLT(*f.HeaderLT))
	}
}
func (f AuditTableHeaderLTForm) CountQuery() bool {
	return true
}

type AuditTableHeaderLTEForm struct {
	HeaderLTE *string `form:"HeaderLTE" json:"HeaderLTE"`
}

func (f AuditTableHeaderLTEForm) Query(q *AuditQuery) {
	if f.HeaderLTE != nil {
		q.Where(audit.HeaderLTE(*f.HeaderLTE))
	}
}
func (f AuditTableHeaderLTEForm) CountQuery() bool {
	return true
}

type AuditTableHeaderContainsForm struct {
	HeaderContains *string `form:"HeaderContains" json:"HeaderContains"`
}

func (f AuditTableHeaderContainsForm) Query(q *AuditQuery) {
	if f.HeaderContains != nil {
		q.Where(audit.HeaderContains(*f.HeaderContains))
	}
}
func (f AuditTableHeaderContainsForm) CountQuery() bool {
	return true
}

type AuditTableHeaderHasPrefixForm struct {
	HeaderHasPrefix *string `form:"HeaderHasPrefix" json:"HeaderHasPrefix"`
}

func (f AuditTableHeaderHasPrefixForm) Query(q *AuditQuery) {
	if f.HeaderHasPrefix != nil {
		q.Where(audit.HeaderHasPrefix(*f.HeaderHasPrefix))
	}
}
func (f AuditTableHeaderHasPrefixForm) CountQuery() bool {
	return true
}

type AuditTableHeaderHasSuffixForm struct {
	HeaderHasSuffix *string `form:"HeaderHasSuffix" json:"HeaderHasSuffix"`
}

func (f AuditTableHeaderHasSuffixForm) Query(q *AuditQuery) {
	if f.HeaderHasSuffix != nil {
		q.Where(audit.HeaderHasSuffix(*f.HeaderHasSuffix))
	}
}
func (f AuditTableHeaderHasSuffixForm) CountQuery() bool {
	return true
}

type AuditTableHeaderEqualFoldForm struct {
	HeaderEqualFold *string `form:"HeaderEqualFold" json:"HeaderEqualFold"`
}

func (f AuditTableHeaderEqualFoldForm) Query(q *AuditQuery) {
	if f.HeaderEqualFold != nil {
		q.Where(audit.HeaderEqualFold(*f.HeaderEqualFold))
	}
}
func (f AuditTableHeaderEqualFoldForm) CountQuery() bool {
	return true
}

type AuditTableHeaderContainsFoldForm struct {
	HeaderContainsFold *string `form:"HeaderContainsFold" json:"HeaderContainsFold"`
}

func (f AuditTableHeaderContainsFoldForm) Query(q *AuditQuery) {
	if f.HeaderContainsFold != nil {
		q.Where(audit.HeaderContainsFold(*f.HeaderContainsFold))
	}
}
func (f AuditTableHeaderContainsFoldForm) CountQuery() bool {
	return true
}

type AuditTableStatusCodeEQForm struct {
	StatusCodeEQ *int `form:"StatusCodeEQ" json:"StatusCodeEQ"`
}

func (f AuditTableStatusCodeEQForm) Query(q *AuditQuery) {
	if f.StatusCodeEQ != nil {
		q.Where(audit.StatusCodeEQ(*f.StatusCodeEQ))
	}
}
func (f AuditTableStatusCodeEQForm) CountQuery() bool {
	return true
}

type AuditTableStatusCodeNEQForm struct {
	StatusCodeNEQ *int `form:"StatusCodeNEQ" json:"StatusCodeNEQ"`
}

func (f AuditTableStatusCodeNEQForm) Query(q *AuditQuery) {
	if f.StatusCodeNEQ != nil {
		q.Where(audit.StatusCodeNEQ(*f.StatusCodeNEQ))
	}
}
func (f AuditTableStatusCodeNEQForm) CountQuery() bool {
	return true
}

type AuditTableStatusCodeInForm struct {
	StatusCodeIn *[]int `form:"StatusCodeIn" json:"StatusCodeIn"`
}

func (f AuditTableStatusCodeInForm) Query(q *AuditQuery) {
	if f.StatusCodeIn != nil {
		q.Where(audit.StatusCodeIn(*f.StatusCodeIn...))
	}
}
func (f AuditTableStatusCodeInForm) CountQuery() bool {
	return true
}

type AuditTableStatusCodeNotInForm struct {
	StatusCodeNotIn *[]int `form:"StatusCodeNotIn" json:"StatusCodeNotIn"`
}

func (f AuditTableStatusCodeNotInForm) Query(q *AuditQuery) {
	if f.StatusCodeNotIn != nil {
		q.Where(audit.StatusCodeNotIn(*f.StatusCodeNotIn...))
	}
}
func (f AuditTableStatusCodeNotInForm) CountQuery() bool {
	return true
}

type AuditTableStatusCodeGTForm struct {
	StatusCodeGT *int `form:"StatusCodeGT" json:"StatusCodeGT"`
}

func (f AuditTableStatusCodeGTForm) Query(q *AuditQuery) {
	if f.StatusCodeGT != nil {
		q.Where(audit.StatusCodeGT(*f.StatusCodeGT))
	}
}
func (f AuditTableStatusCodeGTForm) CountQuery() bool {
	return true
}

type AuditTableStatusCodeGTEForm struct {
	StatusCodeGTE *int `form:"StatusCodeGTE" json:"StatusCodeGTE"`
}

func (f AuditTableStatusCodeGTEForm) Query(q *AuditQuery) {
	if f.StatusCodeGTE != nil {
		q.Where(audit.StatusCodeGTE(*f.StatusCodeGTE))
	}
}
func (f AuditTableStatusCodeGTEForm) CountQuery() bool {
	return true
}

type AuditTableStatusCodeLTForm struct {
	StatusCodeLT *int `form:"StatusCodeLT" json:"StatusCodeLT"`
}

func (f AuditTableStatusCodeLTForm) Query(q *AuditQuery) {
	if f.StatusCodeLT != nil {
		q.Where(audit.StatusCodeLT(*f.StatusCodeLT))
	}
}
func (f AuditTableStatusCodeLTForm) CountQuery() bool {
	return true
}

type AuditTableStatusCodeLTEForm struct {
	StatusCodeLTE *int `form:"StatusCodeLTE" json:"StatusCodeLTE"`
}

func (f AuditTableStatusCodeLTEForm) Query(q *AuditQuery) {
	if f.StatusCodeLTE != nil {
		q.Where(audit.StatusCodeLTE(*f.StatusCodeLTE))
	}
}
func (f AuditTableStatusCodeLTEForm) CountQuery() bool {
	return true
}

type AuditTableRemoteIPEQForm struct {
	RemoteIPEQ *string `form:"RemoteIPEQ" json:"RemoteIPEQ"`
}

func (f AuditTableRemoteIPEQForm) Query(q *AuditQuery) {
	if f.RemoteIPEQ != nil {
		q.Where(audit.RemoteIPEQ(*f.RemoteIPEQ))
	}
}
func (f AuditTableRemoteIPEQForm) CountQuery() bool {
	return true
}

type AuditTableRemoteIPNEQForm struct {
	RemoteIPNEQ *string `form:"RemoteIPNEQ" json:"RemoteIPNEQ"`
}

func (f AuditTableRemoteIPNEQForm) Query(q *AuditQuery) {
	if f.RemoteIPNEQ != nil {
		q.Where(audit.RemoteIPNEQ(*f.RemoteIPNEQ))
	}
}
func (f AuditTableRemoteIPNEQForm) CountQuery() bool {
	return true
}

type AuditTableRemoteIPInForm struct {
	RemoteIPIn *[]string `form:"RemoteIPIn" json:"RemoteIPIn"`
}

func (f AuditTableRemoteIPInForm) Query(q *AuditQuery) {
	if f.RemoteIPIn != nil {
		q.Where(audit.RemoteIPIn(*f.RemoteIPIn...))
	}
}
func (f AuditTableRemoteIPInForm) CountQuery() bool {
	return true
}

type AuditTableRemoteIPNotInForm struct {
	RemoteIPNotIn *[]string `form:"RemoteIPNotIn" json:"RemoteIPNotIn"`
}

func (f AuditTableRemoteIPNotInForm) Query(q *AuditQuery) {
	if f.RemoteIPNotIn != nil {
		q.Where(audit.RemoteIPNotIn(*f.RemoteIPNotIn...))
	}
}
func (f AuditTableRemoteIPNotInForm) CountQuery() bool {
	return true
}

type AuditTableRemoteIPGTForm struct {
	RemoteIPGT *string `form:"RemoteIPGT" json:"RemoteIPGT"`
}

func (f AuditTableRemoteIPGTForm) Query(q *AuditQuery) {
	if f.RemoteIPGT != nil {
		q.Where(audit.RemoteIPGT(*f.RemoteIPGT))
	}
}
func (f AuditTableRemoteIPGTForm) CountQuery() bool {
	return true
}

type AuditTableRemoteIPGTEForm struct {
	RemoteIPGTE *string `form:"RemoteIPGTE" json:"RemoteIPGTE"`
}

func (f AuditTableRemoteIPGTEForm) Query(q *AuditQuery) {
	if f.RemoteIPGTE != nil {
		q.Where(audit.RemoteIPGTE(*f.RemoteIPGTE))
	}
}
func (f AuditTableRemoteIPGTEForm) CountQuery() bool {
	return true
}

type AuditTableRemoteIPLTForm struct {
	RemoteIPLT *string `form:"RemoteIPLT" json:"RemoteIPLT"`
}

func (f AuditTableRemoteIPLTForm) Query(q *AuditQuery) {
	if f.RemoteIPLT != nil {
		q.Where(audit.RemoteIPLT(*f.RemoteIPLT))
	}
}
func (f AuditTableRemoteIPLTForm) CountQuery() bool {
	return true
}

type AuditTableRemoteIPLTEForm struct {
	RemoteIPLTE *string `form:"RemoteIPLTE" json:"RemoteIPLTE"`
}

func (f AuditTableRemoteIPLTEForm) Query(q *AuditQuery) {
	if f.RemoteIPLTE != nil {
		q.Where(audit.RemoteIPLTE(*f.RemoteIPLTE))
	}
}
func (f AuditTableRemoteIPLTEForm) CountQuery() bool {
	return true
}

type AuditTableRemoteIPContainsForm struct {
	RemoteIPContains *string `form:"RemoteIPContains" json:"RemoteIPContains"`
}

func (f AuditTableRemoteIPContainsForm) Query(q *AuditQuery) {
	if f.RemoteIPContains != nil {
		q.Where(audit.RemoteIPContains(*f.RemoteIPContains))
	}
}
func (f AuditTableRemoteIPContainsForm) CountQuery() bool {
	return true
}

type AuditTableRemoteIPHasPrefixForm struct {
	RemoteIPHasPrefix *string `form:"RemoteIPHasPrefix" json:"RemoteIPHasPrefix"`
}

func (f AuditTableRemoteIPHasPrefixForm) Query(q *AuditQuery) {
	if f.RemoteIPHasPrefix != nil {
		q.Where(audit.RemoteIPHasPrefix(*f.RemoteIPHasPrefix))
	}
}
func (f AuditTableRemoteIPHasPrefixForm) CountQuery() bool {
	return true
}

type AuditTableRemoteIPHasSuffixForm struct {
	RemoteIPHasSuffix *string `form:"RemoteIPHasSuffix" json:"RemoteIPHasSuffix"`
}

func (f AuditTableRemoteIPHasSuffixForm) Query(q *AuditQuery) {
	if f.RemoteIPHasSuffix != nil {
		q.Where(audit.RemoteIPHasSuffix(*f.RemoteIPHasSuffix))
	}
}
func (f AuditTableRemoteIPHasSuffixForm) CountQuery() bool {
	return true
}

type AuditTableRemoteIPEqualFoldForm struct {
	RemoteIPEqualFold *string `form:"RemoteIPEqualFold" json:"RemoteIPEqualFold"`
}

func (f AuditTableRemoteIPEqualFoldForm) Query(q *AuditQuery) {
	if f.RemoteIPEqualFold != nil {
		q.Where(audit.RemoteIPEqualFold(*f.RemoteIPEqualFold))
	}
}
func (f AuditTableRemoteIPEqualFoldForm) CountQuery() bool {
	return true
}

type AuditTableRemoteIPContainsFoldForm struct {
	RemoteIPContainsFold *string `form:"RemoteIPContainsFold" json:"RemoteIPContainsFold"`
}

func (f AuditTableRemoteIPContainsFoldForm) Query(q *AuditQuery) {
	if f.RemoteIPContainsFold != nil {
		q.Where(audit.RemoteIPContainsFold(*f.RemoteIPContainsFold))
	}
}
func (f AuditTableRemoteIPContainsFoldForm) CountQuery() bool {
	return true
}

type AuditTableClientIPEQForm struct {
	ClientIPEQ *string `form:"ClientIPEQ" json:"ClientIPEQ"`
}

func (f AuditTableClientIPEQForm) Query(q *AuditQuery) {
	if f.ClientIPEQ != nil {
		q.Where(audit.ClientIPEQ(*f.ClientIPEQ))
	}
}
func (f AuditTableClientIPEQForm) CountQuery() bool {
	return true
}

type AuditTableClientIPNEQForm struct {
	ClientIPNEQ *string `form:"ClientIPNEQ" json:"ClientIPNEQ"`
}

func (f AuditTableClientIPNEQForm) Query(q *AuditQuery) {
	if f.ClientIPNEQ != nil {
		q.Where(audit.ClientIPNEQ(*f.ClientIPNEQ))
	}
}
func (f AuditTableClientIPNEQForm) CountQuery() bool {
	return true
}

type AuditTableClientIPInForm struct {
	ClientIPIn *[]string `form:"ClientIPIn" json:"ClientIPIn"`
}

func (f AuditTableClientIPInForm) Query(q *AuditQuery) {
	if f.ClientIPIn != nil {
		q.Where(audit.ClientIPIn(*f.ClientIPIn...))
	}
}
func (f AuditTableClientIPInForm) CountQuery() bool {
	return true
}

type AuditTableClientIPNotInForm struct {
	ClientIPNotIn *[]string `form:"ClientIPNotIn" json:"ClientIPNotIn"`
}

func (f AuditTableClientIPNotInForm) Query(q *AuditQuery) {
	if f.ClientIPNotIn != nil {
		q.Where(audit.ClientIPNotIn(*f.ClientIPNotIn...))
	}
}
func (f AuditTableClientIPNotInForm) CountQuery() bool {
	return true
}

type AuditTableClientIPGTForm struct {
	ClientIPGT *string `form:"ClientIPGT" json:"ClientIPGT"`
}

func (f AuditTableClientIPGTForm) Query(q *AuditQuery) {
	if f.ClientIPGT != nil {
		q.Where(audit.ClientIPGT(*f.ClientIPGT))
	}
}
func (f AuditTableClientIPGTForm) CountQuery() bool {
	return true
}

type AuditTableClientIPGTEForm struct {
	ClientIPGTE *string `form:"ClientIPGTE" json:"ClientIPGTE"`
}

func (f AuditTableClientIPGTEForm) Query(q *AuditQuery) {
	if f.ClientIPGTE != nil {
		q.Where(audit.ClientIPGTE(*f.ClientIPGTE))
	}
}
func (f AuditTableClientIPGTEForm) CountQuery() bool {
	return true
}

type AuditTableClientIPLTForm struct {
	ClientIPLT *string `form:"ClientIPLT" json:"ClientIPLT"`
}

func (f AuditTableClientIPLTForm) Query(q *AuditQuery) {
	if f.ClientIPLT != nil {
		q.Where(audit.ClientIPLT(*f.ClientIPLT))
	}
}
func (f AuditTableClientIPLTForm) CountQuery() bool {
	return true
}

type AuditTableClientIPLTEForm struct {
	ClientIPLTE *string `form:"ClientIPLTE" json:"ClientIPLTE"`
}

func (f AuditTableClientIPLTEForm) Query(q *AuditQuery) {
	if f.ClientIPLTE != nil {
		q.Where(audit.ClientIPLTE(*f.ClientIPLTE))
	}
}
func (f AuditTableClientIPLTEForm) CountQuery() bool {
	return true
}

type AuditTableClientIPContainsForm struct {
	ClientIPContains *string `form:"ClientIPContains" json:"ClientIPContains"`
}

func (f AuditTableClientIPContainsForm) Query(q *AuditQuery) {
	if f.ClientIPContains != nil {
		q.Where(audit.ClientIPContains(*f.ClientIPContains))
	}
}
func (f AuditTableClientIPContainsForm) CountQuery() bool {
	return true
}

type AuditTableClientIPHasPrefixForm struct {
	ClientIPHasPrefix *string `form:"ClientIPHasPrefix" json:"ClientIPHasPrefix"`
}

func (f AuditTableClientIPHasPrefixForm) Query(q *AuditQuery) {
	if f.ClientIPHasPrefix != nil {
		q.Where(audit.ClientIPHasPrefix(*f.ClientIPHasPrefix))
	}
}
func (f AuditTableClientIPHasPrefixForm) CountQuery() bool {
	return true
}

type AuditTableClientIPHasSuffixForm struct {
	ClientIPHasSuffix *string `form:"ClientIPHasSuffix" json:"ClientIPHasSuffix"`
}

func (f AuditTableClientIPHasSuffixForm) Query(q *AuditQuery) {
	if f.ClientIPHasSuffix != nil {
		q.Where(audit.ClientIPHasSuffix(*f.ClientIPHasSuffix))
	}
}
func (f AuditTableClientIPHasSuffixForm) CountQuery() bool {
	return true
}

type AuditTableClientIPEqualFoldForm struct {
	ClientIPEqualFold *string `form:"ClientIPEqualFold" json:"ClientIPEqualFold"`
}

func (f AuditTableClientIPEqualFoldForm) Query(q *AuditQuery) {
	if f.ClientIPEqualFold != nil {
		q.Where(audit.ClientIPEqualFold(*f.ClientIPEqualFold))
	}
}
func (f AuditTableClientIPEqualFoldForm) CountQuery() bool {
	return true
}

type AuditTableClientIPContainsFoldForm struct {
	ClientIPContainsFold *string `form:"ClientIPContainsFold" json:"ClientIPContainsFold"`
}

func (f AuditTableClientIPContainsFoldForm) Query(q *AuditQuery) {
	if f.ClientIPContainsFold != nil {
		q.Where(audit.ClientIPContainsFold(*f.ClientIPContainsFold))
	}
}
func (f AuditTableClientIPContainsFoldForm) CountQuery() bool {
	return true
}

type AuditTableCostTimeEQForm struct {
	CostTimeEQ *string `form:"CostTimeEQ" json:"CostTimeEQ"`
}

func (f AuditTableCostTimeEQForm) Query(q *AuditQuery) {
	if f.CostTimeEQ != nil {
		q.Where(audit.CostTimeEQ(*f.CostTimeEQ))
	}
}
func (f AuditTableCostTimeEQForm) CountQuery() bool {
	return true
}

type AuditTableCostTimeNEQForm struct {
	CostTimeNEQ *string `form:"CostTimeNEQ" json:"CostTimeNEQ"`
}

func (f AuditTableCostTimeNEQForm) Query(q *AuditQuery) {
	if f.CostTimeNEQ != nil {
		q.Where(audit.CostTimeNEQ(*f.CostTimeNEQ))
	}
}
func (f AuditTableCostTimeNEQForm) CountQuery() bool {
	return true
}

type AuditTableCostTimeInForm struct {
	CostTimeIn *[]string `form:"CostTimeIn" json:"CostTimeIn"`
}

func (f AuditTableCostTimeInForm) Query(q *AuditQuery) {
	if f.CostTimeIn != nil {
		q.Where(audit.CostTimeIn(*f.CostTimeIn...))
	}
}
func (f AuditTableCostTimeInForm) CountQuery() bool {
	return true
}

type AuditTableCostTimeNotInForm struct {
	CostTimeNotIn *[]string `form:"CostTimeNotIn" json:"CostTimeNotIn"`
}

func (f AuditTableCostTimeNotInForm) Query(q *AuditQuery) {
	if f.CostTimeNotIn != nil {
		q.Where(audit.CostTimeNotIn(*f.CostTimeNotIn...))
	}
}
func (f AuditTableCostTimeNotInForm) CountQuery() bool {
	return true
}

type AuditTableCostTimeGTForm struct {
	CostTimeGT *string `form:"CostTimeGT" json:"CostTimeGT"`
}

func (f AuditTableCostTimeGTForm) Query(q *AuditQuery) {
	if f.CostTimeGT != nil {
		q.Where(audit.CostTimeGT(*f.CostTimeGT))
	}
}
func (f AuditTableCostTimeGTForm) CountQuery() bool {
	return true
}

type AuditTableCostTimeGTEForm struct {
	CostTimeGTE *string `form:"CostTimeGTE" json:"CostTimeGTE"`
}

func (f AuditTableCostTimeGTEForm) Query(q *AuditQuery) {
	if f.CostTimeGTE != nil {
		q.Where(audit.CostTimeGTE(*f.CostTimeGTE))
	}
}
func (f AuditTableCostTimeGTEForm) CountQuery() bool {
	return true
}

type AuditTableCostTimeLTForm struct {
	CostTimeLT *string `form:"CostTimeLT" json:"CostTimeLT"`
}

func (f AuditTableCostTimeLTForm) Query(q *AuditQuery) {
	if f.CostTimeLT != nil {
		q.Where(audit.CostTimeLT(*f.CostTimeLT))
	}
}
func (f AuditTableCostTimeLTForm) CountQuery() bool {
	return true
}

type AuditTableCostTimeLTEForm struct {
	CostTimeLTE *string `form:"CostTimeLTE" json:"CostTimeLTE"`
}

func (f AuditTableCostTimeLTEForm) Query(q *AuditQuery) {
	if f.CostTimeLTE != nil {
		q.Where(audit.CostTimeLTE(*f.CostTimeLTE))
	}
}
func (f AuditTableCostTimeLTEForm) CountQuery() bool {
	return true
}

type AuditTableCostTimeContainsForm struct {
	CostTimeContains *string `form:"CostTimeContains" json:"CostTimeContains"`
}

func (f AuditTableCostTimeContainsForm) Query(q *AuditQuery) {
	if f.CostTimeContains != nil {
		q.Where(audit.CostTimeContains(*f.CostTimeContains))
	}
}
func (f AuditTableCostTimeContainsForm) CountQuery() bool {
	return true
}

type AuditTableCostTimeHasPrefixForm struct {
	CostTimeHasPrefix *string `form:"CostTimeHasPrefix" json:"CostTimeHasPrefix"`
}

func (f AuditTableCostTimeHasPrefixForm) Query(q *AuditQuery) {
	if f.CostTimeHasPrefix != nil {
		q.Where(audit.CostTimeHasPrefix(*f.CostTimeHasPrefix))
	}
}
func (f AuditTableCostTimeHasPrefixForm) CountQuery() bool {
	return true
}

type AuditTableCostTimeHasSuffixForm struct {
	CostTimeHasSuffix *string `form:"CostTimeHasSuffix" json:"CostTimeHasSuffix"`
}

func (f AuditTableCostTimeHasSuffixForm) Query(q *AuditQuery) {
	if f.CostTimeHasSuffix != nil {
		q.Where(audit.CostTimeHasSuffix(*f.CostTimeHasSuffix))
	}
}
func (f AuditTableCostTimeHasSuffixForm) CountQuery() bool {
	return true
}

type AuditTableCostTimeEqualFoldForm struct {
	CostTimeEqualFold *string `form:"CostTimeEqualFold" json:"CostTimeEqualFold"`
}

func (f AuditTableCostTimeEqualFoldForm) Query(q *AuditQuery) {
	if f.CostTimeEqualFold != nil {
		q.Where(audit.CostTimeEqualFold(*f.CostTimeEqualFold))
	}
}
func (f AuditTableCostTimeEqualFoldForm) CountQuery() bool {
	return true
}

type AuditTableCostTimeContainsFoldForm struct {
	CostTimeContainsFold *string `form:"CostTimeContainsFold" json:"CostTimeContainsFold"`
}

func (f AuditTableCostTimeContainsFoldForm) Query(q *AuditQuery) {
	if f.CostTimeContainsFold != nil {
		q.Where(audit.CostTimeContainsFold(*f.CostTimeContainsFold))
	}
}
func (f AuditTableCostTimeContainsFoldForm) CountQuery() bool {
	return true
}

// AuditGroupBy is the group-by builder for Audit entities.
type AuditGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agb *AuditGroupBy) Aggregate(fns ...AggregateFunc) *AuditGroupBy {
	agb.fns = append(agb.fns, fns...)
	return agb
}

// Scan applies the group-by query and scans the result into the given value.
func (agb *AuditGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := agb.path(ctx)
	if err != nil {
		return err
	}
	agb.sql = query
	return agb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (agb *AuditGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := agb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (agb *AuditGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(agb.fields) > 1 {
		return nil, errors.New("ent: AuditGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := agb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (agb *AuditGroupBy) StringsX(ctx context.Context) []string {
	v, err := agb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (agb *AuditGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = agb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{audit.Label}
	default:
		err = fmt.Errorf("ent: AuditGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (agb *AuditGroupBy) StringX(ctx context.Context) string {
	v, err := agb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (agb *AuditGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(agb.fields) > 1 {
		return nil, errors.New("ent: AuditGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := agb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (agb *AuditGroupBy) IntsX(ctx context.Context) []int {
	v, err := agb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (agb *AuditGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = agb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{audit.Label}
	default:
		err = fmt.Errorf("ent: AuditGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (agb *AuditGroupBy) IntX(ctx context.Context) int {
	v, err := agb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (agb *AuditGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(agb.fields) > 1 {
		return nil, errors.New("ent: AuditGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := agb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (agb *AuditGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := agb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (agb *AuditGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = agb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{audit.Label}
	default:
		err = fmt.Errorf("ent: AuditGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (agb *AuditGroupBy) Float64X(ctx context.Context) float64 {
	v, err := agb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (agb *AuditGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(agb.fields) > 1 {
		return nil, errors.New("ent: AuditGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := agb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (agb *AuditGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := agb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (agb *AuditGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = agb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{audit.Label}
	default:
		err = fmt.Errorf("ent: AuditGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (agb *AuditGroupBy) BoolX(ctx context.Context) bool {
	v, err := agb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (agb *AuditGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range agb.fields {
		if !audit.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := agb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := agb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (agb *AuditGroupBy) sqlQuery() *sql.Selector {
	selector := agb.sql.Select()
	aggregation := make([]string, 0, len(agb.fns))
	for _, fn := range agb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(agb.fields)+len(agb.fns))
		for _, f := range agb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(agb.fields...)...)
}

// AuditSelect is the builder for selecting fields of Audit entities.
type AuditSelect struct {
	*AuditQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (as *AuditSelect) Scan(ctx context.Context, v interface{}) error {
	if err := as.prepareQuery(ctx); err != nil {
		return err
	}
	as.sql = as.AuditQuery.sqlQuery(ctx)
	return as.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (as *AuditSelect) ScanX(ctx context.Context, v interface{}) {
	if err := as.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (as *AuditSelect) Strings(ctx context.Context) ([]string, error) {
	if len(as.fields) > 1 {
		return nil, errors.New("ent: AuditSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := as.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (as *AuditSelect) StringsX(ctx context.Context) []string {
	v, err := as.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (as *AuditSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = as.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{audit.Label}
	default:
		err = fmt.Errorf("ent: AuditSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (as *AuditSelect) StringX(ctx context.Context) string {
	v, err := as.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (as *AuditSelect) Ints(ctx context.Context) ([]int, error) {
	if len(as.fields) > 1 {
		return nil, errors.New("ent: AuditSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := as.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (as *AuditSelect) IntsX(ctx context.Context) []int {
	v, err := as.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (as *AuditSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = as.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{audit.Label}
	default:
		err = fmt.Errorf("ent: AuditSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (as *AuditSelect) IntX(ctx context.Context) int {
	v, err := as.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (as *AuditSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(as.fields) > 1 {
		return nil, errors.New("ent: AuditSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := as.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (as *AuditSelect) Float64sX(ctx context.Context) []float64 {
	v, err := as.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (as *AuditSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = as.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{audit.Label}
	default:
		err = fmt.Errorf("ent: AuditSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (as *AuditSelect) Float64X(ctx context.Context) float64 {
	v, err := as.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (as *AuditSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(as.fields) > 1 {
		return nil, errors.New("ent: AuditSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := as.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (as *AuditSelect) BoolsX(ctx context.Context) []bool {
	v, err := as.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (as *AuditSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = as.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{audit.Label}
	default:
		err = fmt.Errorf("ent: AuditSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (as *AuditSelect) BoolX(ctx context.Context) bool {
	v, err := as.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (as *AuditSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := as.sql.Query()
	if err := as.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
