// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hello/pkg/ent/resource"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Resource is the model entity for the Resource schema.
type Resource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// Comments holds the value of the "comments" field.
	Comments string `json:"comments,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourceQuery when eager-loading is set.
	Edges         ResourceEdges `json:"edges"`
	resource_next *int
}

// ResourceEdges holds the relations/edges for other nodes in the graph.
type ResourceEdges struct {
	// Pre holds the value of the pre edge.
	Pre *Resource `json:"pre,omitempty"`
	// Next holds the value of the next edge.
	Next []*Resource `json:"next,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PreOrErr returns the Pre value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceEdges) PreOrErr() (*Resource, error) {
	if e.loadedTypes[0] {
		if e.Pre == nil {
			// The edge pre was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: resource.Label}
		}
		return e.Pre, nil
	}
	return nil, &NotLoadedError{edge: "pre"}
}

// NextOrErr returns the Next value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceEdges) NextOrErr() ([]*Resource, error) {
	if e.loadedTypes[1] {
		return e.Next, nil
	}
	return nil, &NotLoadedError{edge: "next"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Resource) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case resource.FieldID:
			values[i] = new(sql.NullInt64)
		case resource.FieldName, resource.FieldKey, resource.FieldPath, resource.FieldAction, resource.FieldComments:
			values[i] = new(sql.NullString)
		case resource.FieldCreateTime, resource.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case resource.ForeignKeys[0]: // resource_next
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Resource", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Resource fields.
func (r *Resource) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case resource.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				r.CreateTime = value.Time
			}
		case resource.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				r.UpdateTime = value.Time
			}
		case resource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case resource.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				r.Key = value.String
			}
		case resource.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				r.Path = value.String
			}
		case resource.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				r.Action = value.String
			}
		case resource.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				r.Comments = value.String
			}
		case resource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field resource_next", value)
			} else if value.Valid {
				r.resource_next = new(int)
				*r.resource_next = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPre queries the "pre" edge of the Resource entity.
func (r *Resource) QueryPre() *ResourceQuery {
	return (&ResourceClient{config: r.config}).QueryPre(r)
}

// QueryNext queries the "next" edge of the Resource entity.
func (r *Resource) QueryNext() *ResourceQuery {
	return (&ResourceClient{config: r.config}).QueryNext(r)
}

// Update returns a builder for updating this Resource.
// Note that you need to call Resource.Unwrap() before calling this method if this Resource
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Resource) Update() *ResourceUpdateOne {
	return (&ResourceClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Resource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Resource) Unwrap() *Resource {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Resource is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Resource) String() string {
	var builder strings.Builder
	builder.WriteString("Resource(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(r.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(r.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(r.Name)
	builder.WriteString(", key=")
	builder.WriteString(r.Key)
	builder.WriteString(", path=")
	builder.WriteString(r.Path)
	builder.WriteString(", action=")
	builder.WriteString(r.Action)
	builder.WriteString(", comments=")
	builder.WriteString(r.Comments)
	builder.WriteByte(')')
	return builder.String()
}

// Resources is a parsable slice of Resource.
type Resources []*Resource

func (r Resources) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
