// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hello/pkg/ent/predicate"
	"hello/pkg/ent/project"
	"hello/pkg/ent/service"
	"math"
	"reflect"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceQuery is the builder for querying Service entities.
type ServiceQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.Service
	// eager-loading edges.
	withProject *ProjectQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ServiceQuery builder.
func (sq *ServiceQuery) Where(ps ...predicate.Service) *ServiceQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit adds a limit step to the query.
func (sq *ServiceQuery) Limit(limit int) *ServiceQuery {
	sq.limit = &limit
	return sq
}

// Offset adds an offset step to the query.
func (sq *ServiceQuery) Offset(offset int) *ServiceQuery {
	sq.offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *ServiceQuery) Unique(unique bool) *ServiceQuery {
	sq.unique = &unique
	return sq
}

// Order adds an order step to the query.
func (sq *ServiceQuery) Order(o ...OrderFunc) *ServiceQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryProject chains the current query on the "project" edge.
func (sq *ServiceQuery) QueryProject() *ProjectQuery {
	query := &ProjectQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(service.Table, service.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, service.ProjectTable, service.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Service entity from the query.
// Returns a *NotFoundError when no Service was found.
func (sq *ServiceQuery) First(ctx context.Context) (*Service, error) {
	nodes, err := sq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{service.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *ServiceQuery) FirstX(ctx context.Context) *Service {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Service ID from the query.
// Returns a *NotFoundError when no Service ID was found.
func (sq *ServiceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{service.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *ServiceQuery) FirstIDX(ctx context.Context) int {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Service entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Service entity is found.
// Returns a *NotFoundError when no Service entities are found.
func (sq *ServiceQuery) Only(ctx context.Context) (*Service, error) {
	nodes, err := sq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{service.Label}
	default:
		return nil, &NotSingularError{service.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *ServiceQuery) OnlyX(ctx context.Context) *Service {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Service ID in the query.
// Returns a *NotSingularError when more than one Service ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *ServiceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{service.Label}
	default:
		err = &NotSingularError{service.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *ServiceQuery) OnlyIDX(ctx context.Context) int {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Services.
func (sq *ServiceQuery) All(ctx context.Context) ([]*Service, error) {
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return sq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (sq *ServiceQuery) AllX(ctx context.Context) []*Service {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Service IDs.
func (sq *ServiceQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := sq.Select(service.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *ServiceQuery) IDsX(ctx context.Context) []int {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *ServiceQuery) Count(ctx context.Context) (int, error) {
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return sq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (sq *ServiceQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *ServiceQuery) Exist(ctx context.Context) (bool, error) {
	if err := sq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return sq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *ServiceQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ServiceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *ServiceQuery) Clone() *ServiceQuery {
	if sq == nil {
		return nil
	}
	return &ServiceQuery{
		config:      sq.config,
		limit:       sq.limit,
		offset:      sq.offset,
		order:       append([]OrderFunc{}, sq.order...),
		predicates:  append([]predicate.Service{}, sq.predicates...),
		withProject: sq.withProject.Clone(),
		// clone intermediate query.
		sql:    sq.sql.Clone(),
		path:   sq.path,
		unique: sq.unique,
	}
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ServiceQuery) WithProject(opts ...func(*ProjectQuery)) *ServiceQuery {
	query := &ProjectQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withProject = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Service.Query().
//		GroupBy(service.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (sq *ServiceQuery) GroupBy(field string, fields ...string) *ServiceGroupBy {
	group := &ServiceGroupBy{config: sq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return sq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.Service.Query().
//		Select(service.FieldCreateTime).
//		Scan(ctx, &v)
//
func (sq *ServiceQuery) Select(fields ...string) *ServiceSelect {
	sq.fields = append(sq.fields, fields...)
	return &ServiceSelect{ServiceQuery: sq}
}

func (sq *ServiceQuery) prepareQuery(ctx context.Context) error {
	for _, f := range sq.fields {
		if !service.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.sql = prev
	}
	return nil
}

func (sq *ServiceQuery) sqlAll(ctx context.Context) ([]*Service, error) {
	var (
		nodes       = []*Service{}
		withFKs     = sq.withFKs
		_spec       = sq.querySpec()
		loadedTypes = [1]bool{
			sq.withProject != nil,
		}
	)
	if sq.withProject != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, service.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Service{config: sq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, sq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := sq.withProject; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Service)
		for i := range nodes {
			if nodes[i].project_services == nil {
				continue
			}
			fk := *nodes[i].project_services
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(project.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "project_services" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Project = n
			}
		}
	}

	return nodes, nil
}

func (sq *ServiceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sq.querySpec()
	_spec.Node.Columns = sq.fields
	if len(sq.fields) > 0 {
		_spec.Unique = sq.unique != nil && *sq.unique
	}
	return sqlgraph.CountNodes(ctx, sq.driver, _spec)
}

func (sq *ServiceQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := sq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (sq *ServiceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   service.Table,
			Columns: service.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: service.FieldID,
			},
		},
		From:   sq.sql,
		Unique: true,
	}
	if unique := sq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := sq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, service.FieldID)
		for i := range fields {
			if fields[i] != service.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sq *ServiceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sq.driver.Dialect())
	t1 := builder.Table(service.Table)
	columns := sq.fields
	if len(columns) == 0 {
		columns = service.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sq.sql != nil {
		selector = sq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sq.unique != nil && *sq.unique {
		selector.Distinct()
	}
	for _, p := range sq.predicates {
		p(selector)
	}
	for _, p := range sq.order {
		p(selector)
	}
	if offset := sq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

func (sq *ServiceQuery) Queries(i interface{}) *ServiceQuery {
	queryList, _ := SetServiceFormQueries(i)
	for _, v := range queryList {
		v.Query(sq)
	}
	return sq
}

func (sq *ServiceQuery) ByQueriesAll(ctx context.Context, i interface{}) (res Services, count int, err error) {
	queryList, countList := SetServiceFormQueries(i)
	countQ := sq.Clone()
	for _, v := range queryList {
		v.Query(sq)
	}
	for _, v := range countList {
		v.Query(countQ)
	}
	count, err = countQ.Count(ctx)
	if err != nil {
		return
	}
	res, err = sq.All(ctx)
	return
}

type ServiceTableFormer interface {
	Query(q *ServiceQuery)
	CountQuery() bool
}

type ServiceTablePagingForm struct {
	Limit *int `json:"_limit" form:"_limit" `
	Page  *int `json:"_page" form:"_page"`
}

func (f ServiceTablePagingForm) Query(q *ServiceQuery) {
	if f.Limit != nil && f.Page != nil {
		q.Limit(*f.Limit).Offset((*f.Page - 1) * *f.Limit)
	}
}

func (f ServiceTablePagingForm) CountQuery() bool {
	return false
}

type ServiceTableOrderForm struct {
	Order  *string `json:"order" form:"_order" binding:"omitempty,oneof=acs desc"`
	SortBy *string `json:"sortBy" form:"_sortBy"`
}

func (f ServiceTableOrderForm) Query(q *ServiceQuery) {
	if f.Order != nil && f.SortBy != nil {
		if *f.Order == "acs" {
			q.Order(Asc(*f.SortBy))
		}

		if *f.Order == "desc" {
			q.Order(Desc(*f.SortBy))
		}
	}
}
func (f ServiceTableOrderForm) CountQuery() bool {
	return false
}

func SetServiceFormQueries(o interface{}) ([]ServiceTableFormer, []ServiceTableFormer) {
	queryList := make([]ServiceTableFormer, 0)
	countList := make([]ServiceTableFormer, 0)
	v := reflect.ValueOf(o)
	former := reflect.TypeOf((*ServiceTableFormer)(nil)).Elem()
	ServiceFormDepValue(v, former, &queryList, &countList)
	return queryList, countList
}

func ServiceFormDepValue(v reflect.Value, former reflect.Type, queryList *[]ServiceTableFormer, countList *[]ServiceTableFormer) {
	for i := 0; i < v.NumField(); i++ {
		f := v.Field(i)
		if f.IsZero() {
			continue
		}
		if f.Type().Implements(former) {
			former := f.Interface().(ServiceTableFormer)
			*queryList = append(*queryList, former)
			if former.CountQuery() {
				*countList = append(*countList, former)
			}
			continue
		}
		if f.Type().Kind() == reflect.Struct {
			ServiceFormDepValue(f, former, queryList, countList)
		}
	}
}

type ServiceQueryOps struct {
}

type ServiceTableCreateTimeEQForm struct {
	CreateTimeEQ *time.Time `form:"CreateTimeEQ" json:"CreateTimeEQ"`
}

func (f ServiceTableCreateTimeEQForm) Query(q *ServiceQuery) {
	if f.CreateTimeEQ != nil {
		q.Where(service.CreateTimeEQ(*f.CreateTimeEQ))
	}
}
func (f ServiceTableCreateTimeEQForm) CountQuery() bool {
	return true
}

type ServiceTableCreateTimeNEQForm struct {
	CreateTimeNEQ *time.Time `form:"CreateTimeNEQ" json:"CreateTimeNEQ"`
}

func (f ServiceTableCreateTimeNEQForm) Query(q *ServiceQuery) {
	if f.CreateTimeNEQ != nil {
		q.Where(service.CreateTimeNEQ(*f.CreateTimeNEQ))
	}
}
func (f ServiceTableCreateTimeNEQForm) CountQuery() bool {
	return true
}

type ServiceTableCreateTimeInForm struct {
	CreateTimeIn *[]time.Time `form:"CreateTimeIn" json:"CreateTimeIn"`
}

func (f ServiceTableCreateTimeInForm) Query(q *ServiceQuery) {
	if f.CreateTimeIn != nil {
		q.Where(service.CreateTimeIn(*f.CreateTimeIn...))
	}
}
func (f ServiceTableCreateTimeInForm) CountQuery() bool {
	return true
}

type ServiceTableCreateTimeNotInForm struct {
	CreateTimeNotIn *[]time.Time `form:"CreateTimeNotIn" json:"CreateTimeNotIn"`
}

func (f ServiceTableCreateTimeNotInForm) Query(q *ServiceQuery) {
	if f.CreateTimeNotIn != nil {
		q.Where(service.CreateTimeNotIn(*f.CreateTimeNotIn...))
	}
}
func (f ServiceTableCreateTimeNotInForm) CountQuery() bool {
	return true
}

type ServiceTableCreateTimeGTForm struct {
	CreateTimeGT *time.Time `form:"CreateTimeGT" json:"CreateTimeGT"`
}

func (f ServiceTableCreateTimeGTForm) Query(q *ServiceQuery) {
	if f.CreateTimeGT != nil {
		q.Where(service.CreateTimeGT(*f.CreateTimeGT))
	}
}
func (f ServiceTableCreateTimeGTForm) CountQuery() bool {
	return true
}

type ServiceTableCreateTimeGTEForm struct {
	CreateTimeGTE *time.Time `form:"CreateTimeGTE" json:"CreateTimeGTE"`
}

func (f ServiceTableCreateTimeGTEForm) Query(q *ServiceQuery) {
	if f.CreateTimeGTE != nil {
		q.Where(service.CreateTimeGTE(*f.CreateTimeGTE))
	}
}
func (f ServiceTableCreateTimeGTEForm) CountQuery() bool {
	return true
}

type ServiceTableCreateTimeLTForm struct {
	CreateTimeLT *time.Time `form:"CreateTimeLT" json:"CreateTimeLT"`
}

func (f ServiceTableCreateTimeLTForm) Query(q *ServiceQuery) {
	if f.CreateTimeLT != nil {
		q.Where(service.CreateTimeLT(*f.CreateTimeLT))
	}
}
func (f ServiceTableCreateTimeLTForm) CountQuery() bool {
	return true
}

type ServiceTableCreateTimeLTEForm struct {
	CreateTimeLTE *time.Time `form:"CreateTimeLTE" json:"CreateTimeLTE"`
}

func (f ServiceTableCreateTimeLTEForm) Query(q *ServiceQuery) {
	if f.CreateTimeLTE != nil {
		q.Where(service.CreateTimeLTE(*f.CreateTimeLTE))
	}
}
func (f ServiceTableCreateTimeLTEForm) CountQuery() bool {
	return true
}

type ServiceTableUpdateTimeEQForm struct {
	UpdateTimeEQ *time.Time `form:"UpdateTimeEQ" json:"UpdateTimeEQ"`
}

func (f ServiceTableUpdateTimeEQForm) Query(q *ServiceQuery) {
	if f.UpdateTimeEQ != nil {
		q.Where(service.UpdateTimeEQ(*f.UpdateTimeEQ))
	}
}
func (f ServiceTableUpdateTimeEQForm) CountQuery() bool {
	return true
}

type ServiceTableUpdateTimeNEQForm struct {
	UpdateTimeNEQ *time.Time `form:"UpdateTimeNEQ" json:"UpdateTimeNEQ"`
}

func (f ServiceTableUpdateTimeNEQForm) Query(q *ServiceQuery) {
	if f.UpdateTimeNEQ != nil {
		q.Where(service.UpdateTimeNEQ(*f.UpdateTimeNEQ))
	}
}
func (f ServiceTableUpdateTimeNEQForm) CountQuery() bool {
	return true
}

type ServiceTableUpdateTimeInForm struct {
	UpdateTimeIn *[]time.Time `form:"UpdateTimeIn" json:"UpdateTimeIn"`
}

func (f ServiceTableUpdateTimeInForm) Query(q *ServiceQuery) {
	if f.UpdateTimeIn != nil {
		q.Where(service.UpdateTimeIn(*f.UpdateTimeIn...))
	}
}
func (f ServiceTableUpdateTimeInForm) CountQuery() bool {
	return true
}

type ServiceTableUpdateTimeNotInForm struct {
	UpdateTimeNotIn *[]time.Time `form:"UpdateTimeNotIn" json:"UpdateTimeNotIn"`
}

func (f ServiceTableUpdateTimeNotInForm) Query(q *ServiceQuery) {
	if f.UpdateTimeNotIn != nil {
		q.Where(service.UpdateTimeNotIn(*f.UpdateTimeNotIn...))
	}
}
func (f ServiceTableUpdateTimeNotInForm) CountQuery() bool {
	return true
}

type ServiceTableUpdateTimeGTForm struct {
	UpdateTimeGT *time.Time `form:"UpdateTimeGT" json:"UpdateTimeGT"`
}

func (f ServiceTableUpdateTimeGTForm) Query(q *ServiceQuery) {
	if f.UpdateTimeGT != nil {
		q.Where(service.UpdateTimeGT(*f.UpdateTimeGT))
	}
}
func (f ServiceTableUpdateTimeGTForm) CountQuery() bool {
	return true
}

type ServiceTableUpdateTimeGTEForm struct {
	UpdateTimeGTE *time.Time `form:"UpdateTimeGTE" json:"UpdateTimeGTE"`
}

func (f ServiceTableUpdateTimeGTEForm) Query(q *ServiceQuery) {
	if f.UpdateTimeGTE != nil {
		q.Where(service.UpdateTimeGTE(*f.UpdateTimeGTE))
	}
}
func (f ServiceTableUpdateTimeGTEForm) CountQuery() bool {
	return true
}

type ServiceTableUpdateTimeLTForm struct {
	UpdateTimeLT *time.Time `form:"UpdateTimeLT" json:"UpdateTimeLT"`
}

func (f ServiceTableUpdateTimeLTForm) Query(q *ServiceQuery) {
	if f.UpdateTimeLT != nil {
		q.Where(service.UpdateTimeLT(*f.UpdateTimeLT))
	}
}
func (f ServiceTableUpdateTimeLTForm) CountQuery() bool {
	return true
}

type ServiceTableUpdateTimeLTEForm struct {
	UpdateTimeLTE *time.Time `form:"UpdateTimeLTE" json:"UpdateTimeLTE"`
}

func (f ServiceTableUpdateTimeLTEForm) Query(q *ServiceQuery) {
	if f.UpdateTimeLTE != nil {
		q.Where(service.UpdateTimeLTE(*f.UpdateTimeLTE))
	}
}
func (f ServiceTableUpdateTimeLTEForm) CountQuery() bool {
	return true
}

type ServiceTableNameEQForm struct {
	NameEQ *string `form:"NameEQ" json:"NameEQ"`
}

func (f ServiceTableNameEQForm) Query(q *ServiceQuery) {
	if f.NameEQ != nil {
		q.Where(service.NameEQ(*f.NameEQ))
	}
}
func (f ServiceTableNameEQForm) CountQuery() bool {
	return true
}

type ServiceTableNameNEQForm struct {
	NameNEQ *string `form:"NameNEQ" json:"NameNEQ"`
}

func (f ServiceTableNameNEQForm) Query(q *ServiceQuery) {
	if f.NameNEQ != nil {
		q.Where(service.NameNEQ(*f.NameNEQ))
	}
}
func (f ServiceTableNameNEQForm) CountQuery() bool {
	return true
}

type ServiceTableNameInForm struct {
	NameIn *[]string `form:"NameIn" json:"NameIn"`
}

func (f ServiceTableNameInForm) Query(q *ServiceQuery) {
	if f.NameIn != nil {
		q.Where(service.NameIn(*f.NameIn...))
	}
}
func (f ServiceTableNameInForm) CountQuery() bool {
	return true
}

type ServiceTableNameNotInForm struct {
	NameNotIn *[]string `form:"NameNotIn" json:"NameNotIn"`
}

func (f ServiceTableNameNotInForm) Query(q *ServiceQuery) {
	if f.NameNotIn != nil {
		q.Where(service.NameNotIn(*f.NameNotIn...))
	}
}
func (f ServiceTableNameNotInForm) CountQuery() bool {
	return true
}

type ServiceTableNameGTForm struct {
	NameGT *string `form:"NameGT" json:"NameGT"`
}

func (f ServiceTableNameGTForm) Query(q *ServiceQuery) {
	if f.NameGT != nil {
		q.Where(service.NameGT(*f.NameGT))
	}
}
func (f ServiceTableNameGTForm) CountQuery() bool {
	return true
}

type ServiceTableNameGTEForm struct {
	NameGTE *string `form:"NameGTE" json:"NameGTE"`
}

func (f ServiceTableNameGTEForm) Query(q *ServiceQuery) {
	if f.NameGTE != nil {
		q.Where(service.NameGTE(*f.NameGTE))
	}
}
func (f ServiceTableNameGTEForm) CountQuery() bool {
	return true
}

type ServiceTableNameLTForm struct {
	NameLT *string `form:"NameLT" json:"NameLT"`
}

func (f ServiceTableNameLTForm) Query(q *ServiceQuery) {
	if f.NameLT != nil {
		q.Where(service.NameLT(*f.NameLT))
	}
}
func (f ServiceTableNameLTForm) CountQuery() bool {
	return true
}

type ServiceTableNameLTEForm struct {
	NameLTE *string `form:"NameLTE" json:"NameLTE"`
}

func (f ServiceTableNameLTEForm) Query(q *ServiceQuery) {
	if f.NameLTE != nil {
		q.Where(service.NameLTE(*f.NameLTE))
	}
}
func (f ServiceTableNameLTEForm) CountQuery() bool {
	return true
}

type ServiceTableNameContainsForm struct {
	NameContains *string `form:"NameContains" json:"NameContains"`
}

func (f ServiceTableNameContainsForm) Query(q *ServiceQuery) {
	if f.NameContains != nil {
		q.Where(service.NameContains(*f.NameContains))
	}
}
func (f ServiceTableNameContainsForm) CountQuery() bool {
	return true
}

type ServiceTableNameHasPrefixForm struct {
	NameHasPrefix *string `form:"NameHasPrefix" json:"NameHasPrefix"`
}

func (f ServiceTableNameHasPrefixForm) Query(q *ServiceQuery) {
	if f.NameHasPrefix != nil {
		q.Where(service.NameHasPrefix(*f.NameHasPrefix))
	}
}
func (f ServiceTableNameHasPrefixForm) CountQuery() bool {
	return true
}

type ServiceTableNameHasSuffixForm struct {
	NameHasSuffix *string `form:"NameHasSuffix" json:"NameHasSuffix"`
}

func (f ServiceTableNameHasSuffixForm) Query(q *ServiceQuery) {
	if f.NameHasSuffix != nil {
		q.Where(service.NameHasSuffix(*f.NameHasSuffix))
	}
}
func (f ServiceTableNameHasSuffixForm) CountQuery() bool {
	return true
}

type ServiceTableNameEqualFoldForm struct {
	NameEqualFold *string `form:"NameEqualFold" json:"NameEqualFold"`
}

func (f ServiceTableNameEqualFoldForm) Query(q *ServiceQuery) {
	if f.NameEqualFold != nil {
		q.Where(service.NameEqualFold(*f.NameEqualFold))
	}
}
func (f ServiceTableNameEqualFoldForm) CountQuery() bool {
	return true
}

type ServiceTableNameContainsFoldForm struct {
	NameContainsFold *string `form:"NameContainsFold" json:"NameContainsFold"`
}

func (f ServiceTableNameContainsFoldForm) Query(q *ServiceQuery) {
	if f.NameContainsFold != nil {
		q.Where(service.NameContainsFold(*f.NameContainsFold))
	}
}
func (f ServiceTableNameContainsFoldForm) CountQuery() bool {
	return true
}

type ServiceTableAnameEQForm struct {
	AnameEQ *string `form:"AnameEQ" json:"AnameEQ"`
}

func (f ServiceTableAnameEQForm) Query(q *ServiceQuery) {
	if f.AnameEQ != nil {
		q.Where(service.AnameEQ(*f.AnameEQ))
	}
}
func (f ServiceTableAnameEQForm) CountQuery() bool {
	return true
}

type ServiceTableAnameNEQForm struct {
	AnameNEQ *string `form:"AnameNEQ" json:"AnameNEQ"`
}

func (f ServiceTableAnameNEQForm) Query(q *ServiceQuery) {
	if f.AnameNEQ != nil {
		q.Where(service.AnameNEQ(*f.AnameNEQ))
	}
}
func (f ServiceTableAnameNEQForm) CountQuery() bool {
	return true
}

type ServiceTableAnameInForm struct {
	AnameIn *[]string `form:"AnameIn" json:"AnameIn"`
}

func (f ServiceTableAnameInForm) Query(q *ServiceQuery) {
	if f.AnameIn != nil {
		q.Where(service.AnameIn(*f.AnameIn...))
	}
}
func (f ServiceTableAnameInForm) CountQuery() bool {
	return true
}

type ServiceTableAnameNotInForm struct {
	AnameNotIn *[]string `form:"AnameNotIn" json:"AnameNotIn"`
}

func (f ServiceTableAnameNotInForm) Query(q *ServiceQuery) {
	if f.AnameNotIn != nil {
		q.Where(service.AnameNotIn(*f.AnameNotIn...))
	}
}
func (f ServiceTableAnameNotInForm) CountQuery() bool {
	return true
}

type ServiceTableAnameGTForm struct {
	AnameGT *string `form:"AnameGT" json:"AnameGT"`
}

func (f ServiceTableAnameGTForm) Query(q *ServiceQuery) {
	if f.AnameGT != nil {
		q.Where(service.AnameGT(*f.AnameGT))
	}
}
func (f ServiceTableAnameGTForm) CountQuery() bool {
	return true
}

type ServiceTableAnameGTEForm struct {
	AnameGTE *string `form:"AnameGTE" json:"AnameGTE"`
}

func (f ServiceTableAnameGTEForm) Query(q *ServiceQuery) {
	if f.AnameGTE != nil {
		q.Where(service.AnameGTE(*f.AnameGTE))
	}
}
func (f ServiceTableAnameGTEForm) CountQuery() bool {
	return true
}

type ServiceTableAnameLTForm struct {
	AnameLT *string `form:"AnameLT" json:"AnameLT"`
}

func (f ServiceTableAnameLTForm) Query(q *ServiceQuery) {
	if f.AnameLT != nil {
		q.Where(service.AnameLT(*f.AnameLT))
	}
}
func (f ServiceTableAnameLTForm) CountQuery() bool {
	return true
}

type ServiceTableAnameLTEForm struct {
	AnameLTE *string `form:"AnameLTE" json:"AnameLTE"`
}

func (f ServiceTableAnameLTEForm) Query(q *ServiceQuery) {
	if f.AnameLTE != nil {
		q.Where(service.AnameLTE(*f.AnameLTE))
	}
}
func (f ServiceTableAnameLTEForm) CountQuery() bool {
	return true
}

type ServiceTableAnameContainsForm struct {
	AnameContains *string `form:"AnameContains" json:"AnameContains"`
}

func (f ServiceTableAnameContainsForm) Query(q *ServiceQuery) {
	if f.AnameContains != nil {
		q.Where(service.AnameContains(*f.AnameContains))
	}
}
func (f ServiceTableAnameContainsForm) CountQuery() bool {
	return true
}

type ServiceTableAnameHasPrefixForm struct {
	AnameHasPrefix *string `form:"AnameHasPrefix" json:"AnameHasPrefix"`
}

func (f ServiceTableAnameHasPrefixForm) Query(q *ServiceQuery) {
	if f.AnameHasPrefix != nil {
		q.Where(service.AnameHasPrefix(*f.AnameHasPrefix))
	}
}
func (f ServiceTableAnameHasPrefixForm) CountQuery() bool {
	return true
}

type ServiceTableAnameHasSuffixForm struct {
	AnameHasSuffix *string `form:"AnameHasSuffix" json:"AnameHasSuffix"`
}

func (f ServiceTableAnameHasSuffixForm) Query(q *ServiceQuery) {
	if f.AnameHasSuffix != nil {
		q.Where(service.AnameHasSuffix(*f.AnameHasSuffix))
	}
}
func (f ServiceTableAnameHasSuffixForm) CountQuery() bool {
	return true
}

type ServiceTableAnameEqualFoldForm struct {
	AnameEqualFold *string `form:"AnameEqualFold" json:"AnameEqualFold"`
}

func (f ServiceTableAnameEqualFoldForm) Query(q *ServiceQuery) {
	if f.AnameEqualFold != nil {
		q.Where(service.AnameEqualFold(*f.AnameEqualFold))
	}
}
func (f ServiceTableAnameEqualFoldForm) CountQuery() bool {
	return true
}

type ServiceTableAnameContainsFoldForm struct {
	AnameContainsFold *string `form:"AnameContainsFold" json:"AnameContainsFold"`
}

func (f ServiceTableAnameContainsFoldForm) Query(q *ServiceQuery) {
	if f.AnameContainsFold != nil {
		q.Where(service.AnameContainsFold(*f.AnameContainsFold))
	}
}
func (f ServiceTableAnameContainsFoldForm) CountQuery() bool {
	return true
}

type ServiceTableCommentsEQForm struct {
	CommentsEQ *string `form:"CommentsEQ" json:"CommentsEQ"`
}

func (f ServiceTableCommentsEQForm) Query(q *ServiceQuery) {
	if f.CommentsEQ != nil {
		q.Where(service.CommentsEQ(*f.CommentsEQ))
	}
}
func (f ServiceTableCommentsEQForm) CountQuery() bool {
	return true
}

type ServiceTableCommentsNEQForm struct {
	CommentsNEQ *string `form:"CommentsNEQ" json:"CommentsNEQ"`
}

func (f ServiceTableCommentsNEQForm) Query(q *ServiceQuery) {
	if f.CommentsNEQ != nil {
		q.Where(service.CommentsNEQ(*f.CommentsNEQ))
	}
}
func (f ServiceTableCommentsNEQForm) CountQuery() bool {
	return true
}

type ServiceTableCommentsInForm struct {
	CommentsIn *[]string `form:"CommentsIn" json:"CommentsIn"`
}

func (f ServiceTableCommentsInForm) Query(q *ServiceQuery) {
	if f.CommentsIn != nil {
		q.Where(service.CommentsIn(*f.CommentsIn...))
	}
}
func (f ServiceTableCommentsInForm) CountQuery() bool {
	return true
}

type ServiceTableCommentsNotInForm struct {
	CommentsNotIn *[]string `form:"CommentsNotIn" json:"CommentsNotIn"`
}

func (f ServiceTableCommentsNotInForm) Query(q *ServiceQuery) {
	if f.CommentsNotIn != nil {
		q.Where(service.CommentsNotIn(*f.CommentsNotIn...))
	}
}
func (f ServiceTableCommentsNotInForm) CountQuery() bool {
	return true
}

type ServiceTableCommentsGTForm struct {
	CommentsGT *string `form:"CommentsGT" json:"CommentsGT"`
}

func (f ServiceTableCommentsGTForm) Query(q *ServiceQuery) {
	if f.CommentsGT != nil {
		q.Where(service.CommentsGT(*f.CommentsGT))
	}
}
func (f ServiceTableCommentsGTForm) CountQuery() bool {
	return true
}

type ServiceTableCommentsGTEForm struct {
	CommentsGTE *string `form:"CommentsGTE" json:"CommentsGTE"`
}

func (f ServiceTableCommentsGTEForm) Query(q *ServiceQuery) {
	if f.CommentsGTE != nil {
		q.Where(service.CommentsGTE(*f.CommentsGTE))
	}
}
func (f ServiceTableCommentsGTEForm) CountQuery() bool {
	return true
}

type ServiceTableCommentsLTForm struct {
	CommentsLT *string `form:"CommentsLT" json:"CommentsLT"`
}

func (f ServiceTableCommentsLTForm) Query(q *ServiceQuery) {
	if f.CommentsLT != nil {
		q.Where(service.CommentsLT(*f.CommentsLT))
	}
}
func (f ServiceTableCommentsLTForm) CountQuery() bool {
	return true
}

type ServiceTableCommentsLTEForm struct {
	CommentsLTE *string `form:"CommentsLTE" json:"CommentsLTE"`
}

func (f ServiceTableCommentsLTEForm) Query(q *ServiceQuery) {
	if f.CommentsLTE != nil {
		q.Where(service.CommentsLTE(*f.CommentsLTE))
	}
}
func (f ServiceTableCommentsLTEForm) CountQuery() bool {
	return true
}

type ServiceTableCommentsContainsForm struct {
	CommentsContains *string `form:"CommentsContains" json:"CommentsContains"`
}

func (f ServiceTableCommentsContainsForm) Query(q *ServiceQuery) {
	if f.CommentsContains != nil {
		q.Where(service.CommentsContains(*f.CommentsContains))
	}
}
func (f ServiceTableCommentsContainsForm) CountQuery() bool {
	return true
}

type ServiceTableCommentsHasPrefixForm struct {
	CommentsHasPrefix *string `form:"CommentsHasPrefix" json:"CommentsHasPrefix"`
}

func (f ServiceTableCommentsHasPrefixForm) Query(q *ServiceQuery) {
	if f.CommentsHasPrefix != nil {
		q.Where(service.CommentsHasPrefix(*f.CommentsHasPrefix))
	}
}
func (f ServiceTableCommentsHasPrefixForm) CountQuery() bool {
	return true
}

type ServiceTableCommentsHasSuffixForm struct {
	CommentsHasSuffix *string `form:"CommentsHasSuffix" json:"CommentsHasSuffix"`
}

func (f ServiceTableCommentsHasSuffixForm) Query(q *ServiceQuery) {
	if f.CommentsHasSuffix != nil {
		q.Where(service.CommentsHasSuffix(*f.CommentsHasSuffix))
	}
}
func (f ServiceTableCommentsHasSuffixForm) CountQuery() bool {
	return true
}

type ServiceTableCommentsEqualFoldForm struct {
	CommentsEqualFold *string `form:"CommentsEqualFold" json:"CommentsEqualFold"`
}

func (f ServiceTableCommentsEqualFoldForm) Query(q *ServiceQuery) {
	if f.CommentsEqualFold != nil {
		q.Where(service.CommentsEqualFold(*f.CommentsEqualFold))
	}
}
func (f ServiceTableCommentsEqualFoldForm) CountQuery() bool {
	return true
}

type ServiceTableCommentsContainsFoldForm struct {
	CommentsContainsFold *string `form:"CommentsContainsFold" json:"CommentsContainsFold"`
}

func (f ServiceTableCommentsContainsFoldForm) Query(q *ServiceQuery) {
	if f.CommentsContainsFold != nil {
		q.Where(service.CommentsContainsFold(*f.CommentsContainsFold))
	}
}
func (f ServiceTableCommentsContainsFoldForm) CountQuery() bool {
	return true
}

type ServiceTableClassesEQForm struct {
	ClassesEQ *service.Classes `form:"ClassesEQ" json:"ClassesEQ"`
}

func (f ServiceTableClassesEQForm) Query(q *ServiceQuery) {
	if f.ClassesEQ != nil {
		q.Where(service.ClassesEQ(*f.ClassesEQ))
	}
}
func (f ServiceTableClassesEQForm) CountQuery() bool {
	return true
}

type ServiceTableClassesNEQForm struct {
	ClassesNEQ *service.Classes `form:"ClassesNEQ" json:"ClassesNEQ"`
}

func (f ServiceTableClassesNEQForm) Query(q *ServiceQuery) {
	if f.ClassesNEQ != nil {
		q.Where(service.ClassesNEQ(*f.ClassesNEQ))
	}
}
func (f ServiceTableClassesNEQForm) CountQuery() bool {
	return true
}

type ServiceTableClassesInForm struct {
	ClassesIn *[]service.Classes `form:"ClassesIn" json:"ClassesIn"`
}

func (f ServiceTableClassesInForm) Query(q *ServiceQuery) {
	if f.ClassesIn != nil {
		q.Where(service.ClassesIn(*f.ClassesIn...))
	}
}
func (f ServiceTableClassesInForm) CountQuery() bool {
	return true
}

type ServiceTableClassesNotInForm struct {
	ClassesNotIn *[]service.Classes `form:"ClassesNotIn" json:"ClassesNotIn"`
}

func (f ServiceTableClassesNotInForm) Query(q *ServiceQuery) {
	if f.ClassesNotIn != nil {
		q.Where(service.ClassesNotIn(*f.ClassesNotIn...))
	}
}
func (f ServiceTableClassesNotInForm) CountQuery() bool {
	return true
}

type ServiceTableLangEQForm struct {
	LangEQ *string `form:"LangEQ" json:"LangEQ"`
}

func (f ServiceTableLangEQForm) Query(q *ServiceQuery) {
	if f.LangEQ != nil {
		q.Where(service.LangEQ(*f.LangEQ))
	}
}
func (f ServiceTableLangEQForm) CountQuery() bool {
	return true
}

type ServiceTableLangNEQForm struct {
	LangNEQ *string `form:"LangNEQ" json:"LangNEQ"`
}

func (f ServiceTableLangNEQForm) Query(q *ServiceQuery) {
	if f.LangNEQ != nil {
		q.Where(service.LangNEQ(*f.LangNEQ))
	}
}
func (f ServiceTableLangNEQForm) CountQuery() bool {
	return true
}

type ServiceTableLangInForm struct {
	LangIn *[]string `form:"LangIn" json:"LangIn"`
}

func (f ServiceTableLangInForm) Query(q *ServiceQuery) {
	if f.LangIn != nil {
		q.Where(service.LangIn(*f.LangIn...))
	}
}
func (f ServiceTableLangInForm) CountQuery() bool {
	return true
}

type ServiceTableLangNotInForm struct {
	LangNotIn *[]string `form:"LangNotIn" json:"LangNotIn"`
}

func (f ServiceTableLangNotInForm) Query(q *ServiceQuery) {
	if f.LangNotIn != nil {
		q.Where(service.LangNotIn(*f.LangNotIn...))
	}
}
func (f ServiceTableLangNotInForm) CountQuery() bool {
	return true
}

type ServiceTableLangGTForm struct {
	LangGT *string `form:"LangGT" json:"LangGT"`
}

func (f ServiceTableLangGTForm) Query(q *ServiceQuery) {
	if f.LangGT != nil {
		q.Where(service.LangGT(*f.LangGT))
	}
}
func (f ServiceTableLangGTForm) CountQuery() bool {
	return true
}

type ServiceTableLangGTEForm struct {
	LangGTE *string `form:"LangGTE" json:"LangGTE"`
}

func (f ServiceTableLangGTEForm) Query(q *ServiceQuery) {
	if f.LangGTE != nil {
		q.Where(service.LangGTE(*f.LangGTE))
	}
}
func (f ServiceTableLangGTEForm) CountQuery() bool {
	return true
}

type ServiceTableLangLTForm struct {
	LangLT *string `form:"LangLT" json:"LangLT"`
}

func (f ServiceTableLangLTForm) Query(q *ServiceQuery) {
	if f.LangLT != nil {
		q.Where(service.LangLT(*f.LangLT))
	}
}
func (f ServiceTableLangLTForm) CountQuery() bool {
	return true
}

type ServiceTableLangLTEForm struct {
	LangLTE *string `form:"LangLTE" json:"LangLTE"`
}

func (f ServiceTableLangLTEForm) Query(q *ServiceQuery) {
	if f.LangLTE != nil {
		q.Where(service.LangLTE(*f.LangLTE))
	}
}
func (f ServiceTableLangLTEForm) CountQuery() bool {
	return true
}

type ServiceTableLangContainsForm struct {
	LangContains *string `form:"LangContains" json:"LangContains"`
}

func (f ServiceTableLangContainsForm) Query(q *ServiceQuery) {
	if f.LangContains != nil {
		q.Where(service.LangContains(*f.LangContains))
	}
}
func (f ServiceTableLangContainsForm) CountQuery() bool {
	return true
}

type ServiceTableLangHasPrefixForm struct {
	LangHasPrefix *string `form:"LangHasPrefix" json:"LangHasPrefix"`
}

func (f ServiceTableLangHasPrefixForm) Query(q *ServiceQuery) {
	if f.LangHasPrefix != nil {
		q.Where(service.LangHasPrefix(*f.LangHasPrefix))
	}
}
func (f ServiceTableLangHasPrefixForm) CountQuery() bool {
	return true
}

type ServiceTableLangHasSuffixForm struct {
	LangHasSuffix *string `form:"LangHasSuffix" json:"LangHasSuffix"`
}

func (f ServiceTableLangHasSuffixForm) Query(q *ServiceQuery) {
	if f.LangHasSuffix != nil {
		q.Where(service.LangHasSuffix(*f.LangHasSuffix))
	}
}
func (f ServiceTableLangHasSuffixForm) CountQuery() bool {
	return true
}

type ServiceTableLangEqualFoldForm struct {
	LangEqualFold *string `form:"LangEqualFold" json:"LangEqualFold"`
}

func (f ServiceTableLangEqualFoldForm) Query(q *ServiceQuery) {
	if f.LangEqualFold != nil {
		q.Where(service.LangEqualFold(*f.LangEqualFold))
	}
}
func (f ServiceTableLangEqualFoldForm) CountQuery() bool {
	return true
}

type ServiceTableLangContainsFoldForm struct {
	LangContainsFold *string `form:"LangContainsFold" json:"LangContainsFold"`
}

func (f ServiceTableLangContainsFoldForm) Query(q *ServiceQuery) {
	if f.LangContainsFold != nil {
		q.Where(service.LangContainsFold(*f.LangContainsFold))
	}
}
func (f ServiceTableLangContainsFoldForm) CountQuery() bool {
	return true
}

type ServiceTableGitEQForm struct {
	GitEQ *string `form:"GitEQ" json:"GitEQ"`
}

func (f ServiceTableGitEQForm) Query(q *ServiceQuery) {
	if f.GitEQ != nil {
		q.Where(service.GitEQ(*f.GitEQ))
	}
}
func (f ServiceTableGitEQForm) CountQuery() bool {
	return true
}

type ServiceTableGitNEQForm struct {
	GitNEQ *string `form:"GitNEQ" json:"GitNEQ"`
}

func (f ServiceTableGitNEQForm) Query(q *ServiceQuery) {
	if f.GitNEQ != nil {
		q.Where(service.GitNEQ(*f.GitNEQ))
	}
}
func (f ServiceTableGitNEQForm) CountQuery() bool {
	return true
}

type ServiceTableGitInForm struct {
	GitIn *[]string `form:"GitIn" json:"GitIn"`
}

func (f ServiceTableGitInForm) Query(q *ServiceQuery) {
	if f.GitIn != nil {
		q.Where(service.GitIn(*f.GitIn...))
	}
}
func (f ServiceTableGitInForm) CountQuery() bool {
	return true
}

type ServiceTableGitNotInForm struct {
	GitNotIn *[]string `form:"GitNotIn" json:"GitNotIn"`
}

func (f ServiceTableGitNotInForm) Query(q *ServiceQuery) {
	if f.GitNotIn != nil {
		q.Where(service.GitNotIn(*f.GitNotIn...))
	}
}
func (f ServiceTableGitNotInForm) CountQuery() bool {
	return true
}

type ServiceTableGitGTForm struct {
	GitGT *string `form:"GitGT" json:"GitGT"`
}

func (f ServiceTableGitGTForm) Query(q *ServiceQuery) {
	if f.GitGT != nil {
		q.Where(service.GitGT(*f.GitGT))
	}
}
func (f ServiceTableGitGTForm) CountQuery() bool {
	return true
}

type ServiceTableGitGTEForm struct {
	GitGTE *string `form:"GitGTE" json:"GitGTE"`
}

func (f ServiceTableGitGTEForm) Query(q *ServiceQuery) {
	if f.GitGTE != nil {
		q.Where(service.GitGTE(*f.GitGTE))
	}
}
func (f ServiceTableGitGTEForm) CountQuery() bool {
	return true
}

type ServiceTableGitLTForm struct {
	GitLT *string `form:"GitLT" json:"GitLT"`
}

func (f ServiceTableGitLTForm) Query(q *ServiceQuery) {
	if f.GitLT != nil {
		q.Where(service.GitLT(*f.GitLT))
	}
}
func (f ServiceTableGitLTForm) CountQuery() bool {
	return true
}

type ServiceTableGitLTEForm struct {
	GitLTE *string `form:"GitLTE" json:"GitLTE"`
}

func (f ServiceTableGitLTEForm) Query(q *ServiceQuery) {
	if f.GitLTE != nil {
		q.Where(service.GitLTE(*f.GitLTE))
	}
}
func (f ServiceTableGitLTEForm) CountQuery() bool {
	return true
}

type ServiceTableGitContainsForm struct {
	GitContains *string `form:"GitContains" json:"GitContains"`
}

func (f ServiceTableGitContainsForm) Query(q *ServiceQuery) {
	if f.GitContains != nil {
		q.Where(service.GitContains(*f.GitContains))
	}
}
func (f ServiceTableGitContainsForm) CountQuery() bool {
	return true
}

type ServiceTableGitHasPrefixForm struct {
	GitHasPrefix *string `form:"GitHasPrefix" json:"GitHasPrefix"`
}

func (f ServiceTableGitHasPrefixForm) Query(q *ServiceQuery) {
	if f.GitHasPrefix != nil {
		q.Where(service.GitHasPrefix(*f.GitHasPrefix))
	}
}
func (f ServiceTableGitHasPrefixForm) CountQuery() bool {
	return true
}

type ServiceTableGitHasSuffixForm struct {
	GitHasSuffix *string `form:"GitHasSuffix" json:"GitHasSuffix"`
}

func (f ServiceTableGitHasSuffixForm) Query(q *ServiceQuery) {
	if f.GitHasSuffix != nil {
		q.Where(service.GitHasSuffix(*f.GitHasSuffix))
	}
}
func (f ServiceTableGitHasSuffixForm) CountQuery() bool {
	return true
}

type ServiceTableGitEqualFoldForm struct {
	GitEqualFold *string `form:"GitEqualFold" json:"GitEqualFold"`
}

func (f ServiceTableGitEqualFoldForm) Query(q *ServiceQuery) {
	if f.GitEqualFold != nil {
		q.Where(service.GitEqualFold(*f.GitEqualFold))
	}
}
func (f ServiceTableGitEqualFoldForm) CountQuery() bool {
	return true
}

type ServiceTableGitContainsFoldForm struct {
	GitContainsFold *string `form:"GitContainsFold" json:"GitContainsFold"`
}

func (f ServiceTableGitContainsFoldForm) Query(q *ServiceQuery) {
	if f.GitContainsFold != nil {
		q.Where(service.GitContainsFold(*f.GitContainsFold))
	}
}
func (f ServiceTableGitContainsFoldForm) CountQuery() bool {
	return true
}

// ServiceGroupBy is the group-by builder for Service entities.
type ServiceGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *ServiceGroupBy) Aggregate(fns ...AggregateFunc) *ServiceGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the group-by query and scans the result into the given value.
func (sgb *ServiceGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := sgb.path(ctx)
	if err != nil {
		return err
	}
	sgb.sql = query
	return sgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sgb *ServiceGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := sgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (sgb *ServiceGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(sgb.fields) > 1 {
		return nil, errors.New("ent: ServiceGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := sgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sgb *ServiceGroupBy) StringsX(ctx context.Context) []string {
	v, err := sgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sgb *ServiceGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{service.Label}
	default:
		err = fmt.Errorf("ent: ServiceGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sgb *ServiceGroupBy) StringX(ctx context.Context) string {
	v, err := sgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (sgb *ServiceGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(sgb.fields) > 1 {
		return nil, errors.New("ent: ServiceGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := sgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sgb *ServiceGroupBy) IntsX(ctx context.Context) []int {
	v, err := sgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sgb *ServiceGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{service.Label}
	default:
		err = fmt.Errorf("ent: ServiceGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sgb *ServiceGroupBy) IntX(ctx context.Context) int {
	v, err := sgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (sgb *ServiceGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(sgb.fields) > 1 {
		return nil, errors.New("ent: ServiceGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := sgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sgb *ServiceGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := sgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sgb *ServiceGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{service.Label}
	default:
		err = fmt.Errorf("ent: ServiceGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sgb *ServiceGroupBy) Float64X(ctx context.Context) float64 {
	v, err := sgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (sgb *ServiceGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(sgb.fields) > 1 {
		return nil, errors.New("ent: ServiceGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := sgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sgb *ServiceGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := sgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sgb *ServiceGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{service.Label}
	default:
		err = fmt.Errorf("ent: ServiceGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sgb *ServiceGroupBy) BoolX(ctx context.Context) bool {
	v, err := sgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sgb *ServiceGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range sgb.fields {
		if !service.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := sgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sgb *ServiceGroupBy) sqlQuery() *sql.Selector {
	selector := sgb.sql.Select()
	aggregation := make([]string, 0, len(sgb.fns))
	for _, fn := range sgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(sgb.fields)+len(sgb.fns))
		for _, f := range sgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(sgb.fields...)...)
}

// ServiceSelect is the builder for selecting fields of Service entities.
type ServiceSelect struct {
	*ServiceQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ss *ServiceSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	ss.sql = ss.ServiceQuery.sqlQuery(ctx)
	return ss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ss *ServiceSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ss *ServiceSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ss.fields) > 1 {
		return nil, errors.New("ent: ServiceSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ss *ServiceSelect) StringsX(ctx context.Context) []string {
	v, err := ss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ss *ServiceSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{service.Label}
	default:
		err = fmt.Errorf("ent: ServiceSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ss *ServiceSelect) StringX(ctx context.Context) string {
	v, err := ss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ss *ServiceSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ss.fields) > 1 {
		return nil, errors.New("ent: ServiceSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ss *ServiceSelect) IntsX(ctx context.Context) []int {
	v, err := ss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ss *ServiceSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{service.Label}
	default:
		err = fmt.Errorf("ent: ServiceSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ss *ServiceSelect) IntX(ctx context.Context) int {
	v, err := ss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ss *ServiceSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ss.fields) > 1 {
		return nil, errors.New("ent: ServiceSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ss *ServiceSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ss *ServiceSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{service.Label}
	default:
		err = fmt.Errorf("ent: ServiceSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ss *ServiceSelect) Float64X(ctx context.Context) float64 {
	v, err := ss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ss *ServiceSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ss.fields) > 1 {
		return nil, errors.New("ent: ServiceSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ss *ServiceSelect) BoolsX(ctx context.Context) []bool {
	v, err := ss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ss *ServiceSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{service.Label}
	default:
		err = fmt.Errorf("ent: ServiceSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ss *ServiceSelect) BoolX(ctx context.Context) bool {
	v, err := ss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ss *ServiceSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ss.sql.Query()
	if err := ss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
