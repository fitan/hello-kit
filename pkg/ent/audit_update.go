// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hello/pkg/ent/audit"
	"hello/pkg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuditUpdate is the builder for updating Audit entities.
type AuditUpdate struct {
	config
	hooks    []Hook
	mutation *AuditMutation
}

// Where appends a list predicates to the AuditUpdate builder.
func (au *AuditUpdate) Where(ps ...predicate.Audit) *AuditUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdateTime sets the "update_time" field.
func (au *AuditUpdate) SetUpdateTime(t time.Time) *AuditUpdate {
	au.mutation.SetUpdateTime(t)
	return au
}

// SetURL sets the "url" field.
func (au *AuditUpdate) SetURL(s string) *AuditUpdate {
	au.mutation.SetURL(s)
	return au
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (au *AuditUpdate) SetNillableURL(s *string) *AuditUpdate {
	if s != nil {
		au.SetURL(*s)
	}
	return au
}

// ClearURL clears the value of the "url" field.
func (au *AuditUpdate) ClearURL() *AuditUpdate {
	au.mutation.ClearURL()
	return au
}

// SetQuery sets the "query" field.
func (au *AuditUpdate) SetQuery(s string) *AuditUpdate {
	au.mutation.SetQuery(s)
	return au
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (au *AuditUpdate) SetNillableQuery(s *string) *AuditUpdate {
	if s != nil {
		au.SetQuery(*s)
	}
	return au
}

// ClearQuery clears the value of the "query" field.
func (au *AuditUpdate) ClearQuery() *AuditUpdate {
	au.mutation.ClearQuery()
	return au
}

// SetMethod sets the "method" field.
func (au *AuditUpdate) SetMethod(s string) *AuditUpdate {
	au.mutation.SetMethod(s)
	return au
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (au *AuditUpdate) SetNillableMethod(s *string) *AuditUpdate {
	if s != nil {
		au.SetMethod(*s)
	}
	return au
}

// ClearMethod clears the value of the "method" field.
func (au *AuditUpdate) ClearMethod() *AuditUpdate {
	au.mutation.ClearMethod()
	return au
}

// SetRequest sets the "request" field.
func (au *AuditUpdate) SetRequest(s string) *AuditUpdate {
	au.mutation.SetRequest(s)
	return au
}

// SetNillableRequest sets the "request" field if the given value is not nil.
func (au *AuditUpdate) SetNillableRequest(s *string) *AuditUpdate {
	if s != nil {
		au.SetRequest(*s)
	}
	return au
}

// ClearRequest clears the value of the "request" field.
func (au *AuditUpdate) ClearRequest() *AuditUpdate {
	au.mutation.ClearRequest()
	return au
}

// SetResponse sets the "response" field.
func (au *AuditUpdate) SetResponse(s string) *AuditUpdate {
	au.mutation.SetResponse(s)
	return au
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (au *AuditUpdate) SetNillableResponse(s *string) *AuditUpdate {
	if s != nil {
		au.SetResponse(*s)
	}
	return au
}

// ClearResponse clears the value of the "response" field.
func (au *AuditUpdate) ClearResponse() *AuditUpdate {
	au.mutation.ClearResponse()
	return au
}

// SetHeader sets the "header" field.
func (au *AuditUpdate) SetHeader(s string) *AuditUpdate {
	au.mutation.SetHeader(s)
	return au
}

// SetNillableHeader sets the "header" field if the given value is not nil.
func (au *AuditUpdate) SetNillableHeader(s *string) *AuditUpdate {
	if s != nil {
		au.SetHeader(*s)
	}
	return au
}

// ClearHeader clears the value of the "header" field.
func (au *AuditUpdate) ClearHeader() *AuditUpdate {
	au.mutation.ClearHeader()
	return au
}

// SetStatusCode sets the "status_code" field.
func (au *AuditUpdate) SetStatusCode(i int) *AuditUpdate {
	au.mutation.ResetStatusCode()
	au.mutation.SetStatusCode(i)
	return au
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (au *AuditUpdate) SetNillableStatusCode(i *int) *AuditUpdate {
	if i != nil {
		au.SetStatusCode(*i)
	}
	return au
}

// AddStatusCode adds i to the "status_code" field.
func (au *AuditUpdate) AddStatusCode(i int) *AuditUpdate {
	au.mutation.AddStatusCode(i)
	return au
}

// ClearStatusCode clears the value of the "status_code" field.
func (au *AuditUpdate) ClearStatusCode() *AuditUpdate {
	au.mutation.ClearStatusCode()
	return au
}

// SetRemoteIP sets the "remote_ip" field.
func (au *AuditUpdate) SetRemoteIP(s string) *AuditUpdate {
	au.mutation.SetRemoteIP(s)
	return au
}

// SetNillableRemoteIP sets the "remote_ip" field if the given value is not nil.
func (au *AuditUpdate) SetNillableRemoteIP(s *string) *AuditUpdate {
	if s != nil {
		au.SetRemoteIP(*s)
	}
	return au
}

// ClearRemoteIP clears the value of the "remote_ip" field.
func (au *AuditUpdate) ClearRemoteIP() *AuditUpdate {
	au.mutation.ClearRemoteIP()
	return au
}

// SetClientIP sets the "client_ip" field.
func (au *AuditUpdate) SetClientIP(s string) *AuditUpdate {
	au.mutation.SetClientIP(s)
	return au
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (au *AuditUpdate) SetNillableClientIP(s *string) *AuditUpdate {
	if s != nil {
		au.SetClientIP(*s)
	}
	return au
}

// ClearClientIP clears the value of the "client_ip" field.
func (au *AuditUpdate) ClearClientIP() *AuditUpdate {
	au.mutation.ClearClientIP()
	return au
}

// SetCostTime sets the "cost_time" field.
func (au *AuditUpdate) SetCostTime(s string) *AuditUpdate {
	au.mutation.SetCostTime(s)
	return au
}

// SetNillableCostTime sets the "cost_time" field if the given value is not nil.
func (au *AuditUpdate) SetNillableCostTime(s *string) *AuditUpdate {
	if s != nil {
		au.SetCostTime(*s)
	}
	return au
}

// ClearCostTime clears the value of the "cost_time" field.
func (au *AuditUpdate) ClearCostTime() *AuditUpdate {
	au.mutation.ClearCostTime()
	return au
}

// Mutation returns the AuditMutation object of the builder.
func (au *AuditUpdate) Mutation() *AuditMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AuditUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuditMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AuditUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AuditUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AuditUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AuditUpdate) defaults() {
	if _, ok := au.mutation.UpdateTime(); !ok {
		v := audit.UpdateDefaultUpdateTime()
		au.mutation.SetUpdateTime(v)
	}
}

func (au *AuditUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   audit.Table,
			Columns: audit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: audit.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: audit.FieldUpdateTime,
		})
	}
	if value, ok := au.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldURL,
		})
	}
	if au.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: audit.FieldURL,
		})
	}
	if value, ok := au.mutation.Query(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldQuery,
		})
	}
	if au.mutation.QueryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: audit.FieldQuery,
		})
	}
	if value, ok := au.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldMethod,
		})
	}
	if au.mutation.MethodCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: audit.FieldMethod,
		})
	}
	if value, ok := au.mutation.Request(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldRequest,
		})
	}
	if au.mutation.RequestCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: audit.FieldRequest,
		})
	}
	if value, ok := au.mutation.Response(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldResponse,
		})
	}
	if au.mutation.ResponseCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: audit.FieldResponse,
		})
	}
	if value, ok := au.mutation.Header(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldHeader,
		})
	}
	if au.mutation.HeaderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: audit.FieldHeader,
		})
	}
	if value, ok := au.mutation.StatusCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: audit.FieldStatusCode,
		})
	}
	if value, ok := au.mutation.AddedStatusCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: audit.FieldStatusCode,
		})
	}
	if au.mutation.StatusCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: audit.FieldStatusCode,
		})
	}
	if value, ok := au.mutation.RemoteIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldRemoteIP,
		})
	}
	if au.mutation.RemoteIPCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: audit.FieldRemoteIP,
		})
	}
	if value, ok := au.mutation.ClientIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldClientIP,
		})
	}
	if au.mutation.ClientIPCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: audit.FieldClientIP,
		})
	}
	if value, ok := au.mutation.CostTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldCostTime,
		})
	}
	if au.mutation.CostTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: audit.FieldCostTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{audit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AuditUpdateOne is the builder for updating a single Audit entity.
type AuditUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuditMutation
}

// SetUpdateTime sets the "update_time" field.
func (auo *AuditUpdateOne) SetUpdateTime(t time.Time) *AuditUpdateOne {
	auo.mutation.SetUpdateTime(t)
	return auo
}

// SetURL sets the "url" field.
func (auo *AuditUpdateOne) SetURL(s string) *AuditUpdateOne {
	auo.mutation.SetURL(s)
	return auo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableURL(s *string) *AuditUpdateOne {
	if s != nil {
		auo.SetURL(*s)
	}
	return auo
}

// ClearURL clears the value of the "url" field.
func (auo *AuditUpdateOne) ClearURL() *AuditUpdateOne {
	auo.mutation.ClearURL()
	return auo
}

// SetQuery sets the "query" field.
func (auo *AuditUpdateOne) SetQuery(s string) *AuditUpdateOne {
	auo.mutation.SetQuery(s)
	return auo
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableQuery(s *string) *AuditUpdateOne {
	if s != nil {
		auo.SetQuery(*s)
	}
	return auo
}

// ClearQuery clears the value of the "query" field.
func (auo *AuditUpdateOne) ClearQuery() *AuditUpdateOne {
	auo.mutation.ClearQuery()
	return auo
}

// SetMethod sets the "method" field.
func (auo *AuditUpdateOne) SetMethod(s string) *AuditUpdateOne {
	auo.mutation.SetMethod(s)
	return auo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableMethod(s *string) *AuditUpdateOne {
	if s != nil {
		auo.SetMethod(*s)
	}
	return auo
}

// ClearMethod clears the value of the "method" field.
func (auo *AuditUpdateOne) ClearMethod() *AuditUpdateOne {
	auo.mutation.ClearMethod()
	return auo
}

// SetRequest sets the "request" field.
func (auo *AuditUpdateOne) SetRequest(s string) *AuditUpdateOne {
	auo.mutation.SetRequest(s)
	return auo
}

// SetNillableRequest sets the "request" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableRequest(s *string) *AuditUpdateOne {
	if s != nil {
		auo.SetRequest(*s)
	}
	return auo
}

// ClearRequest clears the value of the "request" field.
func (auo *AuditUpdateOne) ClearRequest() *AuditUpdateOne {
	auo.mutation.ClearRequest()
	return auo
}

// SetResponse sets the "response" field.
func (auo *AuditUpdateOne) SetResponse(s string) *AuditUpdateOne {
	auo.mutation.SetResponse(s)
	return auo
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableResponse(s *string) *AuditUpdateOne {
	if s != nil {
		auo.SetResponse(*s)
	}
	return auo
}

// ClearResponse clears the value of the "response" field.
func (auo *AuditUpdateOne) ClearResponse() *AuditUpdateOne {
	auo.mutation.ClearResponse()
	return auo
}

// SetHeader sets the "header" field.
func (auo *AuditUpdateOne) SetHeader(s string) *AuditUpdateOne {
	auo.mutation.SetHeader(s)
	return auo
}

// SetNillableHeader sets the "header" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableHeader(s *string) *AuditUpdateOne {
	if s != nil {
		auo.SetHeader(*s)
	}
	return auo
}

// ClearHeader clears the value of the "header" field.
func (auo *AuditUpdateOne) ClearHeader() *AuditUpdateOne {
	auo.mutation.ClearHeader()
	return auo
}

// SetStatusCode sets the "status_code" field.
func (auo *AuditUpdateOne) SetStatusCode(i int) *AuditUpdateOne {
	auo.mutation.ResetStatusCode()
	auo.mutation.SetStatusCode(i)
	return auo
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableStatusCode(i *int) *AuditUpdateOne {
	if i != nil {
		auo.SetStatusCode(*i)
	}
	return auo
}

// AddStatusCode adds i to the "status_code" field.
func (auo *AuditUpdateOne) AddStatusCode(i int) *AuditUpdateOne {
	auo.mutation.AddStatusCode(i)
	return auo
}

// ClearStatusCode clears the value of the "status_code" field.
func (auo *AuditUpdateOne) ClearStatusCode() *AuditUpdateOne {
	auo.mutation.ClearStatusCode()
	return auo
}

// SetRemoteIP sets the "remote_ip" field.
func (auo *AuditUpdateOne) SetRemoteIP(s string) *AuditUpdateOne {
	auo.mutation.SetRemoteIP(s)
	return auo
}

// SetNillableRemoteIP sets the "remote_ip" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableRemoteIP(s *string) *AuditUpdateOne {
	if s != nil {
		auo.SetRemoteIP(*s)
	}
	return auo
}

// ClearRemoteIP clears the value of the "remote_ip" field.
func (auo *AuditUpdateOne) ClearRemoteIP() *AuditUpdateOne {
	auo.mutation.ClearRemoteIP()
	return auo
}

// SetClientIP sets the "client_ip" field.
func (auo *AuditUpdateOne) SetClientIP(s string) *AuditUpdateOne {
	auo.mutation.SetClientIP(s)
	return auo
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableClientIP(s *string) *AuditUpdateOne {
	if s != nil {
		auo.SetClientIP(*s)
	}
	return auo
}

// ClearClientIP clears the value of the "client_ip" field.
func (auo *AuditUpdateOne) ClearClientIP() *AuditUpdateOne {
	auo.mutation.ClearClientIP()
	return auo
}

// SetCostTime sets the "cost_time" field.
func (auo *AuditUpdateOne) SetCostTime(s string) *AuditUpdateOne {
	auo.mutation.SetCostTime(s)
	return auo
}

// SetNillableCostTime sets the "cost_time" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableCostTime(s *string) *AuditUpdateOne {
	if s != nil {
		auo.SetCostTime(*s)
	}
	return auo
}

// ClearCostTime clears the value of the "cost_time" field.
func (auo *AuditUpdateOne) ClearCostTime() *AuditUpdateOne {
	auo.mutation.ClearCostTime()
	return auo
}

// Mutation returns the AuditMutation object of the builder.
func (auo *AuditUpdateOne) Mutation() *AuditMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AuditUpdateOne) Select(field string, fields ...string) *AuditUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Audit entity.
func (auo *AuditUpdateOne) Save(ctx context.Context) (*Audit, error) {
	var (
		err  error
		node *Audit
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuditMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AuditUpdateOne) SaveX(ctx context.Context) *Audit {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AuditUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AuditUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AuditUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdateTime(); !ok {
		v := audit.UpdateDefaultUpdateTime()
		auo.mutation.SetUpdateTime(v)
	}
}

func (auo *AuditUpdateOne) sqlSave(ctx context.Context) (_node *Audit, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   audit.Table,
			Columns: audit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: audit.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Audit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, audit.FieldID)
		for _, f := range fields {
			if !audit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != audit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: audit.FieldUpdateTime,
		})
	}
	if value, ok := auo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldURL,
		})
	}
	if auo.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: audit.FieldURL,
		})
	}
	if value, ok := auo.mutation.Query(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldQuery,
		})
	}
	if auo.mutation.QueryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: audit.FieldQuery,
		})
	}
	if value, ok := auo.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldMethod,
		})
	}
	if auo.mutation.MethodCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: audit.FieldMethod,
		})
	}
	if value, ok := auo.mutation.Request(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldRequest,
		})
	}
	if auo.mutation.RequestCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: audit.FieldRequest,
		})
	}
	if value, ok := auo.mutation.Response(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldResponse,
		})
	}
	if auo.mutation.ResponseCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: audit.FieldResponse,
		})
	}
	if value, ok := auo.mutation.Header(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldHeader,
		})
	}
	if auo.mutation.HeaderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: audit.FieldHeader,
		})
	}
	if value, ok := auo.mutation.StatusCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: audit.FieldStatusCode,
		})
	}
	if value, ok := auo.mutation.AddedStatusCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: audit.FieldStatusCode,
		})
	}
	if auo.mutation.StatusCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: audit.FieldStatusCode,
		})
	}
	if value, ok := auo.mutation.RemoteIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldRemoteIP,
		})
	}
	if auo.mutation.RemoteIPCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: audit.FieldRemoteIP,
		})
	}
	if value, ok := auo.mutation.ClientIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldClientIP,
		})
	}
	if auo.mutation.ClientIPCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: audit.FieldClientIP,
		})
	}
	if value, ok := auo.mutation.CostTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldCostTime,
		})
	}
	if auo.mutation.CostTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: audit.FieldCostTime,
		})
	}
	_node = &Audit{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{audit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
