// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"hello/pkg/ent/predicate"
	"hello/pkg/ent/resource"
	"math"
	"reflect"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ResourceQuery is the builder for querying Resource entities.
type ResourceQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.Resource
	// eager-loading edges.
	withPre  *ResourceQuery
	withNext *ResourceQuery
	withFKs  bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ResourceQuery builder.
func (rq *ResourceQuery) Where(ps ...predicate.Resource) *ResourceQuery {
	rq.predicates = append(rq.predicates, ps...)
	return rq
}

// Limit adds a limit step to the query.
func (rq *ResourceQuery) Limit(limit int) *ResourceQuery {
	rq.limit = &limit
	return rq
}

// Offset adds an offset step to the query.
func (rq *ResourceQuery) Offset(offset int) *ResourceQuery {
	rq.offset = &offset
	return rq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rq *ResourceQuery) Unique(unique bool) *ResourceQuery {
	rq.unique = &unique
	return rq
}

// Order adds an order step to the query.
func (rq *ResourceQuery) Order(o ...OrderFunc) *ResourceQuery {
	rq.order = append(rq.order, o...)
	return rq
}

// QueryPre chains the current query on the "pre" edge.
func (rq *ResourceQuery) QueryPre() *ResourceQuery {
	query := &ResourceQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resource.Table, resource.FieldID, selector),
			sqlgraph.To(resource.Table, resource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resource.PreTable, resource.PreColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNext chains the current query on the "next" edge.
func (rq *ResourceQuery) QueryNext() *ResourceQuery {
	query := &ResourceQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resource.Table, resource.FieldID, selector),
			sqlgraph.To(resource.Table, resource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resource.NextTable, resource.NextColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Resource entity from the query.
// Returns a *NotFoundError when no Resource was found.
func (rq *ResourceQuery) First(ctx context.Context) (*Resource, error) {
	nodes, err := rq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{resource.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rq *ResourceQuery) FirstX(ctx context.Context) *Resource {
	node, err := rq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Resource ID from the query.
// Returns a *NotFoundError when no Resource ID was found.
func (rq *ResourceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{resource.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rq *ResourceQuery) FirstIDX(ctx context.Context) int {
	id, err := rq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Resource entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Resource entity is found.
// Returns a *NotFoundError when no Resource entities are found.
func (rq *ResourceQuery) Only(ctx context.Context) (*Resource, error) {
	nodes, err := rq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{resource.Label}
	default:
		return nil, &NotSingularError{resource.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rq *ResourceQuery) OnlyX(ctx context.Context) *Resource {
	node, err := rq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Resource ID in the query.
// Returns a *NotSingularError when more than one Resource ID is found.
// Returns a *NotFoundError when no entities are found.
func (rq *ResourceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{resource.Label}
	default:
		err = &NotSingularError{resource.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rq *ResourceQuery) OnlyIDX(ctx context.Context) int {
	id, err := rq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Resources.
func (rq *ResourceQuery) All(ctx context.Context) ([]*Resource, error) {
	if err := rq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rq *ResourceQuery) AllX(ctx context.Context) []*Resource {
	nodes, err := rq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Resource IDs.
func (rq *ResourceQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rq.Select(resource.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rq *ResourceQuery) IDsX(ctx context.Context) []int {
	ids, err := rq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rq *ResourceQuery) Count(ctx context.Context) (int, error) {
	if err := rq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rq *ResourceQuery) CountX(ctx context.Context) int {
	count, err := rq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rq *ResourceQuery) Exist(ctx context.Context) (bool, error) {
	if err := rq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rq *ResourceQuery) ExistX(ctx context.Context) bool {
	exist, err := rq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ResourceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rq *ResourceQuery) Clone() *ResourceQuery {
	if rq == nil {
		return nil
	}
	return &ResourceQuery{
		config:     rq.config,
		limit:      rq.limit,
		offset:     rq.offset,
		order:      append([]OrderFunc{}, rq.order...),
		predicates: append([]predicate.Resource{}, rq.predicates...),
		withPre:    rq.withPre.Clone(),
		withNext:   rq.withNext.Clone(),
		// clone intermediate query.
		sql:    rq.sql.Clone(),
		path:   rq.path,
		unique: rq.unique,
	}
}

// WithPre tells the query-builder to eager-load the nodes that are connected to
// the "pre" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *ResourceQuery) WithPre(opts ...func(*ResourceQuery)) *ResourceQuery {
	query := &ResourceQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withPre = query
	return rq
}

// WithNext tells the query-builder to eager-load the nodes that are connected to
// the "next" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *ResourceQuery) WithNext(opts ...func(*ResourceQuery)) *ResourceQuery {
	query := &ResourceQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withNext = query
	return rq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Resource.Query().
//		GroupBy(resource.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (rq *ResourceQuery) GroupBy(field string, fields ...string) *ResourceGroupBy {
	group := &ResourceGroupBy{config: rq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.Resource.Query().
//		Select(resource.FieldCreateTime).
//		Scan(ctx, &v)
//
func (rq *ResourceQuery) Select(fields ...string) *ResourceSelect {
	rq.fields = append(rq.fields, fields...)
	return &ResourceSelect{ResourceQuery: rq}
}

func (rq *ResourceQuery) prepareQuery(ctx context.Context) error {
	for _, f := range rq.fields {
		if !resource.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rq.path != nil {
		prev, err := rq.path(ctx)
		if err != nil {
			return err
		}
		rq.sql = prev
	}
	return nil
}

func (rq *ResourceQuery) sqlAll(ctx context.Context) ([]*Resource, error) {
	var (
		nodes       = []*Resource{}
		withFKs     = rq.withFKs
		_spec       = rq.querySpec()
		loadedTypes = [2]bool{
			rq.withPre != nil,
			rq.withNext != nil,
		}
	)
	if rq.withPre != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, resource.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Resource{config: rq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, rq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := rq.withPre; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Resource)
		for i := range nodes {
			if nodes[i].resource_next == nil {
				continue
			}
			fk := *nodes[i].resource_next
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(resource.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "resource_next" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Pre = n
			}
		}
	}

	if query := rq.withNext; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Resource)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Next = []*Resource{}
		}
		query.withFKs = true
		query.Where(predicate.Resource(func(s *sql.Selector) {
			s.Where(sql.InValues(resource.NextColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.resource_next
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "resource_next" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "resource_next" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Next = append(node.Edges.Next, n)
		}
	}

	return nodes, nil
}

func (rq *ResourceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rq.querySpec()
	_spec.Node.Columns = rq.fields
	if len(rq.fields) > 0 {
		_spec.Unique = rq.unique != nil && *rq.unique
	}
	return sqlgraph.CountNodes(ctx, rq.driver, _spec)
}

func (rq *ResourceQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (rq *ResourceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resource.Table,
			Columns: resource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resource.FieldID,
			},
		},
		From:   rq.sql,
		Unique: true,
	}
	if unique := rq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := rq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resource.FieldID)
		for i := range fields {
			if fields[i] != resource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rq *ResourceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rq.driver.Dialect())
	t1 := builder.Table(resource.Table)
	columns := rq.fields
	if len(columns) == 0 {
		columns = resource.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rq.sql != nil {
		selector = rq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rq.unique != nil && *rq.unique {
		selector.Distinct()
	}
	for _, p := range rq.predicates {
		p(selector)
	}
	for _, p := range rq.order {
		p(selector)
	}
	if offset := rq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

func (rq *ResourceQuery) Queries(i interface{}) *ResourceQuery {
	queryList, _ := SetResourceFormQueries(i)
	for _, v := range queryList {
		v.Query(rq)
	}
	return rq
}

func (rq *ResourceQuery) ByQueriesAll(ctx context.Context, i interface{}) (res Resources, count int, err error) {
	queryList, countList := SetResourceFormQueries(i)
	countQ := rq.Clone()
	for _, v := range queryList {
		v.Query(rq)
	}
	for _, v := range countList {
		v.Query(countQ)
	}
	count, err = countQ.Count(ctx)
	if err != nil {
		return
	}
	res, err = rq.All(ctx)
	return
}

type ResourceTableFormer interface {
	Query(q *ResourceQuery)
	CountQuery() bool
}

type ResourceTablePagingForm struct {
	Limit *int `json:"_limit" form:"_limit" `
	Page  *int `json:"_page" form:"_page"`
}

func (f ResourceTablePagingForm) Query(q *ResourceQuery) {
	if f.Limit != nil && f.Page != nil {
		q.Limit(*f.Limit).Offset((*f.Page - 1) * *f.Limit)
	}
}

func (f ResourceTablePagingForm) CountQuery() bool {
	return false
}

type ResourceTableOrderForm struct {
	Order  *string `json:"order" form:"_order" binding:"omitempty,oneof=acs desc"`
	SortBy *string `json:"sortBy" form:"_sortBy"`
}

func (f ResourceTableOrderForm) Query(q *ResourceQuery) {
	if f.Order != nil && f.SortBy != nil {
		if *f.Order == "acs" {
			q.Order(Asc(*f.SortBy))
		}

		if *f.Order == "desc" {
			q.Order(Desc(*f.SortBy))
		}
	}
}
func (f ResourceTableOrderForm) CountQuery() bool {
	return false
}

func SetResourceFormQueries(o interface{}) ([]ResourceTableFormer, []ResourceTableFormer) {
	queryList := make([]ResourceTableFormer, 0)
	countList := make([]ResourceTableFormer, 0)
	v := reflect.ValueOf(o)
	former := reflect.TypeOf((*ResourceTableFormer)(nil)).Elem()
	ResourceFormDepValue(v, former, &queryList, &countList)
	return queryList, countList
}

func ResourceFormDepValue(v reflect.Value, former reflect.Type, queryList *[]ResourceTableFormer, countList *[]ResourceTableFormer) {
	for i := 0; i < v.NumField(); i++ {
		f := v.Field(i)
		if f.IsZero() {
			continue
		}
		if f.Type().Implements(former) {
			former := f.Interface().(ResourceTableFormer)
			*queryList = append(*queryList, former)
			if former.CountQuery() {
				*countList = append(*countList, former)
			}
			continue
		}
		if f.Type().Kind() == reflect.Struct {
			ResourceFormDepValue(f, former, queryList, countList)
		}
	}
}

type ResourceQueryOps struct {
}

type ResourceTableCreateTimeEQForm struct {
	CreateTimeEQ *time.Time `form:"CreateTimeEQ" json:"CreateTimeEQ"`
}

func (f ResourceTableCreateTimeEQForm) Query(q *ResourceQuery) {
	if f.CreateTimeEQ != nil {
		q.Where(resource.CreateTimeEQ(*f.CreateTimeEQ))
	}
}
func (f ResourceTableCreateTimeEQForm) CountQuery() bool {
	return true
}

type ResourceTableCreateTimeNEQForm struct {
	CreateTimeNEQ *time.Time `form:"CreateTimeNEQ" json:"CreateTimeNEQ"`
}

func (f ResourceTableCreateTimeNEQForm) Query(q *ResourceQuery) {
	if f.CreateTimeNEQ != nil {
		q.Where(resource.CreateTimeNEQ(*f.CreateTimeNEQ))
	}
}
func (f ResourceTableCreateTimeNEQForm) CountQuery() bool {
	return true
}

type ResourceTableCreateTimeInForm struct {
	CreateTimeIn *[]time.Time `form:"CreateTimeIn" json:"CreateTimeIn"`
}

func (f ResourceTableCreateTimeInForm) Query(q *ResourceQuery) {
	if f.CreateTimeIn != nil {
		q.Where(resource.CreateTimeIn(*f.CreateTimeIn...))
	}
}
func (f ResourceTableCreateTimeInForm) CountQuery() bool {
	return true
}

type ResourceTableCreateTimeNotInForm struct {
	CreateTimeNotIn *[]time.Time `form:"CreateTimeNotIn" json:"CreateTimeNotIn"`
}

func (f ResourceTableCreateTimeNotInForm) Query(q *ResourceQuery) {
	if f.CreateTimeNotIn != nil {
		q.Where(resource.CreateTimeNotIn(*f.CreateTimeNotIn...))
	}
}
func (f ResourceTableCreateTimeNotInForm) CountQuery() bool {
	return true
}

type ResourceTableCreateTimeGTForm struct {
	CreateTimeGT *time.Time `form:"CreateTimeGT" json:"CreateTimeGT"`
}

func (f ResourceTableCreateTimeGTForm) Query(q *ResourceQuery) {
	if f.CreateTimeGT != nil {
		q.Where(resource.CreateTimeGT(*f.CreateTimeGT))
	}
}
func (f ResourceTableCreateTimeGTForm) CountQuery() bool {
	return true
}

type ResourceTableCreateTimeGTEForm struct {
	CreateTimeGTE *time.Time `form:"CreateTimeGTE" json:"CreateTimeGTE"`
}

func (f ResourceTableCreateTimeGTEForm) Query(q *ResourceQuery) {
	if f.CreateTimeGTE != nil {
		q.Where(resource.CreateTimeGTE(*f.CreateTimeGTE))
	}
}
func (f ResourceTableCreateTimeGTEForm) CountQuery() bool {
	return true
}

type ResourceTableCreateTimeLTForm struct {
	CreateTimeLT *time.Time `form:"CreateTimeLT" json:"CreateTimeLT"`
}

func (f ResourceTableCreateTimeLTForm) Query(q *ResourceQuery) {
	if f.CreateTimeLT != nil {
		q.Where(resource.CreateTimeLT(*f.CreateTimeLT))
	}
}
func (f ResourceTableCreateTimeLTForm) CountQuery() bool {
	return true
}

type ResourceTableCreateTimeLTEForm struct {
	CreateTimeLTE *time.Time `form:"CreateTimeLTE" json:"CreateTimeLTE"`
}

func (f ResourceTableCreateTimeLTEForm) Query(q *ResourceQuery) {
	if f.CreateTimeLTE != nil {
		q.Where(resource.CreateTimeLTE(*f.CreateTimeLTE))
	}
}
func (f ResourceTableCreateTimeLTEForm) CountQuery() bool {
	return true
}

type ResourceTableUpdateTimeEQForm struct {
	UpdateTimeEQ *time.Time `form:"UpdateTimeEQ" json:"UpdateTimeEQ"`
}

func (f ResourceTableUpdateTimeEQForm) Query(q *ResourceQuery) {
	if f.UpdateTimeEQ != nil {
		q.Where(resource.UpdateTimeEQ(*f.UpdateTimeEQ))
	}
}
func (f ResourceTableUpdateTimeEQForm) CountQuery() bool {
	return true
}

type ResourceTableUpdateTimeNEQForm struct {
	UpdateTimeNEQ *time.Time `form:"UpdateTimeNEQ" json:"UpdateTimeNEQ"`
}

func (f ResourceTableUpdateTimeNEQForm) Query(q *ResourceQuery) {
	if f.UpdateTimeNEQ != nil {
		q.Where(resource.UpdateTimeNEQ(*f.UpdateTimeNEQ))
	}
}
func (f ResourceTableUpdateTimeNEQForm) CountQuery() bool {
	return true
}

type ResourceTableUpdateTimeInForm struct {
	UpdateTimeIn *[]time.Time `form:"UpdateTimeIn" json:"UpdateTimeIn"`
}

func (f ResourceTableUpdateTimeInForm) Query(q *ResourceQuery) {
	if f.UpdateTimeIn != nil {
		q.Where(resource.UpdateTimeIn(*f.UpdateTimeIn...))
	}
}
func (f ResourceTableUpdateTimeInForm) CountQuery() bool {
	return true
}

type ResourceTableUpdateTimeNotInForm struct {
	UpdateTimeNotIn *[]time.Time `form:"UpdateTimeNotIn" json:"UpdateTimeNotIn"`
}

func (f ResourceTableUpdateTimeNotInForm) Query(q *ResourceQuery) {
	if f.UpdateTimeNotIn != nil {
		q.Where(resource.UpdateTimeNotIn(*f.UpdateTimeNotIn...))
	}
}
func (f ResourceTableUpdateTimeNotInForm) CountQuery() bool {
	return true
}

type ResourceTableUpdateTimeGTForm struct {
	UpdateTimeGT *time.Time `form:"UpdateTimeGT" json:"UpdateTimeGT"`
}

func (f ResourceTableUpdateTimeGTForm) Query(q *ResourceQuery) {
	if f.UpdateTimeGT != nil {
		q.Where(resource.UpdateTimeGT(*f.UpdateTimeGT))
	}
}
func (f ResourceTableUpdateTimeGTForm) CountQuery() bool {
	return true
}

type ResourceTableUpdateTimeGTEForm struct {
	UpdateTimeGTE *time.Time `form:"UpdateTimeGTE" json:"UpdateTimeGTE"`
}

func (f ResourceTableUpdateTimeGTEForm) Query(q *ResourceQuery) {
	if f.UpdateTimeGTE != nil {
		q.Where(resource.UpdateTimeGTE(*f.UpdateTimeGTE))
	}
}
func (f ResourceTableUpdateTimeGTEForm) CountQuery() bool {
	return true
}

type ResourceTableUpdateTimeLTForm struct {
	UpdateTimeLT *time.Time `form:"UpdateTimeLT" json:"UpdateTimeLT"`
}

func (f ResourceTableUpdateTimeLTForm) Query(q *ResourceQuery) {
	if f.UpdateTimeLT != nil {
		q.Where(resource.UpdateTimeLT(*f.UpdateTimeLT))
	}
}
func (f ResourceTableUpdateTimeLTForm) CountQuery() bool {
	return true
}

type ResourceTableUpdateTimeLTEForm struct {
	UpdateTimeLTE *time.Time `form:"UpdateTimeLTE" json:"UpdateTimeLTE"`
}

func (f ResourceTableUpdateTimeLTEForm) Query(q *ResourceQuery) {
	if f.UpdateTimeLTE != nil {
		q.Where(resource.UpdateTimeLTE(*f.UpdateTimeLTE))
	}
}
func (f ResourceTableUpdateTimeLTEForm) CountQuery() bool {
	return true
}

type ResourceTableNameEQForm struct {
	NameEQ *string `form:"NameEQ" json:"NameEQ"`
}

func (f ResourceTableNameEQForm) Query(q *ResourceQuery) {
	if f.NameEQ != nil {
		q.Where(resource.NameEQ(*f.NameEQ))
	}
}
func (f ResourceTableNameEQForm) CountQuery() bool {
	return true
}

type ResourceTableNameNEQForm struct {
	NameNEQ *string `form:"NameNEQ" json:"NameNEQ"`
}

func (f ResourceTableNameNEQForm) Query(q *ResourceQuery) {
	if f.NameNEQ != nil {
		q.Where(resource.NameNEQ(*f.NameNEQ))
	}
}
func (f ResourceTableNameNEQForm) CountQuery() bool {
	return true
}

type ResourceTableNameInForm struct {
	NameIn *[]string `form:"NameIn" json:"NameIn"`
}

func (f ResourceTableNameInForm) Query(q *ResourceQuery) {
	if f.NameIn != nil {
		q.Where(resource.NameIn(*f.NameIn...))
	}
}
func (f ResourceTableNameInForm) CountQuery() bool {
	return true
}

type ResourceTableNameNotInForm struct {
	NameNotIn *[]string `form:"NameNotIn" json:"NameNotIn"`
}

func (f ResourceTableNameNotInForm) Query(q *ResourceQuery) {
	if f.NameNotIn != nil {
		q.Where(resource.NameNotIn(*f.NameNotIn...))
	}
}
func (f ResourceTableNameNotInForm) CountQuery() bool {
	return true
}

type ResourceTableNameGTForm struct {
	NameGT *string `form:"NameGT" json:"NameGT"`
}

func (f ResourceTableNameGTForm) Query(q *ResourceQuery) {
	if f.NameGT != nil {
		q.Where(resource.NameGT(*f.NameGT))
	}
}
func (f ResourceTableNameGTForm) CountQuery() bool {
	return true
}

type ResourceTableNameGTEForm struct {
	NameGTE *string `form:"NameGTE" json:"NameGTE"`
}

func (f ResourceTableNameGTEForm) Query(q *ResourceQuery) {
	if f.NameGTE != nil {
		q.Where(resource.NameGTE(*f.NameGTE))
	}
}
func (f ResourceTableNameGTEForm) CountQuery() bool {
	return true
}

type ResourceTableNameLTForm struct {
	NameLT *string `form:"NameLT" json:"NameLT"`
}

func (f ResourceTableNameLTForm) Query(q *ResourceQuery) {
	if f.NameLT != nil {
		q.Where(resource.NameLT(*f.NameLT))
	}
}
func (f ResourceTableNameLTForm) CountQuery() bool {
	return true
}

type ResourceTableNameLTEForm struct {
	NameLTE *string `form:"NameLTE" json:"NameLTE"`
}

func (f ResourceTableNameLTEForm) Query(q *ResourceQuery) {
	if f.NameLTE != nil {
		q.Where(resource.NameLTE(*f.NameLTE))
	}
}
func (f ResourceTableNameLTEForm) CountQuery() bool {
	return true
}

type ResourceTableNameContainsForm struct {
	NameContains *string `form:"NameContains" json:"NameContains"`
}

func (f ResourceTableNameContainsForm) Query(q *ResourceQuery) {
	if f.NameContains != nil {
		q.Where(resource.NameContains(*f.NameContains))
	}
}
func (f ResourceTableNameContainsForm) CountQuery() bool {
	return true
}

type ResourceTableNameHasPrefixForm struct {
	NameHasPrefix *string `form:"NameHasPrefix" json:"NameHasPrefix"`
}

func (f ResourceTableNameHasPrefixForm) Query(q *ResourceQuery) {
	if f.NameHasPrefix != nil {
		q.Where(resource.NameHasPrefix(*f.NameHasPrefix))
	}
}
func (f ResourceTableNameHasPrefixForm) CountQuery() bool {
	return true
}

type ResourceTableNameHasSuffixForm struct {
	NameHasSuffix *string `form:"NameHasSuffix" json:"NameHasSuffix"`
}

func (f ResourceTableNameHasSuffixForm) Query(q *ResourceQuery) {
	if f.NameHasSuffix != nil {
		q.Where(resource.NameHasSuffix(*f.NameHasSuffix))
	}
}
func (f ResourceTableNameHasSuffixForm) CountQuery() bool {
	return true
}

type ResourceTableNameEqualFoldForm struct {
	NameEqualFold *string `form:"NameEqualFold" json:"NameEqualFold"`
}

func (f ResourceTableNameEqualFoldForm) Query(q *ResourceQuery) {
	if f.NameEqualFold != nil {
		q.Where(resource.NameEqualFold(*f.NameEqualFold))
	}
}
func (f ResourceTableNameEqualFoldForm) CountQuery() bool {
	return true
}

type ResourceTableNameContainsFoldForm struct {
	NameContainsFold *string `form:"NameContainsFold" json:"NameContainsFold"`
}

func (f ResourceTableNameContainsFoldForm) Query(q *ResourceQuery) {
	if f.NameContainsFold != nil {
		q.Where(resource.NameContainsFold(*f.NameContainsFold))
	}
}
func (f ResourceTableNameContainsFoldForm) CountQuery() bool {
	return true
}

type ResourceTableKeyEQForm struct {
	KeyEQ *string `form:"KeyEQ" json:"KeyEQ"`
}

func (f ResourceTableKeyEQForm) Query(q *ResourceQuery) {
	if f.KeyEQ != nil {
		q.Where(resource.KeyEQ(*f.KeyEQ))
	}
}
func (f ResourceTableKeyEQForm) CountQuery() bool {
	return true
}

type ResourceTableKeyNEQForm struct {
	KeyNEQ *string `form:"KeyNEQ" json:"KeyNEQ"`
}

func (f ResourceTableKeyNEQForm) Query(q *ResourceQuery) {
	if f.KeyNEQ != nil {
		q.Where(resource.KeyNEQ(*f.KeyNEQ))
	}
}
func (f ResourceTableKeyNEQForm) CountQuery() bool {
	return true
}

type ResourceTableKeyInForm struct {
	KeyIn *[]string `form:"KeyIn" json:"KeyIn"`
}

func (f ResourceTableKeyInForm) Query(q *ResourceQuery) {
	if f.KeyIn != nil {
		q.Where(resource.KeyIn(*f.KeyIn...))
	}
}
func (f ResourceTableKeyInForm) CountQuery() bool {
	return true
}

type ResourceTableKeyNotInForm struct {
	KeyNotIn *[]string `form:"KeyNotIn" json:"KeyNotIn"`
}

func (f ResourceTableKeyNotInForm) Query(q *ResourceQuery) {
	if f.KeyNotIn != nil {
		q.Where(resource.KeyNotIn(*f.KeyNotIn...))
	}
}
func (f ResourceTableKeyNotInForm) CountQuery() bool {
	return true
}

type ResourceTableKeyGTForm struct {
	KeyGT *string `form:"KeyGT" json:"KeyGT"`
}

func (f ResourceTableKeyGTForm) Query(q *ResourceQuery) {
	if f.KeyGT != nil {
		q.Where(resource.KeyGT(*f.KeyGT))
	}
}
func (f ResourceTableKeyGTForm) CountQuery() bool {
	return true
}

type ResourceTableKeyGTEForm struct {
	KeyGTE *string `form:"KeyGTE" json:"KeyGTE"`
}

func (f ResourceTableKeyGTEForm) Query(q *ResourceQuery) {
	if f.KeyGTE != nil {
		q.Where(resource.KeyGTE(*f.KeyGTE))
	}
}
func (f ResourceTableKeyGTEForm) CountQuery() bool {
	return true
}

type ResourceTableKeyLTForm struct {
	KeyLT *string `form:"KeyLT" json:"KeyLT"`
}

func (f ResourceTableKeyLTForm) Query(q *ResourceQuery) {
	if f.KeyLT != nil {
		q.Where(resource.KeyLT(*f.KeyLT))
	}
}
func (f ResourceTableKeyLTForm) CountQuery() bool {
	return true
}

type ResourceTableKeyLTEForm struct {
	KeyLTE *string `form:"KeyLTE" json:"KeyLTE"`
}

func (f ResourceTableKeyLTEForm) Query(q *ResourceQuery) {
	if f.KeyLTE != nil {
		q.Where(resource.KeyLTE(*f.KeyLTE))
	}
}
func (f ResourceTableKeyLTEForm) CountQuery() bool {
	return true
}

type ResourceTableKeyContainsForm struct {
	KeyContains *string `form:"KeyContains" json:"KeyContains"`
}

func (f ResourceTableKeyContainsForm) Query(q *ResourceQuery) {
	if f.KeyContains != nil {
		q.Where(resource.KeyContains(*f.KeyContains))
	}
}
func (f ResourceTableKeyContainsForm) CountQuery() bool {
	return true
}

type ResourceTableKeyHasPrefixForm struct {
	KeyHasPrefix *string `form:"KeyHasPrefix" json:"KeyHasPrefix"`
}

func (f ResourceTableKeyHasPrefixForm) Query(q *ResourceQuery) {
	if f.KeyHasPrefix != nil {
		q.Where(resource.KeyHasPrefix(*f.KeyHasPrefix))
	}
}
func (f ResourceTableKeyHasPrefixForm) CountQuery() bool {
	return true
}

type ResourceTableKeyHasSuffixForm struct {
	KeyHasSuffix *string `form:"KeyHasSuffix" json:"KeyHasSuffix"`
}

func (f ResourceTableKeyHasSuffixForm) Query(q *ResourceQuery) {
	if f.KeyHasSuffix != nil {
		q.Where(resource.KeyHasSuffix(*f.KeyHasSuffix))
	}
}
func (f ResourceTableKeyHasSuffixForm) CountQuery() bool {
	return true
}

type ResourceTableKeyEqualFoldForm struct {
	KeyEqualFold *string `form:"KeyEqualFold" json:"KeyEqualFold"`
}

func (f ResourceTableKeyEqualFoldForm) Query(q *ResourceQuery) {
	if f.KeyEqualFold != nil {
		q.Where(resource.KeyEqualFold(*f.KeyEqualFold))
	}
}
func (f ResourceTableKeyEqualFoldForm) CountQuery() bool {
	return true
}

type ResourceTableKeyContainsFoldForm struct {
	KeyContainsFold *string `form:"KeyContainsFold" json:"KeyContainsFold"`
}

func (f ResourceTableKeyContainsFoldForm) Query(q *ResourceQuery) {
	if f.KeyContainsFold != nil {
		q.Where(resource.KeyContainsFold(*f.KeyContainsFold))
	}
}
func (f ResourceTableKeyContainsFoldForm) CountQuery() bool {
	return true
}

type ResourceTablePathEQForm struct {
	PathEQ *string `form:"PathEQ" json:"PathEQ"`
}

func (f ResourceTablePathEQForm) Query(q *ResourceQuery) {
	if f.PathEQ != nil {
		q.Where(resource.PathEQ(*f.PathEQ))
	}
}
func (f ResourceTablePathEQForm) CountQuery() bool {
	return true
}

type ResourceTablePathNEQForm struct {
	PathNEQ *string `form:"PathNEQ" json:"PathNEQ"`
}

func (f ResourceTablePathNEQForm) Query(q *ResourceQuery) {
	if f.PathNEQ != nil {
		q.Where(resource.PathNEQ(*f.PathNEQ))
	}
}
func (f ResourceTablePathNEQForm) CountQuery() bool {
	return true
}

type ResourceTablePathInForm struct {
	PathIn *[]string `form:"PathIn" json:"PathIn"`
}

func (f ResourceTablePathInForm) Query(q *ResourceQuery) {
	if f.PathIn != nil {
		q.Where(resource.PathIn(*f.PathIn...))
	}
}
func (f ResourceTablePathInForm) CountQuery() bool {
	return true
}

type ResourceTablePathNotInForm struct {
	PathNotIn *[]string `form:"PathNotIn" json:"PathNotIn"`
}

func (f ResourceTablePathNotInForm) Query(q *ResourceQuery) {
	if f.PathNotIn != nil {
		q.Where(resource.PathNotIn(*f.PathNotIn...))
	}
}
func (f ResourceTablePathNotInForm) CountQuery() bool {
	return true
}

type ResourceTablePathGTForm struct {
	PathGT *string `form:"PathGT" json:"PathGT"`
}

func (f ResourceTablePathGTForm) Query(q *ResourceQuery) {
	if f.PathGT != nil {
		q.Where(resource.PathGT(*f.PathGT))
	}
}
func (f ResourceTablePathGTForm) CountQuery() bool {
	return true
}

type ResourceTablePathGTEForm struct {
	PathGTE *string `form:"PathGTE" json:"PathGTE"`
}

func (f ResourceTablePathGTEForm) Query(q *ResourceQuery) {
	if f.PathGTE != nil {
		q.Where(resource.PathGTE(*f.PathGTE))
	}
}
func (f ResourceTablePathGTEForm) CountQuery() bool {
	return true
}

type ResourceTablePathLTForm struct {
	PathLT *string `form:"PathLT" json:"PathLT"`
}

func (f ResourceTablePathLTForm) Query(q *ResourceQuery) {
	if f.PathLT != nil {
		q.Where(resource.PathLT(*f.PathLT))
	}
}
func (f ResourceTablePathLTForm) CountQuery() bool {
	return true
}

type ResourceTablePathLTEForm struct {
	PathLTE *string `form:"PathLTE" json:"PathLTE"`
}

func (f ResourceTablePathLTEForm) Query(q *ResourceQuery) {
	if f.PathLTE != nil {
		q.Where(resource.PathLTE(*f.PathLTE))
	}
}
func (f ResourceTablePathLTEForm) CountQuery() bool {
	return true
}

type ResourceTablePathContainsForm struct {
	PathContains *string `form:"PathContains" json:"PathContains"`
}

func (f ResourceTablePathContainsForm) Query(q *ResourceQuery) {
	if f.PathContains != nil {
		q.Where(resource.PathContains(*f.PathContains))
	}
}
func (f ResourceTablePathContainsForm) CountQuery() bool {
	return true
}

type ResourceTablePathHasPrefixForm struct {
	PathHasPrefix *string `form:"PathHasPrefix" json:"PathHasPrefix"`
}

func (f ResourceTablePathHasPrefixForm) Query(q *ResourceQuery) {
	if f.PathHasPrefix != nil {
		q.Where(resource.PathHasPrefix(*f.PathHasPrefix))
	}
}
func (f ResourceTablePathHasPrefixForm) CountQuery() bool {
	return true
}

type ResourceTablePathHasSuffixForm struct {
	PathHasSuffix *string `form:"PathHasSuffix" json:"PathHasSuffix"`
}

func (f ResourceTablePathHasSuffixForm) Query(q *ResourceQuery) {
	if f.PathHasSuffix != nil {
		q.Where(resource.PathHasSuffix(*f.PathHasSuffix))
	}
}
func (f ResourceTablePathHasSuffixForm) CountQuery() bool {
	return true
}

type ResourceTablePathEqualFoldForm struct {
	PathEqualFold *string `form:"PathEqualFold" json:"PathEqualFold"`
}

func (f ResourceTablePathEqualFoldForm) Query(q *ResourceQuery) {
	if f.PathEqualFold != nil {
		q.Where(resource.PathEqualFold(*f.PathEqualFold))
	}
}
func (f ResourceTablePathEqualFoldForm) CountQuery() bool {
	return true
}

type ResourceTablePathContainsFoldForm struct {
	PathContainsFold *string `form:"PathContainsFold" json:"PathContainsFold"`
}

func (f ResourceTablePathContainsFoldForm) Query(q *ResourceQuery) {
	if f.PathContainsFold != nil {
		q.Where(resource.PathContainsFold(*f.PathContainsFold))
	}
}
func (f ResourceTablePathContainsFoldForm) CountQuery() bool {
	return true
}

type ResourceTableActionEQForm struct {
	ActionEQ *string `form:"ActionEQ" json:"ActionEQ"`
}

func (f ResourceTableActionEQForm) Query(q *ResourceQuery) {
	if f.ActionEQ != nil {
		q.Where(resource.ActionEQ(*f.ActionEQ))
	}
}
func (f ResourceTableActionEQForm) CountQuery() bool {
	return true
}

type ResourceTableActionNEQForm struct {
	ActionNEQ *string `form:"ActionNEQ" json:"ActionNEQ"`
}

func (f ResourceTableActionNEQForm) Query(q *ResourceQuery) {
	if f.ActionNEQ != nil {
		q.Where(resource.ActionNEQ(*f.ActionNEQ))
	}
}
func (f ResourceTableActionNEQForm) CountQuery() bool {
	return true
}

type ResourceTableActionInForm struct {
	ActionIn *[]string `form:"ActionIn" json:"ActionIn"`
}

func (f ResourceTableActionInForm) Query(q *ResourceQuery) {
	if f.ActionIn != nil {
		q.Where(resource.ActionIn(*f.ActionIn...))
	}
}
func (f ResourceTableActionInForm) CountQuery() bool {
	return true
}

type ResourceTableActionNotInForm struct {
	ActionNotIn *[]string `form:"ActionNotIn" json:"ActionNotIn"`
}

func (f ResourceTableActionNotInForm) Query(q *ResourceQuery) {
	if f.ActionNotIn != nil {
		q.Where(resource.ActionNotIn(*f.ActionNotIn...))
	}
}
func (f ResourceTableActionNotInForm) CountQuery() bool {
	return true
}

type ResourceTableActionGTForm struct {
	ActionGT *string `form:"ActionGT" json:"ActionGT"`
}

func (f ResourceTableActionGTForm) Query(q *ResourceQuery) {
	if f.ActionGT != nil {
		q.Where(resource.ActionGT(*f.ActionGT))
	}
}
func (f ResourceTableActionGTForm) CountQuery() bool {
	return true
}

type ResourceTableActionGTEForm struct {
	ActionGTE *string `form:"ActionGTE" json:"ActionGTE"`
}

func (f ResourceTableActionGTEForm) Query(q *ResourceQuery) {
	if f.ActionGTE != nil {
		q.Where(resource.ActionGTE(*f.ActionGTE))
	}
}
func (f ResourceTableActionGTEForm) CountQuery() bool {
	return true
}

type ResourceTableActionLTForm struct {
	ActionLT *string `form:"ActionLT" json:"ActionLT"`
}

func (f ResourceTableActionLTForm) Query(q *ResourceQuery) {
	if f.ActionLT != nil {
		q.Where(resource.ActionLT(*f.ActionLT))
	}
}
func (f ResourceTableActionLTForm) CountQuery() bool {
	return true
}

type ResourceTableActionLTEForm struct {
	ActionLTE *string `form:"ActionLTE" json:"ActionLTE"`
}

func (f ResourceTableActionLTEForm) Query(q *ResourceQuery) {
	if f.ActionLTE != nil {
		q.Where(resource.ActionLTE(*f.ActionLTE))
	}
}
func (f ResourceTableActionLTEForm) CountQuery() bool {
	return true
}

type ResourceTableActionContainsForm struct {
	ActionContains *string `form:"ActionContains" json:"ActionContains"`
}

func (f ResourceTableActionContainsForm) Query(q *ResourceQuery) {
	if f.ActionContains != nil {
		q.Where(resource.ActionContains(*f.ActionContains))
	}
}
func (f ResourceTableActionContainsForm) CountQuery() bool {
	return true
}

type ResourceTableActionHasPrefixForm struct {
	ActionHasPrefix *string `form:"ActionHasPrefix" json:"ActionHasPrefix"`
}

func (f ResourceTableActionHasPrefixForm) Query(q *ResourceQuery) {
	if f.ActionHasPrefix != nil {
		q.Where(resource.ActionHasPrefix(*f.ActionHasPrefix))
	}
}
func (f ResourceTableActionHasPrefixForm) CountQuery() bool {
	return true
}

type ResourceTableActionHasSuffixForm struct {
	ActionHasSuffix *string `form:"ActionHasSuffix" json:"ActionHasSuffix"`
}

func (f ResourceTableActionHasSuffixForm) Query(q *ResourceQuery) {
	if f.ActionHasSuffix != nil {
		q.Where(resource.ActionHasSuffix(*f.ActionHasSuffix))
	}
}
func (f ResourceTableActionHasSuffixForm) CountQuery() bool {
	return true
}

type ResourceTableActionEqualFoldForm struct {
	ActionEqualFold *string `form:"ActionEqualFold" json:"ActionEqualFold"`
}

func (f ResourceTableActionEqualFoldForm) Query(q *ResourceQuery) {
	if f.ActionEqualFold != nil {
		q.Where(resource.ActionEqualFold(*f.ActionEqualFold))
	}
}
func (f ResourceTableActionEqualFoldForm) CountQuery() bool {
	return true
}

type ResourceTableActionContainsFoldForm struct {
	ActionContainsFold *string `form:"ActionContainsFold" json:"ActionContainsFold"`
}

func (f ResourceTableActionContainsFoldForm) Query(q *ResourceQuery) {
	if f.ActionContainsFold != nil {
		q.Where(resource.ActionContainsFold(*f.ActionContainsFold))
	}
}
func (f ResourceTableActionContainsFoldForm) CountQuery() bool {
	return true
}

type ResourceTableTypeEQForm struct {
	TypeEQ *resource.Type `form:"TypeEQ" json:"TypeEQ"`
}

func (f ResourceTableTypeEQForm) Query(q *ResourceQuery) {
	if f.TypeEQ != nil {
		q.Where(resource.TypeEQ(*f.TypeEQ))
	}
}
func (f ResourceTableTypeEQForm) CountQuery() bool {
	return true
}

type ResourceTableTypeNEQForm struct {
	TypeNEQ *resource.Type `form:"TypeNEQ" json:"TypeNEQ"`
}

func (f ResourceTableTypeNEQForm) Query(q *ResourceQuery) {
	if f.TypeNEQ != nil {
		q.Where(resource.TypeNEQ(*f.TypeNEQ))
	}
}
func (f ResourceTableTypeNEQForm) CountQuery() bool {
	return true
}

type ResourceTableTypeInForm struct {
	TypeIn *[]resource.Type `form:"TypeIn" json:"TypeIn"`
}

func (f ResourceTableTypeInForm) Query(q *ResourceQuery) {
	if f.TypeIn != nil {
		q.Where(resource.TypeIn(*f.TypeIn...))
	}
}
func (f ResourceTableTypeInForm) CountQuery() bool {
	return true
}

type ResourceTableTypeNotInForm struct {
	TypeNotIn *[]resource.Type `form:"TypeNotIn" json:"TypeNotIn"`
}

func (f ResourceTableTypeNotInForm) Query(q *ResourceQuery) {
	if f.TypeNotIn != nil {
		q.Where(resource.TypeNotIn(*f.TypeNotIn...))
	}
}
func (f ResourceTableTypeNotInForm) CountQuery() bool {
	return true
}

type ResourceTableCommentsEQForm struct {
	CommentsEQ *string `form:"CommentsEQ" json:"CommentsEQ"`
}

func (f ResourceTableCommentsEQForm) Query(q *ResourceQuery) {
	if f.CommentsEQ != nil {
		q.Where(resource.CommentsEQ(*f.CommentsEQ))
	}
}
func (f ResourceTableCommentsEQForm) CountQuery() bool {
	return true
}

type ResourceTableCommentsNEQForm struct {
	CommentsNEQ *string `form:"CommentsNEQ" json:"CommentsNEQ"`
}

func (f ResourceTableCommentsNEQForm) Query(q *ResourceQuery) {
	if f.CommentsNEQ != nil {
		q.Where(resource.CommentsNEQ(*f.CommentsNEQ))
	}
}
func (f ResourceTableCommentsNEQForm) CountQuery() bool {
	return true
}

type ResourceTableCommentsInForm struct {
	CommentsIn *[]string `form:"CommentsIn" json:"CommentsIn"`
}

func (f ResourceTableCommentsInForm) Query(q *ResourceQuery) {
	if f.CommentsIn != nil {
		q.Where(resource.CommentsIn(*f.CommentsIn...))
	}
}
func (f ResourceTableCommentsInForm) CountQuery() bool {
	return true
}

type ResourceTableCommentsNotInForm struct {
	CommentsNotIn *[]string `form:"CommentsNotIn" json:"CommentsNotIn"`
}

func (f ResourceTableCommentsNotInForm) Query(q *ResourceQuery) {
	if f.CommentsNotIn != nil {
		q.Where(resource.CommentsNotIn(*f.CommentsNotIn...))
	}
}
func (f ResourceTableCommentsNotInForm) CountQuery() bool {
	return true
}

type ResourceTableCommentsGTForm struct {
	CommentsGT *string `form:"CommentsGT" json:"CommentsGT"`
}

func (f ResourceTableCommentsGTForm) Query(q *ResourceQuery) {
	if f.CommentsGT != nil {
		q.Where(resource.CommentsGT(*f.CommentsGT))
	}
}
func (f ResourceTableCommentsGTForm) CountQuery() bool {
	return true
}

type ResourceTableCommentsGTEForm struct {
	CommentsGTE *string `form:"CommentsGTE" json:"CommentsGTE"`
}

func (f ResourceTableCommentsGTEForm) Query(q *ResourceQuery) {
	if f.CommentsGTE != nil {
		q.Where(resource.CommentsGTE(*f.CommentsGTE))
	}
}
func (f ResourceTableCommentsGTEForm) CountQuery() bool {
	return true
}

type ResourceTableCommentsLTForm struct {
	CommentsLT *string `form:"CommentsLT" json:"CommentsLT"`
}

func (f ResourceTableCommentsLTForm) Query(q *ResourceQuery) {
	if f.CommentsLT != nil {
		q.Where(resource.CommentsLT(*f.CommentsLT))
	}
}
func (f ResourceTableCommentsLTForm) CountQuery() bool {
	return true
}

type ResourceTableCommentsLTEForm struct {
	CommentsLTE *string `form:"CommentsLTE" json:"CommentsLTE"`
}

func (f ResourceTableCommentsLTEForm) Query(q *ResourceQuery) {
	if f.CommentsLTE != nil {
		q.Where(resource.CommentsLTE(*f.CommentsLTE))
	}
}
func (f ResourceTableCommentsLTEForm) CountQuery() bool {
	return true
}

type ResourceTableCommentsContainsForm struct {
	CommentsContains *string `form:"CommentsContains" json:"CommentsContains"`
}

func (f ResourceTableCommentsContainsForm) Query(q *ResourceQuery) {
	if f.CommentsContains != nil {
		q.Where(resource.CommentsContains(*f.CommentsContains))
	}
}
func (f ResourceTableCommentsContainsForm) CountQuery() bool {
	return true
}

type ResourceTableCommentsHasPrefixForm struct {
	CommentsHasPrefix *string `form:"CommentsHasPrefix" json:"CommentsHasPrefix"`
}

func (f ResourceTableCommentsHasPrefixForm) Query(q *ResourceQuery) {
	if f.CommentsHasPrefix != nil {
		q.Where(resource.CommentsHasPrefix(*f.CommentsHasPrefix))
	}
}
func (f ResourceTableCommentsHasPrefixForm) CountQuery() bool {
	return true
}

type ResourceTableCommentsHasSuffixForm struct {
	CommentsHasSuffix *string `form:"CommentsHasSuffix" json:"CommentsHasSuffix"`
}

func (f ResourceTableCommentsHasSuffixForm) Query(q *ResourceQuery) {
	if f.CommentsHasSuffix != nil {
		q.Where(resource.CommentsHasSuffix(*f.CommentsHasSuffix))
	}
}
func (f ResourceTableCommentsHasSuffixForm) CountQuery() bool {
	return true
}

type ResourceTableCommentsEqualFoldForm struct {
	CommentsEqualFold *string `form:"CommentsEqualFold" json:"CommentsEqualFold"`
}

func (f ResourceTableCommentsEqualFoldForm) Query(q *ResourceQuery) {
	if f.CommentsEqualFold != nil {
		q.Where(resource.CommentsEqualFold(*f.CommentsEqualFold))
	}
}
func (f ResourceTableCommentsEqualFoldForm) CountQuery() bool {
	return true
}

type ResourceTableCommentsContainsFoldForm struct {
	CommentsContainsFold *string `form:"CommentsContainsFold" json:"CommentsContainsFold"`
}

func (f ResourceTableCommentsContainsFoldForm) Query(q *ResourceQuery) {
	if f.CommentsContainsFold != nil {
		q.Where(resource.CommentsContainsFold(*f.CommentsContainsFold))
	}
}
func (f ResourceTableCommentsContainsFoldForm) CountQuery() bool {
	return true
}

// ResourceGroupBy is the group-by builder for Resource entities.
type ResourceGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rgb *ResourceGroupBy) Aggregate(fns ...AggregateFunc) *ResourceGroupBy {
	rgb.fns = append(rgb.fns, fns...)
	return rgb
}

// Scan applies the group-by query and scans the result into the given value.
func (rgb *ResourceGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rgb.path(ctx)
	if err != nil {
		return err
	}
	rgb.sql = query
	return rgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rgb *ResourceGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (rgb *ResourceGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rgb.fields) > 1 {
		return nil, errors.New("ent: ResourceGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rgb *ResourceGroupBy) StringsX(ctx context.Context) []string {
	v, err := rgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rgb *ResourceGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resource.Label}
	default:
		err = fmt.Errorf("ent: ResourceGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rgb *ResourceGroupBy) StringX(ctx context.Context) string {
	v, err := rgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (rgb *ResourceGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rgb.fields) > 1 {
		return nil, errors.New("ent: ResourceGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rgb *ResourceGroupBy) IntsX(ctx context.Context) []int {
	v, err := rgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rgb *ResourceGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resource.Label}
	default:
		err = fmt.Errorf("ent: ResourceGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rgb *ResourceGroupBy) IntX(ctx context.Context) int {
	v, err := rgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (rgb *ResourceGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rgb.fields) > 1 {
		return nil, errors.New("ent: ResourceGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rgb *ResourceGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rgb *ResourceGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resource.Label}
	default:
		err = fmt.Errorf("ent: ResourceGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rgb *ResourceGroupBy) Float64X(ctx context.Context) float64 {
	v, err := rgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (rgb *ResourceGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rgb.fields) > 1 {
		return nil, errors.New("ent: ResourceGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rgb *ResourceGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rgb *ResourceGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resource.Label}
	default:
		err = fmt.Errorf("ent: ResourceGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rgb *ResourceGroupBy) BoolX(ctx context.Context) bool {
	v, err := rgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rgb *ResourceGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rgb.fields {
		if !resource.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rgb *ResourceGroupBy) sqlQuery() *sql.Selector {
	selector := rgb.sql.Select()
	aggregation := make([]string, 0, len(rgb.fns))
	for _, fn := range rgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(rgb.fields)+len(rgb.fns))
		for _, f := range rgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(rgb.fields...)...)
}

// ResourceSelect is the builder for selecting fields of Resource entities.
type ResourceSelect struct {
	*ResourceQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (rs *ResourceSelect) Scan(ctx context.Context, v interface{}) error {
	if err := rs.prepareQuery(ctx); err != nil {
		return err
	}
	rs.sql = rs.ResourceQuery.sqlQuery(ctx)
	return rs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rs *ResourceSelect) ScanX(ctx context.Context, v interface{}) {
	if err := rs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (rs *ResourceSelect) Strings(ctx context.Context) ([]string, error) {
	if len(rs.fields) > 1 {
		return nil, errors.New("ent: ResourceSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := rs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rs *ResourceSelect) StringsX(ctx context.Context) []string {
	v, err := rs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (rs *ResourceSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resource.Label}
	default:
		err = fmt.Errorf("ent: ResourceSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rs *ResourceSelect) StringX(ctx context.Context) string {
	v, err := rs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (rs *ResourceSelect) Ints(ctx context.Context) ([]int, error) {
	if len(rs.fields) > 1 {
		return nil, errors.New("ent: ResourceSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := rs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rs *ResourceSelect) IntsX(ctx context.Context) []int {
	v, err := rs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (rs *ResourceSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resource.Label}
	default:
		err = fmt.Errorf("ent: ResourceSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rs *ResourceSelect) IntX(ctx context.Context) int {
	v, err := rs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (rs *ResourceSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(rs.fields) > 1 {
		return nil, errors.New("ent: ResourceSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := rs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rs *ResourceSelect) Float64sX(ctx context.Context) []float64 {
	v, err := rs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (rs *ResourceSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resource.Label}
	default:
		err = fmt.Errorf("ent: ResourceSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rs *ResourceSelect) Float64X(ctx context.Context) float64 {
	v, err := rs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (rs *ResourceSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(rs.fields) > 1 {
		return nil, errors.New("ent: ResourceSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := rs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rs *ResourceSelect) BoolsX(ctx context.Context) []bool {
	v, err := rs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (rs *ResourceSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resource.Label}
	default:
		err = fmt.Errorf("ent: ResourceSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rs *ResourceSelect) BoolX(ctx context.Context) bool {
	v, err := rs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rs *ResourceSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := rs.sql.Query()
	if err := rs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
