// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hello/pkg/ent/predicate"
	"hello/pkg/ent/spiderdevtblservicetree"
	"math"
	"reflect"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpiderDevTblServicetreeQuery is the builder for querying SpiderDevTblServicetree entities.
type SpiderDevTblServicetreeQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.SpiderDevTblServicetree
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SpiderDevTblServicetreeQuery builder.
func (sdtsq *SpiderDevTblServicetreeQuery) Where(ps ...predicate.SpiderDevTblServicetree) *SpiderDevTblServicetreeQuery {
	sdtsq.predicates = append(sdtsq.predicates, ps...)
	return sdtsq
}

// Limit adds a limit step to the query.
func (sdtsq *SpiderDevTblServicetreeQuery) Limit(limit int) *SpiderDevTblServicetreeQuery {
	sdtsq.limit = &limit
	return sdtsq
}

// Offset adds an offset step to the query.
func (sdtsq *SpiderDevTblServicetreeQuery) Offset(offset int) *SpiderDevTblServicetreeQuery {
	sdtsq.offset = &offset
	return sdtsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sdtsq *SpiderDevTblServicetreeQuery) Unique(unique bool) *SpiderDevTblServicetreeQuery {
	sdtsq.unique = &unique
	return sdtsq
}

// Order adds an order step to the query.
func (sdtsq *SpiderDevTblServicetreeQuery) Order(o ...OrderFunc) *SpiderDevTblServicetreeQuery {
	sdtsq.order = append(sdtsq.order, o...)
	return sdtsq
}

// First returns the first SpiderDevTblServicetree entity from the query.
// Returns a *NotFoundError when no SpiderDevTblServicetree was found.
func (sdtsq *SpiderDevTblServicetreeQuery) First(ctx context.Context) (*SpiderDevTblServicetree, error) {
	nodes, err := sdtsq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{spiderdevtblservicetree.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sdtsq *SpiderDevTblServicetreeQuery) FirstX(ctx context.Context) *SpiderDevTblServicetree {
	node, err := sdtsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SpiderDevTblServicetree ID from the query.
// Returns a *NotFoundError when no SpiderDevTblServicetree ID was found.
func (sdtsq *SpiderDevTblServicetreeQuery) FirstID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = sdtsq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{spiderdevtblservicetree.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sdtsq *SpiderDevTblServicetreeQuery) FirstIDX(ctx context.Context) int32 {
	id, err := sdtsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SpiderDevTblServicetree entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SpiderDevTblServicetree entity is found.
// Returns a *NotFoundError when no SpiderDevTblServicetree entities are found.
func (sdtsq *SpiderDevTblServicetreeQuery) Only(ctx context.Context) (*SpiderDevTblServicetree, error) {
	nodes, err := sdtsq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{spiderdevtblservicetree.Label}
	default:
		return nil, &NotSingularError{spiderdevtblservicetree.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sdtsq *SpiderDevTblServicetreeQuery) OnlyX(ctx context.Context) *SpiderDevTblServicetree {
	node, err := sdtsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SpiderDevTblServicetree ID in the query.
// Returns a *NotSingularError when more than one SpiderDevTblServicetree ID is found.
// Returns a *NotFoundError when no entities are found.
func (sdtsq *SpiderDevTblServicetreeQuery) OnlyID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = sdtsq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{spiderdevtblservicetree.Label}
	default:
		err = &NotSingularError{spiderdevtblservicetree.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sdtsq *SpiderDevTblServicetreeQuery) OnlyIDX(ctx context.Context) int32 {
	id, err := sdtsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SpiderDevTblServicetrees.
func (sdtsq *SpiderDevTblServicetreeQuery) All(ctx context.Context) ([]*SpiderDevTblServicetree, error) {
	if err := sdtsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return sdtsq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (sdtsq *SpiderDevTblServicetreeQuery) AllX(ctx context.Context) []*SpiderDevTblServicetree {
	nodes, err := sdtsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SpiderDevTblServicetree IDs.
func (sdtsq *SpiderDevTblServicetreeQuery) IDs(ctx context.Context) ([]int32, error) {
	var ids []int32
	if err := sdtsq.Select(spiderdevtblservicetree.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sdtsq *SpiderDevTblServicetreeQuery) IDsX(ctx context.Context) []int32 {
	ids, err := sdtsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sdtsq *SpiderDevTblServicetreeQuery) Count(ctx context.Context) (int, error) {
	if err := sdtsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return sdtsq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (sdtsq *SpiderDevTblServicetreeQuery) CountX(ctx context.Context) int {
	count, err := sdtsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sdtsq *SpiderDevTblServicetreeQuery) Exist(ctx context.Context) (bool, error) {
	if err := sdtsq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return sdtsq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (sdtsq *SpiderDevTblServicetreeQuery) ExistX(ctx context.Context) bool {
	exist, err := sdtsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SpiderDevTblServicetreeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sdtsq *SpiderDevTblServicetreeQuery) Clone() *SpiderDevTblServicetreeQuery {
	if sdtsq == nil {
		return nil
	}
	return &SpiderDevTblServicetreeQuery{
		config:     sdtsq.config,
		limit:      sdtsq.limit,
		offset:     sdtsq.offset,
		order:      append([]OrderFunc{}, sdtsq.order...),
		predicates: append([]predicate.SpiderDevTblServicetree{}, sdtsq.predicates...),
		// clone intermediate query.
		sql:    sdtsq.sql.Clone(),
		path:   sdtsq.path,
		unique: sdtsq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SpiderDevTblServicetree.Query().
//		GroupBy(spiderdevtblservicetree.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (sdtsq *SpiderDevTblServicetreeQuery) GroupBy(field string, fields ...string) *SpiderDevTblServicetreeGroupBy {
	group := &SpiderDevTblServicetreeGroupBy{config: sdtsq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := sdtsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return sdtsq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.SpiderDevTblServicetree.Query().
//		Select(spiderdevtblservicetree.FieldName).
//		Scan(ctx, &v)
//
func (sdtsq *SpiderDevTblServicetreeQuery) Select(fields ...string) *SpiderDevTblServicetreeSelect {
	sdtsq.fields = append(sdtsq.fields, fields...)
	return &SpiderDevTblServicetreeSelect{SpiderDevTblServicetreeQuery: sdtsq}
}

func (sdtsq *SpiderDevTblServicetreeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range sdtsq.fields {
		if !spiderdevtblservicetree.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sdtsq.path != nil {
		prev, err := sdtsq.path(ctx)
		if err != nil {
			return err
		}
		sdtsq.sql = prev
	}
	return nil
}

func (sdtsq *SpiderDevTblServicetreeQuery) sqlAll(ctx context.Context) ([]*SpiderDevTblServicetree, error) {
	var (
		nodes = []*SpiderDevTblServicetree{}
		_spec = sdtsq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &SpiderDevTblServicetree{config: sdtsq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, sdtsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (sdtsq *SpiderDevTblServicetreeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sdtsq.querySpec()
	_spec.Node.Columns = sdtsq.fields
	if len(sdtsq.fields) > 0 {
		_spec.Unique = sdtsq.unique != nil && *sdtsq.unique
	}
	return sqlgraph.CountNodes(ctx, sdtsq.driver, _spec)
}

func (sdtsq *SpiderDevTblServicetreeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := sdtsq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (sdtsq *SpiderDevTblServicetreeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   spiderdevtblservicetree.Table,
			Columns: spiderdevtblservicetree.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: spiderdevtblservicetree.FieldID,
			},
		},
		From:   sdtsq.sql,
		Unique: true,
	}
	if unique := sdtsq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := sdtsq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spiderdevtblservicetree.FieldID)
		for i := range fields {
			if fields[i] != spiderdevtblservicetree.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sdtsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sdtsq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sdtsq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sdtsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sdtsq *SpiderDevTblServicetreeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sdtsq.driver.Dialect())
	t1 := builder.Table(spiderdevtblservicetree.Table)
	columns := sdtsq.fields
	if len(columns) == 0 {
		columns = spiderdevtblservicetree.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sdtsq.sql != nil {
		selector = sdtsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sdtsq.unique != nil && *sdtsq.unique {
		selector.Distinct()
	}
	for _, p := range sdtsq.predicates {
		p(selector)
	}
	for _, p := range sdtsq.order {
		p(selector)
	}
	if offset := sdtsq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sdtsq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

type SpiderDevTblServicetreeTableFormer interface {
	Query(q *SpiderDevTblServicetreeQuery)
}

type SpiderDevTblServicetreeTablePagingForm struct {
	Limit *int `json:"_limit" form:"_limit"`
	Page  *int `json:"_page" form:"_page"`
}

func (f SpiderDevTblServicetreeTablePagingForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.Limit != nil && f.Page != nil {
		q.Limit(*f.Limit).Offset((*f.Page - 1) * *f.Limit)
	}
}

type SpiderDevTblServicetreeTableOrderForm struct {
	Order  *string `json:"order" form:"_order" binding:"omitempty,oneof=acs desc"`
	SortBy *string `json:"sortBy" form:"_sortBy"`
}

func (f SpiderDevTblServicetreeTableOrderForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.Order != nil && f.SortBy != nil {
		if *f.Order == "acs" {
			q.Order(Asc(*f.SortBy))
		}

		if *f.Order == "desc" {
			q.Order(Desc(*f.SortBy))
		}
	}
}

func SetSpiderDevTblServicetreeFormQueries(o interface{}, q *SpiderDevTblServicetreeQuery) []SpiderDevTblServicetreeTableFormer {
	l := make([]SpiderDevTblServicetreeTableFormer, 0)
	v := reflect.ValueOf(o)
	former := reflect.TypeOf((*SpiderDevTblServicetreeTableFormer)(nil)).Elem()
	SpiderDevTblServicetreeFormDepValue(v, former, &l)
	for _, e := range l {
		e.Query(q)
	}
	return l
}

func SpiderDevTblServicetreeFormDepValue(v reflect.Value, former reflect.Type, l *[]SpiderDevTblServicetreeTableFormer) {
	for i := 0; i < v.NumField(); i++ {
		f := v.Field(i)
		if f.IsZero() {
			continue
		}
		if f.Type().Implements(former) {
			*l = append(*l, f.Interface().(SpiderDevTblServicetreeTableFormer))
			continue
		}
		if f.Type().Kind() == reflect.Struct {
			SpiderDevTblServicetreeFormDepValue(f, former, l)
		}
	}
}

type SpiderDevTblServicetreeTableNameEQForm struct {
	NameEQ *string `form:"NameEQ" json:"NameEQ"`
}

func (f SpiderDevTblServicetreeTableNameEQForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.NameEQ != nil {
		q.Where(spiderdevtblservicetree.NameEQ(*f.NameEQ))
	}
}

type SpiderDevTblServicetreeTableNameNEQForm struct {
	NameNEQ *string `form:"NameNEQ" json:"NameNEQ"`
}

func (f SpiderDevTblServicetreeTableNameNEQForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.NameNEQ != nil {
		q.Where(spiderdevtblservicetree.NameNEQ(*f.NameNEQ))
	}
}

type SpiderDevTblServicetreeTableNameInForm struct {
	NameIn *[]string `form:"NameIn" json:"NameIn"`
}

func (f SpiderDevTblServicetreeTableNameInForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.NameIn != nil {
		q.Where(spiderdevtblservicetree.NameIn(*f.NameIn...))
	}
}

type SpiderDevTblServicetreeTableNameNotInForm struct {
	NameNotIn *[]string `form:"NameNotIn" json:"NameNotIn"`
}

func (f SpiderDevTblServicetreeTableNameNotInForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.NameNotIn != nil {
		q.Where(spiderdevtblservicetree.NameNotIn(*f.NameNotIn...))
	}
}

type SpiderDevTblServicetreeTableNameGTForm struct {
	NameGT *string `form:"NameGT" json:"NameGT"`
}

func (f SpiderDevTblServicetreeTableNameGTForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.NameGT != nil {
		q.Where(spiderdevtblservicetree.NameGT(*f.NameGT))
	}
}

type SpiderDevTblServicetreeTableNameGTEForm struct {
	NameGTE *string `form:"NameGTE" json:"NameGTE"`
}

func (f SpiderDevTblServicetreeTableNameGTEForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.NameGTE != nil {
		q.Where(spiderdevtblservicetree.NameGTE(*f.NameGTE))
	}
}

type SpiderDevTblServicetreeTableNameLTForm struct {
	NameLT *string `form:"NameLT" json:"NameLT"`
}

func (f SpiderDevTblServicetreeTableNameLTForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.NameLT != nil {
		q.Where(spiderdevtblservicetree.NameLT(*f.NameLT))
	}
}

type SpiderDevTblServicetreeTableNameLTEForm struct {
	NameLTE *string `form:"NameLTE" json:"NameLTE"`
}

func (f SpiderDevTblServicetreeTableNameLTEForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.NameLTE != nil {
		q.Where(spiderdevtblservicetree.NameLTE(*f.NameLTE))
	}
}

type SpiderDevTblServicetreeTableNameContainsForm struct {
	NameContains *string `form:"NameContains" json:"NameContains"`
}

func (f SpiderDevTblServicetreeTableNameContainsForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.NameContains != nil {
		q.Where(spiderdevtblservicetree.NameContains(*f.NameContains))
	}
}

type SpiderDevTblServicetreeTableNameHasPrefixForm struct {
	NameHasPrefix *string `form:"NameHasPrefix" json:"NameHasPrefix"`
}

func (f SpiderDevTblServicetreeTableNameHasPrefixForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.NameHasPrefix != nil {
		q.Where(spiderdevtblservicetree.NameHasPrefix(*f.NameHasPrefix))
	}
}

type SpiderDevTblServicetreeTableNameHasSuffixForm struct {
	NameHasSuffix *string `form:"NameHasSuffix" json:"NameHasSuffix"`
}

func (f SpiderDevTblServicetreeTableNameHasSuffixForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.NameHasSuffix != nil {
		q.Where(spiderdevtblservicetree.NameHasSuffix(*f.NameHasSuffix))
	}
}

type SpiderDevTblServicetreeTableNameEqualFoldForm struct {
	NameEqualFold *string `form:"NameEqualFold" json:"NameEqualFold"`
}

func (f SpiderDevTblServicetreeTableNameEqualFoldForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.NameEqualFold != nil {
		q.Where(spiderdevtblservicetree.NameEqualFold(*f.NameEqualFold))
	}
}

type SpiderDevTblServicetreeTableNameContainsFoldForm struct {
	NameContainsFold *string `form:"NameContainsFold" json:"NameContainsFold"`
}

func (f SpiderDevTblServicetreeTableNameContainsFoldForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.NameContainsFold != nil {
		q.Where(spiderdevtblservicetree.NameContainsFold(*f.NameContainsFold))
	}
}

type SpiderDevTblServicetreeTableAnameEQForm struct {
	AnameEQ *string `form:"AnameEQ" json:"AnameEQ"`
}

func (f SpiderDevTblServicetreeTableAnameEQForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.AnameEQ != nil {
		q.Where(spiderdevtblservicetree.AnameEQ(*f.AnameEQ))
	}
}

type SpiderDevTblServicetreeTableAnameNEQForm struct {
	AnameNEQ *string `form:"AnameNEQ" json:"AnameNEQ"`
}

func (f SpiderDevTblServicetreeTableAnameNEQForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.AnameNEQ != nil {
		q.Where(spiderdevtblservicetree.AnameNEQ(*f.AnameNEQ))
	}
}

type SpiderDevTblServicetreeTableAnameInForm struct {
	AnameIn *[]string `form:"AnameIn" json:"AnameIn"`
}

func (f SpiderDevTblServicetreeTableAnameInForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.AnameIn != nil {
		q.Where(spiderdevtblservicetree.AnameIn(*f.AnameIn...))
	}
}

type SpiderDevTblServicetreeTableAnameNotInForm struct {
	AnameNotIn *[]string `form:"AnameNotIn" json:"AnameNotIn"`
}

func (f SpiderDevTblServicetreeTableAnameNotInForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.AnameNotIn != nil {
		q.Where(spiderdevtblservicetree.AnameNotIn(*f.AnameNotIn...))
	}
}

type SpiderDevTblServicetreeTableAnameGTForm struct {
	AnameGT *string `form:"AnameGT" json:"AnameGT"`
}

func (f SpiderDevTblServicetreeTableAnameGTForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.AnameGT != nil {
		q.Where(spiderdevtblservicetree.AnameGT(*f.AnameGT))
	}
}

type SpiderDevTblServicetreeTableAnameGTEForm struct {
	AnameGTE *string `form:"AnameGTE" json:"AnameGTE"`
}

func (f SpiderDevTblServicetreeTableAnameGTEForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.AnameGTE != nil {
		q.Where(spiderdevtblservicetree.AnameGTE(*f.AnameGTE))
	}
}

type SpiderDevTblServicetreeTableAnameLTForm struct {
	AnameLT *string `form:"AnameLT" json:"AnameLT"`
}

func (f SpiderDevTblServicetreeTableAnameLTForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.AnameLT != nil {
		q.Where(spiderdevtblservicetree.AnameLT(*f.AnameLT))
	}
}

type SpiderDevTblServicetreeTableAnameLTEForm struct {
	AnameLTE *string `form:"AnameLTE" json:"AnameLTE"`
}

func (f SpiderDevTblServicetreeTableAnameLTEForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.AnameLTE != nil {
		q.Where(spiderdevtblservicetree.AnameLTE(*f.AnameLTE))
	}
}

type SpiderDevTblServicetreeTableAnameContainsForm struct {
	AnameContains *string `form:"AnameContains" json:"AnameContains"`
}

func (f SpiderDevTblServicetreeTableAnameContainsForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.AnameContains != nil {
		q.Where(spiderdevtblservicetree.AnameContains(*f.AnameContains))
	}
}

type SpiderDevTblServicetreeTableAnameHasPrefixForm struct {
	AnameHasPrefix *string `form:"AnameHasPrefix" json:"AnameHasPrefix"`
}

func (f SpiderDevTblServicetreeTableAnameHasPrefixForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.AnameHasPrefix != nil {
		q.Where(spiderdevtblservicetree.AnameHasPrefix(*f.AnameHasPrefix))
	}
}

type SpiderDevTblServicetreeTableAnameHasSuffixForm struct {
	AnameHasSuffix *string `form:"AnameHasSuffix" json:"AnameHasSuffix"`
}

func (f SpiderDevTblServicetreeTableAnameHasSuffixForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.AnameHasSuffix != nil {
		q.Where(spiderdevtblservicetree.AnameHasSuffix(*f.AnameHasSuffix))
	}
}

type SpiderDevTblServicetreeTableAnameEqualFoldForm struct {
	AnameEqualFold *string `form:"AnameEqualFold" json:"AnameEqualFold"`
}

func (f SpiderDevTblServicetreeTableAnameEqualFoldForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.AnameEqualFold != nil {
		q.Where(spiderdevtblservicetree.AnameEqualFold(*f.AnameEqualFold))
	}
}

type SpiderDevTblServicetreeTableAnameContainsFoldForm struct {
	AnameContainsFold *string `form:"AnameContainsFold" json:"AnameContainsFold"`
}

func (f SpiderDevTblServicetreeTableAnameContainsFoldForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.AnameContainsFold != nil {
		q.Where(spiderdevtblservicetree.AnameContainsFold(*f.AnameContainsFold))
	}
}

type SpiderDevTblServicetreeTablePnodeEQForm struct {
	PnodeEQ *int32 `form:"PnodeEQ" json:"PnodeEQ"`
}

func (f SpiderDevTblServicetreeTablePnodeEQForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.PnodeEQ != nil {
		q.Where(spiderdevtblservicetree.PnodeEQ(*f.PnodeEQ))
	}
}

type SpiderDevTblServicetreeTablePnodeNEQForm struct {
	PnodeNEQ *int32 `form:"PnodeNEQ" json:"PnodeNEQ"`
}

func (f SpiderDevTblServicetreeTablePnodeNEQForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.PnodeNEQ != nil {
		q.Where(spiderdevtblservicetree.PnodeNEQ(*f.PnodeNEQ))
	}
}

type SpiderDevTblServicetreeTablePnodeInForm struct {
	PnodeIn *[]int32 `form:"PnodeIn" json:"PnodeIn"`
}

func (f SpiderDevTblServicetreeTablePnodeInForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.PnodeIn != nil {
		q.Where(spiderdevtblservicetree.PnodeIn(*f.PnodeIn...))
	}
}

type SpiderDevTblServicetreeTablePnodeNotInForm struct {
	PnodeNotIn *[]int32 `form:"PnodeNotIn" json:"PnodeNotIn"`
}

func (f SpiderDevTblServicetreeTablePnodeNotInForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.PnodeNotIn != nil {
		q.Where(spiderdevtblservicetree.PnodeNotIn(*f.PnodeNotIn...))
	}
}

type SpiderDevTblServicetreeTablePnodeGTForm struct {
	PnodeGT *int32 `form:"PnodeGT" json:"PnodeGT"`
}

func (f SpiderDevTblServicetreeTablePnodeGTForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.PnodeGT != nil {
		q.Where(spiderdevtblservicetree.PnodeGT(*f.PnodeGT))
	}
}

type SpiderDevTblServicetreeTablePnodeGTEForm struct {
	PnodeGTE *int32 `form:"PnodeGTE" json:"PnodeGTE"`
}

func (f SpiderDevTblServicetreeTablePnodeGTEForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.PnodeGTE != nil {
		q.Where(spiderdevtblservicetree.PnodeGTE(*f.PnodeGTE))
	}
}

type SpiderDevTblServicetreeTablePnodeLTForm struct {
	PnodeLT *int32 `form:"PnodeLT" json:"PnodeLT"`
}

func (f SpiderDevTblServicetreeTablePnodeLTForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.PnodeLT != nil {
		q.Where(spiderdevtblservicetree.PnodeLT(*f.PnodeLT))
	}
}

type SpiderDevTblServicetreeTablePnodeLTEForm struct {
	PnodeLTE *int32 `form:"PnodeLTE" json:"PnodeLTE"`
}

func (f SpiderDevTblServicetreeTablePnodeLTEForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.PnodeLTE != nil {
		q.Where(spiderdevtblservicetree.PnodeLTE(*f.PnodeLTE))
	}
}

type SpiderDevTblServicetreeTableTypeEQForm struct {
	TypeEQ *int32 `form:"TypeEQ" json:"TypeEQ"`
}

func (f SpiderDevTblServicetreeTableTypeEQForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.TypeEQ != nil {
		q.Where(spiderdevtblservicetree.TypeEQ(*f.TypeEQ))
	}
}

type SpiderDevTblServicetreeTableTypeNEQForm struct {
	TypeNEQ *int32 `form:"TypeNEQ" json:"TypeNEQ"`
}

func (f SpiderDevTblServicetreeTableTypeNEQForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.TypeNEQ != nil {
		q.Where(spiderdevtblservicetree.TypeNEQ(*f.TypeNEQ))
	}
}

type SpiderDevTblServicetreeTableTypeInForm struct {
	TypeIn *[]int32 `form:"TypeIn" json:"TypeIn"`
}

func (f SpiderDevTblServicetreeTableTypeInForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.TypeIn != nil {
		q.Where(spiderdevtblservicetree.TypeIn(*f.TypeIn...))
	}
}

type SpiderDevTblServicetreeTableTypeNotInForm struct {
	TypeNotIn *[]int32 `form:"TypeNotIn" json:"TypeNotIn"`
}

func (f SpiderDevTblServicetreeTableTypeNotInForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.TypeNotIn != nil {
		q.Where(spiderdevtblservicetree.TypeNotIn(*f.TypeNotIn...))
	}
}

type SpiderDevTblServicetreeTableTypeGTForm struct {
	TypeGT *int32 `form:"TypeGT" json:"TypeGT"`
}

func (f SpiderDevTblServicetreeTableTypeGTForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.TypeGT != nil {
		q.Where(spiderdevtblservicetree.TypeGT(*f.TypeGT))
	}
}

type SpiderDevTblServicetreeTableTypeGTEForm struct {
	TypeGTE *int32 `form:"TypeGTE" json:"TypeGTE"`
}

func (f SpiderDevTblServicetreeTableTypeGTEForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.TypeGTE != nil {
		q.Where(spiderdevtblservicetree.TypeGTE(*f.TypeGTE))
	}
}

type SpiderDevTblServicetreeTableTypeLTForm struct {
	TypeLT *int32 `form:"TypeLT" json:"TypeLT"`
}

func (f SpiderDevTblServicetreeTableTypeLTForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.TypeLT != nil {
		q.Where(spiderdevtblservicetree.TypeLT(*f.TypeLT))
	}
}

type SpiderDevTblServicetreeTableTypeLTEForm struct {
	TypeLTE *int32 `form:"TypeLTE" json:"TypeLTE"`
}

func (f SpiderDevTblServicetreeTableTypeLTEForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.TypeLTE != nil {
		q.Where(spiderdevtblservicetree.TypeLTE(*f.TypeLTE))
	}
}

type SpiderDevTblServicetreeTableKeyEQForm struct {
	KeyEQ *string `form:"KeyEQ" json:"KeyEQ"`
}

func (f SpiderDevTblServicetreeTableKeyEQForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.KeyEQ != nil {
		q.Where(spiderdevtblservicetree.KeyEQ(*f.KeyEQ))
	}
}

type SpiderDevTblServicetreeTableKeyNEQForm struct {
	KeyNEQ *string `form:"KeyNEQ" json:"KeyNEQ"`
}

func (f SpiderDevTblServicetreeTableKeyNEQForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.KeyNEQ != nil {
		q.Where(spiderdevtblservicetree.KeyNEQ(*f.KeyNEQ))
	}
}

type SpiderDevTblServicetreeTableKeyInForm struct {
	KeyIn *[]string `form:"KeyIn" json:"KeyIn"`
}

func (f SpiderDevTblServicetreeTableKeyInForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.KeyIn != nil {
		q.Where(spiderdevtblservicetree.KeyIn(*f.KeyIn...))
	}
}

type SpiderDevTblServicetreeTableKeyNotInForm struct {
	KeyNotIn *[]string `form:"KeyNotIn" json:"KeyNotIn"`
}

func (f SpiderDevTblServicetreeTableKeyNotInForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.KeyNotIn != nil {
		q.Where(spiderdevtblservicetree.KeyNotIn(*f.KeyNotIn...))
	}
}

type SpiderDevTblServicetreeTableKeyGTForm struct {
	KeyGT *string `form:"KeyGT" json:"KeyGT"`
}

func (f SpiderDevTblServicetreeTableKeyGTForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.KeyGT != nil {
		q.Where(spiderdevtblservicetree.KeyGT(*f.KeyGT))
	}
}

type SpiderDevTblServicetreeTableKeyGTEForm struct {
	KeyGTE *string `form:"KeyGTE" json:"KeyGTE"`
}

func (f SpiderDevTblServicetreeTableKeyGTEForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.KeyGTE != nil {
		q.Where(spiderdevtblservicetree.KeyGTE(*f.KeyGTE))
	}
}

type SpiderDevTblServicetreeTableKeyLTForm struct {
	KeyLT *string `form:"KeyLT" json:"KeyLT"`
}

func (f SpiderDevTblServicetreeTableKeyLTForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.KeyLT != nil {
		q.Where(spiderdevtblservicetree.KeyLT(*f.KeyLT))
	}
}

type SpiderDevTblServicetreeTableKeyLTEForm struct {
	KeyLTE *string `form:"KeyLTE" json:"KeyLTE"`
}

func (f SpiderDevTblServicetreeTableKeyLTEForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.KeyLTE != nil {
		q.Where(spiderdevtblservicetree.KeyLTE(*f.KeyLTE))
	}
}

type SpiderDevTblServicetreeTableKeyContainsForm struct {
	KeyContains *string `form:"KeyContains" json:"KeyContains"`
}

func (f SpiderDevTblServicetreeTableKeyContainsForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.KeyContains != nil {
		q.Where(spiderdevtblservicetree.KeyContains(*f.KeyContains))
	}
}

type SpiderDevTblServicetreeTableKeyHasPrefixForm struct {
	KeyHasPrefix *string `form:"KeyHasPrefix" json:"KeyHasPrefix"`
}

func (f SpiderDevTblServicetreeTableKeyHasPrefixForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.KeyHasPrefix != nil {
		q.Where(spiderdevtblservicetree.KeyHasPrefix(*f.KeyHasPrefix))
	}
}

type SpiderDevTblServicetreeTableKeyHasSuffixForm struct {
	KeyHasSuffix *string `form:"KeyHasSuffix" json:"KeyHasSuffix"`
}

func (f SpiderDevTblServicetreeTableKeyHasSuffixForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.KeyHasSuffix != nil {
		q.Where(spiderdevtblservicetree.KeyHasSuffix(*f.KeyHasSuffix))
	}
}

type SpiderDevTblServicetreeTableKeyEqualFoldForm struct {
	KeyEqualFold *string `form:"KeyEqualFold" json:"KeyEqualFold"`
}

func (f SpiderDevTblServicetreeTableKeyEqualFoldForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.KeyEqualFold != nil {
		q.Where(spiderdevtblservicetree.KeyEqualFold(*f.KeyEqualFold))
	}
}

type SpiderDevTblServicetreeTableKeyContainsFoldForm struct {
	KeyContainsFold *string `form:"KeyContainsFold" json:"KeyContainsFold"`
}

func (f SpiderDevTblServicetreeTableKeyContainsFoldForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.KeyContainsFold != nil {
		q.Where(spiderdevtblservicetree.KeyContainsFold(*f.KeyContainsFold))
	}
}

type SpiderDevTblServicetreeTableOriginEQForm struct {
	OriginEQ *string `form:"OriginEQ" json:"OriginEQ"`
}

func (f SpiderDevTblServicetreeTableOriginEQForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.OriginEQ != nil {
		q.Where(spiderdevtblservicetree.OriginEQ(*f.OriginEQ))
	}
}

type SpiderDevTblServicetreeTableOriginNEQForm struct {
	OriginNEQ *string `form:"OriginNEQ" json:"OriginNEQ"`
}

func (f SpiderDevTblServicetreeTableOriginNEQForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.OriginNEQ != nil {
		q.Where(spiderdevtblservicetree.OriginNEQ(*f.OriginNEQ))
	}
}

type SpiderDevTblServicetreeTableOriginInForm struct {
	OriginIn *[]string `form:"OriginIn" json:"OriginIn"`
}

func (f SpiderDevTblServicetreeTableOriginInForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.OriginIn != nil {
		q.Where(spiderdevtblservicetree.OriginIn(*f.OriginIn...))
	}
}

type SpiderDevTblServicetreeTableOriginNotInForm struct {
	OriginNotIn *[]string `form:"OriginNotIn" json:"OriginNotIn"`
}

func (f SpiderDevTblServicetreeTableOriginNotInForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.OriginNotIn != nil {
		q.Where(spiderdevtblservicetree.OriginNotIn(*f.OriginNotIn...))
	}
}

type SpiderDevTblServicetreeTableOriginGTForm struct {
	OriginGT *string `form:"OriginGT" json:"OriginGT"`
}

func (f SpiderDevTblServicetreeTableOriginGTForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.OriginGT != nil {
		q.Where(spiderdevtblservicetree.OriginGT(*f.OriginGT))
	}
}

type SpiderDevTblServicetreeTableOriginGTEForm struct {
	OriginGTE *string `form:"OriginGTE" json:"OriginGTE"`
}

func (f SpiderDevTblServicetreeTableOriginGTEForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.OriginGTE != nil {
		q.Where(spiderdevtblservicetree.OriginGTE(*f.OriginGTE))
	}
}

type SpiderDevTblServicetreeTableOriginLTForm struct {
	OriginLT *string `form:"OriginLT" json:"OriginLT"`
}

func (f SpiderDevTblServicetreeTableOriginLTForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.OriginLT != nil {
		q.Where(spiderdevtblservicetree.OriginLT(*f.OriginLT))
	}
}

type SpiderDevTblServicetreeTableOriginLTEForm struct {
	OriginLTE *string `form:"OriginLTE" json:"OriginLTE"`
}

func (f SpiderDevTblServicetreeTableOriginLTEForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.OriginLTE != nil {
		q.Where(spiderdevtblservicetree.OriginLTE(*f.OriginLTE))
	}
}

type SpiderDevTblServicetreeTableOriginContainsForm struct {
	OriginContains *string `form:"OriginContains" json:"OriginContains"`
}

func (f SpiderDevTblServicetreeTableOriginContainsForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.OriginContains != nil {
		q.Where(spiderdevtblservicetree.OriginContains(*f.OriginContains))
	}
}

type SpiderDevTblServicetreeTableOriginHasPrefixForm struct {
	OriginHasPrefix *string `form:"OriginHasPrefix" json:"OriginHasPrefix"`
}

func (f SpiderDevTblServicetreeTableOriginHasPrefixForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.OriginHasPrefix != nil {
		q.Where(spiderdevtblservicetree.OriginHasPrefix(*f.OriginHasPrefix))
	}
}

type SpiderDevTblServicetreeTableOriginHasSuffixForm struct {
	OriginHasSuffix *string `form:"OriginHasSuffix" json:"OriginHasSuffix"`
}

func (f SpiderDevTblServicetreeTableOriginHasSuffixForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.OriginHasSuffix != nil {
		q.Where(spiderdevtblservicetree.OriginHasSuffix(*f.OriginHasSuffix))
	}
}

type SpiderDevTblServicetreeTableOriginEqualFoldForm struct {
	OriginEqualFold *string `form:"OriginEqualFold" json:"OriginEqualFold"`
}

func (f SpiderDevTblServicetreeTableOriginEqualFoldForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.OriginEqualFold != nil {
		q.Where(spiderdevtblservicetree.OriginEqualFold(*f.OriginEqualFold))
	}
}

type SpiderDevTblServicetreeTableOriginContainsFoldForm struct {
	OriginContainsFold *string `form:"OriginContainsFold" json:"OriginContainsFold"`
}

func (f SpiderDevTblServicetreeTableOriginContainsFoldForm) Query(q *SpiderDevTblServicetreeQuery) {
	if f.OriginContainsFold != nil {
		q.Where(spiderdevtblservicetree.OriginContainsFold(*f.OriginContainsFold))
	}
}

// SpiderDevTblServicetreeGroupBy is the group-by builder for SpiderDevTblServicetree entities.
type SpiderDevTblServicetreeGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sdtsgb *SpiderDevTblServicetreeGroupBy) Aggregate(fns ...AggregateFunc) *SpiderDevTblServicetreeGroupBy {
	sdtsgb.fns = append(sdtsgb.fns, fns...)
	return sdtsgb
}

// Scan applies the group-by query and scans the result into the given value.
func (sdtsgb *SpiderDevTblServicetreeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := sdtsgb.path(ctx)
	if err != nil {
		return err
	}
	sdtsgb.sql = query
	return sdtsgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sdtsgb *SpiderDevTblServicetreeGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := sdtsgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (sdtsgb *SpiderDevTblServicetreeGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(sdtsgb.fields) > 1 {
		return nil, errors.New("ent: SpiderDevTblServicetreeGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := sdtsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sdtsgb *SpiderDevTblServicetreeGroupBy) StringsX(ctx context.Context) []string {
	v, err := sdtsgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sdtsgb *SpiderDevTblServicetreeGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sdtsgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{spiderdevtblservicetree.Label}
	default:
		err = fmt.Errorf("ent: SpiderDevTblServicetreeGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sdtsgb *SpiderDevTblServicetreeGroupBy) StringX(ctx context.Context) string {
	v, err := sdtsgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (sdtsgb *SpiderDevTblServicetreeGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(sdtsgb.fields) > 1 {
		return nil, errors.New("ent: SpiderDevTblServicetreeGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := sdtsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sdtsgb *SpiderDevTblServicetreeGroupBy) IntsX(ctx context.Context) []int {
	v, err := sdtsgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sdtsgb *SpiderDevTblServicetreeGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sdtsgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{spiderdevtblservicetree.Label}
	default:
		err = fmt.Errorf("ent: SpiderDevTblServicetreeGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sdtsgb *SpiderDevTblServicetreeGroupBy) IntX(ctx context.Context) int {
	v, err := sdtsgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (sdtsgb *SpiderDevTblServicetreeGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(sdtsgb.fields) > 1 {
		return nil, errors.New("ent: SpiderDevTblServicetreeGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := sdtsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sdtsgb *SpiderDevTblServicetreeGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := sdtsgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sdtsgb *SpiderDevTblServicetreeGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sdtsgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{spiderdevtblservicetree.Label}
	default:
		err = fmt.Errorf("ent: SpiderDevTblServicetreeGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sdtsgb *SpiderDevTblServicetreeGroupBy) Float64X(ctx context.Context) float64 {
	v, err := sdtsgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (sdtsgb *SpiderDevTblServicetreeGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(sdtsgb.fields) > 1 {
		return nil, errors.New("ent: SpiderDevTblServicetreeGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := sdtsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sdtsgb *SpiderDevTblServicetreeGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := sdtsgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sdtsgb *SpiderDevTblServicetreeGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sdtsgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{spiderdevtblservicetree.Label}
	default:
		err = fmt.Errorf("ent: SpiderDevTblServicetreeGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sdtsgb *SpiderDevTblServicetreeGroupBy) BoolX(ctx context.Context) bool {
	v, err := sdtsgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sdtsgb *SpiderDevTblServicetreeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range sdtsgb.fields {
		if !spiderdevtblservicetree.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := sdtsgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sdtsgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sdtsgb *SpiderDevTblServicetreeGroupBy) sqlQuery() *sql.Selector {
	selector := sdtsgb.sql.Select()
	aggregation := make([]string, 0, len(sdtsgb.fns))
	for _, fn := range sdtsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(sdtsgb.fields)+len(sdtsgb.fns))
		for _, f := range sdtsgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(sdtsgb.fields...)...)
}

// SpiderDevTblServicetreeSelect is the builder for selecting fields of SpiderDevTblServicetree entities.
type SpiderDevTblServicetreeSelect struct {
	*SpiderDevTblServicetreeQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (sdtss *SpiderDevTblServicetreeSelect) Scan(ctx context.Context, v interface{}) error {
	if err := sdtss.prepareQuery(ctx); err != nil {
		return err
	}
	sdtss.sql = sdtss.SpiderDevTblServicetreeQuery.sqlQuery(ctx)
	return sdtss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sdtss *SpiderDevTblServicetreeSelect) ScanX(ctx context.Context, v interface{}) {
	if err := sdtss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (sdtss *SpiderDevTblServicetreeSelect) Strings(ctx context.Context) ([]string, error) {
	if len(sdtss.fields) > 1 {
		return nil, errors.New("ent: SpiderDevTblServicetreeSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := sdtss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sdtss *SpiderDevTblServicetreeSelect) StringsX(ctx context.Context) []string {
	v, err := sdtss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (sdtss *SpiderDevTblServicetreeSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sdtss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{spiderdevtblservicetree.Label}
	default:
		err = fmt.Errorf("ent: SpiderDevTblServicetreeSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sdtss *SpiderDevTblServicetreeSelect) StringX(ctx context.Context) string {
	v, err := sdtss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (sdtss *SpiderDevTblServicetreeSelect) Ints(ctx context.Context) ([]int, error) {
	if len(sdtss.fields) > 1 {
		return nil, errors.New("ent: SpiderDevTblServicetreeSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := sdtss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sdtss *SpiderDevTblServicetreeSelect) IntsX(ctx context.Context) []int {
	v, err := sdtss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (sdtss *SpiderDevTblServicetreeSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sdtss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{spiderdevtblservicetree.Label}
	default:
		err = fmt.Errorf("ent: SpiderDevTblServicetreeSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sdtss *SpiderDevTblServicetreeSelect) IntX(ctx context.Context) int {
	v, err := sdtss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (sdtss *SpiderDevTblServicetreeSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(sdtss.fields) > 1 {
		return nil, errors.New("ent: SpiderDevTblServicetreeSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := sdtss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sdtss *SpiderDevTblServicetreeSelect) Float64sX(ctx context.Context) []float64 {
	v, err := sdtss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (sdtss *SpiderDevTblServicetreeSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sdtss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{spiderdevtblservicetree.Label}
	default:
		err = fmt.Errorf("ent: SpiderDevTblServicetreeSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sdtss *SpiderDevTblServicetreeSelect) Float64X(ctx context.Context) float64 {
	v, err := sdtss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (sdtss *SpiderDevTblServicetreeSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(sdtss.fields) > 1 {
		return nil, errors.New("ent: SpiderDevTblServicetreeSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := sdtss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sdtss *SpiderDevTblServicetreeSelect) BoolsX(ctx context.Context) []bool {
	v, err := sdtss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (sdtss *SpiderDevTblServicetreeSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sdtss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{spiderdevtblservicetree.Label}
	default:
		err = fmt.Errorf("ent: SpiderDevTblServicetreeSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sdtss *SpiderDevTblServicetreeSelect) BoolX(ctx context.Context) bool {
	v, err := sdtss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sdtss *SpiderDevTblServicetreeSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := sdtss.sql.Query()
	if err := sdtss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
