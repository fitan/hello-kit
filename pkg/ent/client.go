// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"hello/pkg/ent/migrate"

	"hello/pkg/ent/pod"
	"hello/pkg/ent/spiderdevtblservicetree"
	"hello/pkg/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Pod is the client for interacting with the Pod builders.
	Pod *PodClient
	// SpiderDevTblServicetree is the client for interacting with the SpiderDevTblServicetree builders.
	SpiderDevTblServicetree *SpiderDevTblServicetreeClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Pod = NewPodClient(c.config)
	c.SpiderDevTblServicetree = NewSpiderDevTblServicetreeClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		Pod:                     NewPodClient(cfg),
		SpiderDevTblServicetree: NewSpiderDevTblServicetreeClient(cfg),
		User:                    NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		Pod:                     NewPodClient(cfg),
		SpiderDevTblServicetree: NewSpiderDevTblServicetreeClient(cfg),
		User:                    NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Pod.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Pod.Use(hooks...)
	c.SpiderDevTblServicetree.Use(hooks...)
	c.User.Use(hooks...)
}

// PodClient is a client for the Pod schema.
type PodClient struct {
	config
}

// NewPodClient returns a client for the Pod from the given config.
func NewPodClient(c config) *PodClient {
	return &PodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pod.Hooks(f(g(h())))`.
func (c *PodClient) Use(hooks ...Hook) {
	c.hooks.Pod = append(c.hooks.Pod, hooks...)
}

// Create returns a create builder for Pod.
func (c *PodClient) Create() *PodCreate {
	mutation := newPodMutation(c.config, OpCreate)
	return &PodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pod entities.
func (c *PodClient) CreateBulk(builders ...*PodCreate) *PodCreateBulk {
	return &PodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pod.
func (c *PodClient) Update() *PodUpdate {
	mutation := newPodMutation(c.config, OpUpdate)
	return &PodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PodClient) UpdateOne(po *Pod) *PodUpdateOne {
	mutation := newPodMutation(c.config, OpUpdateOne, withPod(po))
	return &PodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PodClient) UpdateOneID(id int64) *PodUpdateOne {
	mutation := newPodMutation(c.config, OpUpdateOne, withPodID(id))
	return &PodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pod.
func (c *PodClient) Delete() *PodDelete {
	mutation := newPodMutation(c.config, OpDelete)
	return &PodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PodClient) DeleteOne(po *Pod) *PodDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PodClient) DeleteOneID(id int64) *PodDeleteOne {
	builder := c.Delete().Where(pod.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PodDeleteOne{builder}
}

// Query returns a query builder for Pod.
func (c *PodClient) Query() *PodQuery {
	return &PodQuery{
		config: c.config,
	}
}

// Get returns a Pod entity by its id.
func (c *PodClient) Get(ctx context.Context, id int64) (*Pod, error) {
	return c.Query().Where(pod.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PodClient) GetX(ctx context.Context, id int64) *Pod {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServicetree queries the servicetree edge of a Pod.
func (c *PodClient) QueryServicetree(po *Pod) *SpiderDevTblServicetreeQuery {
	query := &SpiderDevTblServicetreeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pod.Table, pod.FieldID, id),
			sqlgraph.To(spiderdevtblservicetree.Table, spiderdevtblservicetree.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, pod.ServicetreeTable, pod.ServicetreeColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PodClient) Hooks() []Hook {
	return c.hooks.Pod
}

// SpiderDevTblServicetreeClient is a client for the SpiderDevTblServicetree schema.
type SpiderDevTblServicetreeClient struct {
	config
}

// NewSpiderDevTblServicetreeClient returns a client for the SpiderDevTblServicetree from the given config.
func NewSpiderDevTblServicetreeClient(c config) *SpiderDevTblServicetreeClient {
	return &SpiderDevTblServicetreeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `spiderdevtblservicetree.Hooks(f(g(h())))`.
func (c *SpiderDevTblServicetreeClient) Use(hooks ...Hook) {
	c.hooks.SpiderDevTblServicetree = append(c.hooks.SpiderDevTblServicetree, hooks...)
}

// Create returns a create builder for SpiderDevTblServicetree.
func (c *SpiderDevTblServicetreeClient) Create() *SpiderDevTblServicetreeCreate {
	mutation := newSpiderDevTblServicetreeMutation(c.config, OpCreate)
	return &SpiderDevTblServicetreeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SpiderDevTblServicetree entities.
func (c *SpiderDevTblServicetreeClient) CreateBulk(builders ...*SpiderDevTblServicetreeCreate) *SpiderDevTblServicetreeCreateBulk {
	return &SpiderDevTblServicetreeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SpiderDevTblServicetree.
func (c *SpiderDevTblServicetreeClient) Update() *SpiderDevTblServicetreeUpdate {
	mutation := newSpiderDevTblServicetreeMutation(c.config, OpUpdate)
	return &SpiderDevTblServicetreeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SpiderDevTblServicetreeClient) UpdateOne(sdts *SpiderDevTblServicetree) *SpiderDevTblServicetreeUpdateOne {
	mutation := newSpiderDevTblServicetreeMutation(c.config, OpUpdateOne, withSpiderDevTblServicetree(sdts))
	return &SpiderDevTblServicetreeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SpiderDevTblServicetreeClient) UpdateOneID(id int32) *SpiderDevTblServicetreeUpdateOne {
	mutation := newSpiderDevTblServicetreeMutation(c.config, OpUpdateOne, withSpiderDevTblServicetreeID(id))
	return &SpiderDevTblServicetreeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SpiderDevTblServicetree.
func (c *SpiderDevTblServicetreeClient) Delete() *SpiderDevTblServicetreeDelete {
	mutation := newSpiderDevTblServicetreeMutation(c.config, OpDelete)
	return &SpiderDevTblServicetreeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SpiderDevTblServicetreeClient) DeleteOne(sdts *SpiderDevTblServicetree) *SpiderDevTblServicetreeDeleteOne {
	return c.DeleteOneID(sdts.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SpiderDevTblServicetreeClient) DeleteOneID(id int32) *SpiderDevTblServicetreeDeleteOne {
	builder := c.Delete().Where(spiderdevtblservicetree.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SpiderDevTblServicetreeDeleteOne{builder}
}

// Query returns a query builder for SpiderDevTblServicetree.
func (c *SpiderDevTblServicetreeClient) Query() *SpiderDevTblServicetreeQuery {
	return &SpiderDevTblServicetreeQuery{
		config: c.config,
	}
}

// Get returns a SpiderDevTblServicetree entity by its id.
func (c *SpiderDevTblServicetreeClient) Get(ctx context.Context, id int32) (*SpiderDevTblServicetree, error) {
	return c.Query().Where(spiderdevtblservicetree.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SpiderDevTblServicetreeClient) GetX(ctx context.Context, id int32) *SpiderDevTblServicetree {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SpiderDevTblServicetreeClient) Hooks() []Hook {
	return c.hooks.SpiderDevTblServicetree
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
