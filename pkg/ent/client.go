// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"hello/pkg/ent/migrate"

	"hello/pkg/ent/pod"
	"hello/pkg/ent/project"
	"hello/pkg/ent/spiderdevtblservicetree"
	"hello/pkg/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Pod is the client for interacting with the Pod builders.
	Pod *PodClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// SpiderDevTblServicetree is the client for interacting with the SpiderDevTblServicetree builders.
	SpiderDevTblServicetree *SpiderDevTblServicetreeClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Pod = NewPodClient(c.config)
	c.Project = NewProjectClient(c.config)
	c.SpiderDevTblServicetree = NewSpiderDevTblServicetreeClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		Pod:                     NewPodClient(cfg),
		Project:                 NewProjectClient(cfg),
		SpiderDevTblServicetree: NewSpiderDevTblServicetreeClient(cfg),
		User:                    NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		Pod:                     NewPodClient(cfg),
		Project:                 NewProjectClient(cfg),
		SpiderDevTblServicetree: NewSpiderDevTblServicetreeClient(cfg),
		User:                    NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Pod.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Pod.Use(hooks...)
	c.Project.Use(hooks...)
	c.SpiderDevTblServicetree.Use(hooks...)
	c.User.Use(hooks...)
}

type PodBaseInterface interface {
	Create(ctx context.Context, v *Pod) (res *Pod, err error)
	CreateMany(ctx context.Context, vs Pods) (Pods, error)
	GetById(ctx context.Context, id int64) (res *Pod, err error)
	ByQueries(ctx context.Context, i interface{}) (res Pods, count int, err error)
	UpdateById(ctx context.Context, id int64, v *Pod) (*Pod, error)
	UpdateMany(ctx context.Context, vs Pods) (err error)
	DeleteById(ctx context.Context, id int64) error
	DeleteMany(ctx context.Context, ids []int64) (err error)

	CreateServicetreeByPodId(ctx context.Context, id int64, v *SpiderDevTblServicetree) (res *Pod, err error)
	GetServicetreeByPodId(ctx context.Context, id int64) (res *SpiderDevTblServicetree, err error)
}

type PodBase struct {
	client *Client
}

func (c *PodBase) CreateSet(create *PodCreate, v *Pod) *PodCreate {
	return create
}

func (c *PodBase) Create(ctx context.Context, v *Pod) (res *Pod, err error) {
	create := c.client.Pod.Create()
	c.CreateSet(create, v)
	return create.Save(ctx)
}

func (c *PodBase) CreateMany(ctx context.Context, vs Pods) (Pods, error) {
	bulk := make([]*PodCreate, len(vs))
	for i, v := range vs {
		create := c.client.Pod.Create()
		c.CreateSet(create, v)
		bulk[i] = create
	}
	return c.client.Pod.CreateBulk(bulk...).Save(ctx)
}

func (c *PodBase) GetSelect(query *PodQuery) *PodSelect {

	return query.Select(

		pod.Columns...,
	)
}

func (c *PodBase) GetById(ctx context.Context, id int64) (res *Pod, err error) {
	query := c.client.Pod.Query()
	c.GetSelect(query)
	return query.Where(pod.IDEQ(id)).First(ctx)
}

func (c *PodBase) ByQueries(ctx context.Context, i interface{}) (res Pods, count int, err error) {
	query := c.client.Pod.Query()
	c.GetSelect(query)
	res, count, err = query.ByQueries(ctx, i)
	return
}

func (c *PodBase) UpdateSet(update *PodUpdateOne, v *Pod) *PodUpdateOne {
	return update
}

func (c *PodBase) UpdateById(ctx context.Context, id int64, v *Pod) (*Pod, error) {
	update := c.client.Pod.UpdateOneID(id)
	c.UpdateSet(update, v)
	return update.Save(ctx)
}

func (c *PodBase) UpdateMany(ctx context.Context, vs Pods) (err error) {
	tx, err := c.client.Tx(ctx)

	if err != nil {
		return err
	}

	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}

		err = tx.Commit()
	}()

	for _, v := range vs {
		update := tx.Pod.UpdateOneID(v.ID)
		c.UpdateSet(update, v)
		_, err = update.Save(ctx)
		if err != nil {
			return err
		}
	}
	return nil
}

func (c *PodBase) DeleteById(ctx context.Context, id int64) error {
	return c.client.Pod.DeleteOneID(id).Exec(ctx)
}

func (c *PodBase) DeleteMany(ctx context.Context, ids []int64) error {
	_, err := c.client.Pod.Delete().Where(pod.IDIn(ids...)).Exec(ctx)
	return err
}

func (c *PodBase) CreateServicetreeByPodId(ctx context.Context, id int64, v *SpiderDevTblServicetree) (res *Pod, err error) {
	return c.client.Pod.UpdateOneID(id).SetServicetree(v).Save(ctx)
}
func (c *PodBase) GetServicetreeByPodId(ctx context.Context, id int64) (res *SpiderDevTblServicetree, err error) {
	return c.client.Pod.Query().Where(pod.ID(id)).QueryServicetree().First(ctx)
}

func NewPodBase(client *Client) PodBaseInterface {
	return &PodBase{client: client}
}

type ProjectBaseInterface interface {
	Create(ctx context.Context, v *Project) (res *Project, err error)
	CreateMany(ctx context.Context, vs Projects) (Projects, error)
	GetById(ctx context.Context, id int) (res *Project, err error)
	ByQueries(ctx context.Context, i interface{}) (res Projects, count int, err error)
	UpdateById(ctx context.Context, id int, v *Project) (*Project, error)
	UpdateMany(ctx context.Context, vs Projects) (err error)
	DeleteById(ctx context.Context, id int) error
	DeleteMany(ctx context.Context, ids []int) (err error)
}

type ProjectBase struct {
	client *Client
}

func (c *ProjectBase) CreateSet(create *ProjectCreate, v *Project) *ProjectCreate {
	return create
}

func (c *ProjectBase) Create(ctx context.Context, v *Project) (res *Project, err error) {
	create := c.client.Project.Create()
	c.CreateSet(create, v)
	return create.Save(ctx)
}

func (c *ProjectBase) CreateMany(ctx context.Context, vs Projects) (Projects, error) {
	bulk := make([]*ProjectCreate, len(vs))
	for i, v := range vs {
		create := c.client.Project.Create()
		c.CreateSet(create, v)
		bulk[i] = create
	}
	return c.client.Project.CreateBulk(bulk...).Save(ctx)
}

func (c *ProjectBase) GetSelect(query *ProjectQuery) *ProjectSelect {

	return query.Select(

		project.Columns...,
	)
}

func (c *ProjectBase) GetById(ctx context.Context, id int) (res *Project, err error) {
	query := c.client.Project.Query()
	c.GetSelect(query)
	return query.Where(project.IDEQ(id)).First(ctx)
}

func (c *ProjectBase) ByQueries(ctx context.Context, i interface{}) (res Projects, count int, err error) {
	query := c.client.Project.Query()
	c.GetSelect(query)
	res, count, err = query.ByQueries(ctx, i)
	return
}

func (c *ProjectBase) UpdateSet(update *ProjectUpdateOne, v *Project) *ProjectUpdateOne {
	return update
}

func (c *ProjectBase) UpdateById(ctx context.Context, id int, v *Project) (*Project, error) {
	update := c.client.Project.UpdateOneID(id)
	c.UpdateSet(update, v)
	return update.Save(ctx)
}

func (c *ProjectBase) UpdateMany(ctx context.Context, vs Projects) (err error) {
	tx, err := c.client.Tx(ctx)

	if err != nil {
		return err
	}

	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}

		err = tx.Commit()
	}()

	for _, v := range vs {
		update := tx.Project.UpdateOneID(v.ID)
		c.UpdateSet(update, v)
		_, err = update.Save(ctx)
		if err != nil {
			return err
		}
	}
	return nil
}

func (c *ProjectBase) DeleteById(ctx context.Context, id int) error {
	return c.client.Project.DeleteOneID(id).Exec(ctx)
}

func (c *ProjectBase) DeleteMany(ctx context.Context, ids []int) error {
	_, err := c.client.Project.Delete().Where(project.IDIn(ids...)).Exec(ctx)
	return err
}

func NewProjectBase(client *Client) ProjectBaseInterface {
	return &ProjectBase{client: client}
}

type SpiderDevTblServicetreeBaseInterface interface {
	Create(ctx context.Context, v *SpiderDevTblServicetree) (res *SpiderDevTblServicetree, err error)
	CreateMany(ctx context.Context, vs SpiderDevTblServicetrees) (SpiderDevTblServicetrees, error)
	GetById(ctx context.Context, id int32) (res *SpiderDevTblServicetree, err error)
	ByQueries(ctx context.Context, i interface{}) (res SpiderDevTblServicetrees, count int, err error)
	UpdateById(ctx context.Context, id int32, v *SpiderDevTblServicetree) (*SpiderDevTblServicetree, error)
	UpdateMany(ctx context.Context, vs SpiderDevTblServicetrees) (err error)
	DeleteById(ctx context.Context, id int32) error
	DeleteMany(ctx context.Context, ids []int32) (err error)
}

type SpiderDevTblServicetreeBase struct {
	client *Client
}

func (c *SpiderDevTblServicetreeBase) CreateSet(create *SpiderDevTblServicetreeCreate, v *SpiderDevTblServicetree) *SpiderDevTblServicetreeCreate {
	return create
}

func (c *SpiderDevTblServicetreeBase) Create(ctx context.Context, v *SpiderDevTblServicetree) (res *SpiderDevTblServicetree, err error) {
	create := c.client.SpiderDevTblServicetree.Create()
	c.CreateSet(create, v)
	return create.Save(ctx)
}

func (c *SpiderDevTblServicetreeBase) CreateMany(ctx context.Context, vs SpiderDevTblServicetrees) (SpiderDevTblServicetrees, error) {
	bulk := make([]*SpiderDevTblServicetreeCreate, len(vs))
	for i, v := range vs {
		create := c.client.SpiderDevTblServicetree.Create()
		c.CreateSet(create, v)
		bulk[i] = create
	}
	return c.client.SpiderDevTblServicetree.CreateBulk(bulk...).Save(ctx)
}

func (c *SpiderDevTblServicetreeBase) GetSelect(query *SpiderDevTblServicetreeQuery) *SpiderDevTblServicetreeSelect {

	return query.Select(

		spiderdevtblservicetree.Columns...,
	)
}

func (c *SpiderDevTblServicetreeBase) GetById(ctx context.Context, id int32) (res *SpiderDevTblServicetree, err error) {
	query := c.client.SpiderDevTblServicetree.Query()
	c.GetSelect(query)
	return query.Where(spiderdevtblservicetree.IDEQ(id)).First(ctx)
}

func (c *SpiderDevTblServicetreeBase) ByQueries(ctx context.Context, i interface{}) (res SpiderDevTblServicetrees, count int, err error) {
	query := c.client.SpiderDevTblServicetree.Query()
	c.GetSelect(query)
	res, count, err = query.ByQueries(ctx, i)
	return
}

func (c *SpiderDevTblServicetreeBase) UpdateSet(update *SpiderDevTblServicetreeUpdateOne, v *SpiderDevTblServicetree) *SpiderDevTblServicetreeUpdateOne {
	return update
}

func (c *SpiderDevTblServicetreeBase) UpdateById(ctx context.Context, id int32, v *SpiderDevTblServicetree) (*SpiderDevTblServicetree, error) {
	update := c.client.SpiderDevTblServicetree.UpdateOneID(id)
	c.UpdateSet(update, v)
	return update.Save(ctx)
}

func (c *SpiderDevTblServicetreeBase) UpdateMany(ctx context.Context, vs SpiderDevTblServicetrees) (err error) {
	tx, err := c.client.Tx(ctx)

	if err != nil {
		return err
	}

	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}

		err = tx.Commit()
	}()

	for _, v := range vs {
		update := tx.SpiderDevTblServicetree.UpdateOneID(v.ID)
		c.UpdateSet(update, v)
		_, err = update.Save(ctx)
		if err != nil {
			return err
		}
	}
	return nil
}

func (c *SpiderDevTblServicetreeBase) DeleteById(ctx context.Context, id int32) error {
	return c.client.SpiderDevTblServicetree.DeleteOneID(id).Exec(ctx)
}

func (c *SpiderDevTblServicetreeBase) DeleteMany(ctx context.Context, ids []int32) error {
	_, err := c.client.SpiderDevTblServicetree.Delete().Where(spiderdevtblservicetree.IDIn(ids...)).Exec(ctx)
	return err
}

func NewSpiderDevTblServicetreeBase(client *Client) SpiderDevTblServicetreeBaseInterface {
	return &SpiderDevTblServicetreeBase{client: client}
}

type UserBaseInterface interface {
	Create(ctx context.Context, v *User) (res *User, err error)
	CreateMany(ctx context.Context, vs Users) (Users, error)
	GetById(ctx context.Context, id int) (res *User, err error)
	ByQueries(ctx context.Context, i interface{}) (res Users, count int, err error)
	UpdateById(ctx context.Context, id int, v *User) (*User, error)
	UpdateMany(ctx context.Context, vs Users) (err error)
	DeleteById(ctx context.Context, id int) error
	DeleteMany(ctx context.Context, ids []int) (err error)

	CreatePodsSliceByUserId(ctx context.Context, id int, vs Pods) (res *User, err error)
	GetPodsSliceByUserId(ctx context.Context, id int, i interface{}) (res Pods, count int, err error)
}

type UserBase struct {
	client *Client
}

func (c *UserBase) CreateSet(create *UserCreate, v *User) *UserCreate {
	return create
}

func (c *UserBase) Create(ctx context.Context, v *User) (res *User, err error) {
	create := c.client.User.Create()
	c.CreateSet(create, v)
	return create.Save(ctx)
}

func (c *UserBase) CreateMany(ctx context.Context, vs Users) (Users, error) {
	bulk := make([]*UserCreate, len(vs))
	for i, v := range vs {
		create := c.client.User.Create()
		c.CreateSet(create, v)
		bulk[i] = create
	}
	return c.client.User.CreateBulk(bulk...).Save(ctx)
}

func (c *UserBase) GetSelect(query *UserQuery) *UserSelect {

	return query.Select(

		user.Columns...,
	)
}

func (c *UserBase) GetById(ctx context.Context, id int) (res *User, err error) {
	query := c.client.User.Query()
	c.GetSelect(query)
	return query.Where(user.IDEQ(id)).First(ctx)
}

func (c *UserBase) ByQueries(ctx context.Context, i interface{}) (res Users, count int, err error) {
	query := c.client.User.Query()
	c.GetSelect(query)
	res, count, err = query.ByQueries(ctx, i)
	return
}

func (c *UserBase) UpdateSet(update *UserUpdateOne, v *User) *UserUpdateOne {
	return update
}

func (c *UserBase) UpdateById(ctx context.Context, id int, v *User) (*User, error) {
	update := c.client.User.UpdateOneID(id)
	c.UpdateSet(update, v)
	return update.Save(ctx)
}

func (c *UserBase) UpdateMany(ctx context.Context, vs Users) (err error) {
	tx, err := c.client.Tx(ctx)

	if err != nil {
		return err
	}

	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}

		err = tx.Commit()
	}()

	for _, v := range vs {
		update := tx.User.UpdateOneID(v.ID)
		c.UpdateSet(update, v)
		_, err = update.Save(ctx)
		if err != nil {
			return err
		}
	}
	return nil
}

func (c *UserBase) DeleteById(ctx context.Context, id int) error {
	return c.client.User.DeleteOneID(id).Exec(ctx)
}

func (c *UserBase) DeleteMany(ctx context.Context, ids []int) error {
	_, err := c.client.User.Delete().Where(user.IDIn(ids...)).Exec(ctx)
	return err
}

func (c *UserBase) CreatePodsSliceByUserId(ctx context.Context, id int, vs Pods) (res *User, err error) {
	return c.client.User.UpdateOneID(id).AddPods(vs...).Save(ctx)
}
func (c *UserBase) GetPodsSliceByUserId(ctx context.Context, id int, i interface{}) (res Pods, count int, err error) {
	return c.client.User.Query().Where(user.ID(id)).QueryPods().ByQueries(ctx, i)
}

func NewUserBase(client *Client) UserBaseInterface {
	return &UserBase{client: client}
}

type PodRestInterface interface {
	// @http-gin /pod POST
	Create(ctx context.Context, req PodRestCreateReq) (res *Pod, err error)
	// @http-gin /pods POST
	CreateMany(ctx context.Context, req PodRestCreateManyReq) (res Pods, err error)
	// @http-gin /pods/:id GET
	GetById(ctx context.Context, req PodRestGetByIdReq) (res *Pod, err error)
	// @http-gin /pods GET
	ByQueries(ctx context.Context, req PodRestByQueriesReq) (res PodRestByQueriesRes, err error)
	// @http-gin /pods/:id PUT
	UpdateById(ctx context.Context, req PodRestUpdateByIdReq) (res *Pod, err error)
	// @http-gin /pods PUT
	UpdateMany(ctx context.Context, req PodRestUpdateManyReq) (success bool, err error)
	// @http-gin /pods/:id DELETE
	DeleteById(ctx context.Context, req PodRestDeleteByIdReq) (success bool, err error)
	// @http-gin /pods DELETE
	DeleteMany(ctx context.Context, req PodRestDeleteManyReq) (success bool, err error)

	// @http-gin /pods/:id/servicetree POST
	CreateServicetreeByPodId(ctx context.Context, req PodRestCreateServicetreeByPodIdReq) (res *Pod, err error)
	// @http-gin /pods/:id/servicetree GET
	GetServicetreeByPodId(ctx context.Context, req PodRestGetServicetreeByPodIdReq) (res *SpiderDevTblServicetree, err error)
}

func NewPodRest(client *Client) PodRestInterface {
	return &PodRest{repo: &PodBase{client: client}}
}

type PodRest struct {
	repo PodBaseInterface
}

type PodRestCreateReq struct {
	Body Pod `json:"body"`
}

func (rest *PodRest) Create(ctx context.Context, req PodRestCreateReq) (res *Pod, err error) {
	return rest.repo.Create(ctx, &req.Body)
}

type PodRestCreateManyReq struct {
	Body Pods `json:"body"`
}

func (rest *PodRest) CreateMany(ctx context.Context, req PodRestCreateManyReq) (res Pods, err error) {
	return rest.repo.CreateMany(ctx, req.Body)
}

type PodRestGetByIdReq struct {
	Uri struct {
		Id int64 `json:"id" uri:"id"`
	}
}

func (rest *PodRest) GetById(ctx context.Context, req PodRestGetByIdReq) (res *Pod, err error) {
	return rest.repo.GetById(ctx, req.Uri.Id)
}

type PodRestByQueriesReq struct {
	Query PodQueryOps `json:"query"`
}

type PodRestByQueriesRes struct {
	List  Pods `json:"list"`
	Total int  `json:"total"`
}

func (rest *PodRest) ByQueries(ctx context.Context, req PodRestByQueriesReq) (res PodRestByQueriesRes, err error) {
	list, total, err := rest.repo.ByQueries(ctx, req.Query)
	return PodRestByQueriesRes{List: list, Total: total}, err
}

type PodRestUpdateByIdReq struct {
	Uri struct {
		Id int64 `json:"id" uri:"id"`
	} `json:"uri"`
	Body Pod `json:"body"`
}

func (rest *PodRest) UpdateById(ctx context.Context, req PodRestUpdateByIdReq) (res *Pod, err error) {
	return rest.repo.UpdateById(ctx, req.Uri.Id, &req.Body)
}

type PodRestUpdateManyReq struct {
	Query struct {
		Ids []int64 `json:"ids" form:"ids"`
	} `json:"query"`
}

func (rest *PodRest) UpdateMany(ctx context.Context, req PodRestUpdateManyReq) (success bool, err error) {
	err = rest.repo.DeleteMany(ctx, req.Query.Ids)
	if err != nil {
		return false, err
	}
	return true, err
}

type PodRestDeleteByIdReq struct {
	Uri struct {
		Id int64 `json:"id" uri:"id"`
	} `json:"uri"`
}

func (rest *PodRest) DeleteById(ctx context.Context, req PodRestDeleteByIdReq) (success bool, err error) {
	err = rest.repo.DeleteById(ctx, req.Uri.Id)
	if err != nil {
		return false, err
	}
	return true, err
}

type PodRestDeleteManyReq struct {
	Query struct {
		Ids []int64 `json:"ids" form:"ids"`
	} `json:"query"`
}

func (rest *PodRest) DeleteMany(ctx context.Context, req PodRestDeleteManyReq) (success bool, err error) {
	err = rest.repo.DeleteMany(ctx, req.Query.Ids)
	if err != nil {
		return false, err
	}
	return true, err
}

type PodRestCreateServicetreeByPodIdReq struct {
	Uri struct {
		Id int64 `json:"id" uri:"id"`
	}
	Body SpiderDevTblServicetree `json:"body"`
}

func (rest *PodRest) CreateServicetreeByPodId(ctx context.Context, req PodRestCreateServicetreeByPodIdReq) (res *Pod, err error) {
	return rest.repo.CreateServicetreeByPodId(ctx, req.Uri.Id, &req.Body)
}

type PodRestGetServicetreeByPodIdReq struct {
	Uri struct {
		Id int64 `json:"id" uri:"id"`
	} `json:"uri"`
}

func (rest *PodRest) GetServicetreeByPodId(ctx context.Context, req PodRestGetServicetreeByPodIdReq) (res *SpiderDevTblServicetree, err error) {
	return rest.repo.GetServicetreeByPodId(ctx, req.Uri.Id)
}

type ProjectRestInterface interface {
	// @http-gin /project POST
	Create(ctx context.Context, req ProjectRestCreateReq) (res *Project, err error)
	// @http-gin /projects POST
	CreateMany(ctx context.Context, req ProjectRestCreateManyReq) (res Projects, err error)
	// @http-gin /projects/:id GET
	GetById(ctx context.Context, req ProjectRestGetByIdReq) (res *Project, err error)
	// @http-gin /projects GET
	ByQueries(ctx context.Context, req ProjectRestByQueriesReq) (res ProjectRestByQueriesRes, err error)
	// @http-gin /projects/:id PUT
	UpdateById(ctx context.Context, req ProjectRestUpdateByIdReq) (res *Project, err error)
	// @http-gin /projects PUT
	UpdateMany(ctx context.Context, req ProjectRestUpdateManyReq) (success bool, err error)
	// @http-gin /projects/:id DELETE
	DeleteById(ctx context.Context, req ProjectRestDeleteByIdReq) (success bool, err error)
	// @http-gin /projects DELETE
	DeleteMany(ctx context.Context, req ProjectRestDeleteManyReq) (success bool, err error)
}

func NewProjectRest(client *Client) ProjectRestInterface {
	return &ProjectRest{repo: &ProjectBase{client: client}}
}

type ProjectRest struct {
	repo ProjectBaseInterface
}

type ProjectRestCreateReq struct {
	Body Project `json:"body"`
}

func (rest *ProjectRest) Create(ctx context.Context, req ProjectRestCreateReq) (res *Project, err error) {
	return rest.repo.Create(ctx, &req.Body)
}

type ProjectRestCreateManyReq struct {
	Body Projects `json:"body"`
}

func (rest *ProjectRest) CreateMany(ctx context.Context, req ProjectRestCreateManyReq) (res Projects, err error) {
	return rest.repo.CreateMany(ctx, req.Body)
}

type ProjectRestGetByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"id"`
	}
}

func (rest *ProjectRest) GetById(ctx context.Context, req ProjectRestGetByIdReq) (res *Project, err error) {
	return rest.repo.GetById(ctx, req.Uri.Id)
}

type ProjectRestByQueriesReq struct {
	Query ProjectQueryOps `json:"query"`
}

type ProjectRestByQueriesRes struct {
	List  Projects `json:"list"`
	Total int      `json:"total"`
}

func (rest *ProjectRest) ByQueries(ctx context.Context, req ProjectRestByQueriesReq) (res ProjectRestByQueriesRes, err error) {
	list, total, err := rest.repo.ByQueries(ctx, req.Query)
	return ProjectRestByQueriesRes{List: list, Total: total}, err
}

type ProjectRestUpdateByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"id"`
	} `json:"uri"`
	Body Project `json:"body"`
}

func (rest *ProjectRest) UpdateById(ctx context.Context, req ProjectRestUpdateByIdReq) (res *Project, err error) {
	return rest.repo.UpdateById(ctx, req.Uri.Id, &req.Body)
}

type ProjectRestUpdateManyReq struct {
	Query struct {
		Ids []int `json:"ids" form:"ids"`
	} `json:"query"`
}

func (rest *ProjectRest) UpdateMany(ctx context.Context, req ProjectRestUpdateManyReq) (success bool, err error) {
	err = rest.repo.DeleteMany(ctx, req.Query.Ids)
	if err != nil {
		return false, err
	}
	return true, err
}

type ProjectRestDeleteByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"id"`
	} `json:"uri"`
}

func (rest *ProjectRest) DeleteById(ctx context.Context, req ProjectRestDeleteByIdReq) (success bool, err error) {
	err = rest.repo.DeleteById(ctx, req.Uri.Id)
	if err != nil {
		return false, err
	}
	return true, err
}

type ProjectRestDeleteManyReq struct {
	Query struct {
		Ids []int `json:"ids" form:"ids"`
	} `json:"query"`
}

func (rest *ProjectRest) DeleteMany(ctx context.Context, req ProjectRestDeleteManyReq) (success bool, err error) {
	err = rest.repo.DeleteMany(ctx, req.Query.Ids)
	if err != nil {
		return false, err
	}
	return true, err
}

type SpiderDevTblServicetreeRestInterface interface {
	// @http-gin /spiderdevtblservicetree POST
	Create(ctx context.Context, req SpiderDevTblServicetreeRestCreateReq) (res *SpiderDevTblServicetree, err error)
	// @http-gin /spiderdevtblservicetrees POST
	CreateMany(ctx context.Context, req SpiderDevTblServicetreeRestCreateManyReq) (res SpiderDevTblServicetrees, err error)
	// @http-gin /spiderdevtblservicetrees/:id GET
	GetById(ctx context.Context, req SpiderDevTblServicetreeRestGetByIdReq) (res *SpiderDevTblServicetree, err error)
	// @http-gin /spiderdevtblservicetrees GET
	ByQueries(ctx context.Context, req SpiderDevTblServicetreeRestByQueriesReq) (res SpiderDevTblServicetreeRestByQueriesRes, err error)
	// @http-gin /spiderdevtblservicetrees/:id PUT
	UpdateById(ctx context.Context, req SpiderDevTblServicetreeRestUpdateByIdReq) (res *SpiderDevTblServicetree, err error)
	// @http-gin /spiderdevtblservicetrees PUT
	UpdateMany(ctx context.Context, req SpiderDevTblServicetreeRestUpdateManyReq) (success bool, err error)
	// @http-gin /spiderdevtblservicetrees/:id DELETE
	DeleteById(ctx context.Context, req SpiderDevTblServicetreeRestDeleteByIdReq) (success bool, err error)
	// @http-gin /spiderdevtblservicetrees DELETE
	DeleteMany(ctx context.Context, req SpiderDevTblServicetreeRestDeleteManyReq) (success bool, err error)
}

func NewSpiderDevTblServicetreeRest(client *Client) SpiderDevTblServicetreeRestInterface {
	return &SpiderDevTblServicetreeRest{repo: &SpiderDevTblServicetreeBase{client: client}}
}

type SpiderDevTblServicetreeRest struct {
	repo SpiderDevTblServicetreeBaseInterface
}

type SpiderDevTblServicetreeRestCreateReq struct {
	Body SpiderDevTblServicetree `json:"body"`
}

func (rest *SpiderDevTblServicetreeRest) Create(ctx context.Context, req SpiderDevTblServicetreeRestCreateReq) (res *SpiderDevTblServicetree, err error) {
	return rest.repo.Create(ctx, &req.Body)
}

type SpiderDevTblServicetreeRestCreateManyReq struct {
	Body SpiderDevTblServicetrees `json:"body"`
}

func (rest *SpiderDevTblServicetreeRest) CreateMany(ctx context.Context, req SpiderDevTblServicetreeRestCreateManyReq) (res SpiderDevTblServicetrees, err error) {
	return rest.repo.CreateMany(ctx, req.Body)
}

type SpiderDevTblServicetreeRestGetByIdReq struct {
	Uri struct {
		Id int32 `json:"id" uri:"id"`
	}
}

func (rest *SpiderDevTblServicetreeRest) GetById(ctx context.Context, req SpiderDevTblServicetreeRestGetByIdReq) (res *SpiderDevTblServicetree, err error) {
	return rest.repo.GetById(ctx, req.Uri.Id)
}

type SpiderDevTblServicetreeRestByQueriesReq struct {
	Query SpiderDevTblServicetreeQueryOps `json:"query"`
}

type SpiderDevTblServicetreeRestByQueriesRes struct {
	List  SpiderDevTblServicetrees `json:"list"`
	Total int                      `json:"total"`
}

func (rest *SpiderDevTblServicetreeRest) ByQueries(ctx context.Context, req SpiderDevTblServicetreeRestByQueriesReq) (res SpiderDevTblServicetreeRestByQueriesRes, err error) {
	list, total, err := rest.repo.ByQueries(ctx, req.Query)
	return SpiderDevTblServicetreeRestByQueriesRes{List: list, Total: total}, err
}

type SpiderDevTblServicetreeRestUpdateByIdReq struct {
	Uri struct {
		Id int32 `json:"id" uri:"id"`
	} `json:"uri"`
	Body SpiderDevTblServicetree `json:"body"`
}

func (rest *SpiderDevTblServicetreeRest) UpdateById(ctx context.Context, req SpiderDevTblServicetreeRestUpdateByIdReq) (res *SpiderDevTblServicetree, err error) {
	return rest.repo.UpdateById(ctx, req.Uri.Id, &req.Body)
}

type SpiderDevTblServicetreeRestUpdateManyReq struct {
	Query struct {
		Ids []int32 `json:"ids" form:"ids"`
	} `json:"query"`
}

func (rest *SpiderDevTblServicetreeRest) UpdateMany(ctx context.Context, req SpiderDevTblServicetreeRestUpdateManyReq) (success bool, err error) {
	err = rest.repo.DeleteMany(ctx, req.Query.Ids)
	if err != nil {
		return false, err
	}
	return true, err
}

type SpiderDevTblServicetreeRestDeleteByIdReq struct {
	Uri struct {
		Id int32 `json:"id" uri:"id"`
	} `json:"uri"`
}

func (rest *SpiderDevTblServicetreeRest) DeleteById(ctx context.Context, req SpiderDevTblServicetreeRestDeleteByIdReq) (success bool, err error) {
	err = rest.repo.DeleteById(ctx, req.Uri.Id)
	if err != nil {
		return false, err
	}
	return true, err
}

type SpiderDevTblServicetreeRestDeleteManyReq struct {
	Query struct {
		Ids []int32 `json:"ids" form:"ids"`
	} `json:"query"`
}

func (rest *SpiderDevTblServicetreeRest) DeleteMany(ctx context.Context, req SpiderDevTblServicetreeRestDeleteManyReq) (success bool, err error) {
	err = rest.repo.DeleteMany(ctx, req.Query.Ids)
	if err != nil {
		return false, err
	}
	return true, err
}

type UserRestInterface interface {
	// @http-gin /user POST
	Create(ctx context.Context, req UserRestCreateReq) (res *User, err error)
	// @http-gin /users POST
	CreateMany(ctx context.Context, req UserRestCreateManyReq) (res Users, err error)
	// @http-gin /users/:id GET
	GetById(ctx context.Context, req UserRestGetByIdReq) (res *User, err error)
	// @http-gin /users GET
	ByQueries(ctx context.Context, req UserRestByQueriesReq) (res UserRestByQueriesRes, err error)
	// @http-gin /users/:id PUT
	UpdateById(ctx context.Context, req UserRestUpdateByIdReq) (res *User, err error)
	// @http-gin /users PUT
	UpdateMany(ctx context.Context, req UserRestUpdateManyReq) (success bool, err error)
	// @http-gin /users/:id DELETE
	DeleteById(ctx context.Context, req UserRestDeleteByIdReq) (success bool, err error)
	// @http-gin /users DELETE
	DeleteMany(ctx context.Context, req UserRestDeleteManyReq) (success bool, err error)

	// @http-gin /users/:id/podsslice POST
	CreatePodsSliceByUserId(ctx context.Context, req UserRestCreatePodsSliceByUserIdReq) (res *User, err error)
	// @http-gin /users/:id/pods GET
	GetPodsSliceByUserId(ctx context.Context, req UserRestGetPodsSliceByUserIdReq) (res UserRestGetPodsSliceByUserIdRes, err error)
}

func NewUserRest(client *Client) UserRestInterface {
	return &UserRest{repo: &UserBase{client: client}}
}

type UserRest struct {
	repo UserBaseInterface
}

type UserRestCreateReq struct {
	Body User `json:"body"`
}

func (rest *UserRest) Create(ctx context.Context, req UserRestCreateReq) (res *User, err error) {
	return rest.repo.Create(ctx, &req.Body)
}

type UserRestCreateManyReq struct {
	Body Users `json:"body"`
}

func (rest *UserRest) CreateMany(ctx context.Context, req UserRestCreateManyReq) (res Users, err error) {
	return rest.repo.CreateMany(ctx, req.Body)
}

type UserRestGetByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"id"`
	}
}

func (rest *UserRest) GetById(ctx context.Context, req UserRestGetByIdReq) (res *User, err error) {
	return rest.repo.GetById(ctx, req.Uri.Id)
}

type UserRestByQueriesReq struct {
	Query UserQueryOps `json:"query"`
}

type UserRestByQueriesRes struct {
	List  Users `json:"list"`
	Total int   `json:"total"`
}

func (rest *UserRest) ByQueries(ctx context.Context, req UserRestByQueriesReq) (res UserRestByQueriesRes, err error) {
	list, total, err := rest.repo.ByQueries(ctx, req.Query)
	return UserRestByQueriesRes{List: list, Total: total}, err
}

type UserRestUpdateByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"id"`
	} `json:"uri"`
	Body User `json:"body"`
}

func (rest *UserRest) UpdateById(ctx context.Context, req UserRestUpdateByIdReq) (res *User, err error) {
	return rest.repo.UpdateById(ctx, req.Uri.Id, &req.Body)
}

type UserRestUpdateManyReq struct {
	Query struct {
		Ids []int `json:"ids" form:"ids"`
	} `json:"query"`
}

func (rest *UserRest) UpdateMany(ctx context.Context, req UserRestUpdateManyReq) (success bool, err error) {
	err = rest.repo.DeleteMany(ctx, req.Query.Ids)
	if err != nil {
		return false, err
	}
	return true, err
}

type UserRestDeleteByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"id"`
	} `json:"uri"`
}

func (rest *UserRest) DeleteById(ctx context.Context, req UserRestDeleteByIdReq) (success bool, err error) {
	err = rest.repo.DeleteById(ctx, req.Uri.Id)
	if err != nil {
		return false, err
	}
	return true, err
}

type UserRestDeleteManyReq struct {
	Query struct {
		Ids []int `json:"ids" form:"ids"`
	} `json:"query"`
}

func (rest *UserRest) DeleteMany(ctx context.Context, req UserRestDeleteManyReq) (success bool, err error) {
	err = rest.repo.DeleteMany(ctx, req.Query.Ids)
	if err != nil {
		return false, err
	}
	return true, err
}

type UserRestCreatePodsSliceByUserIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"id"`
	}
	Body Pods `json:"body"`
}

func (rest *UserRest) CreatePodsSliceByUserId(ctx context.Context, req UserRestCreatePodsSliceByUserIdReq) (res *User, err error) {
	return rest.repo.CreatePodsSliceByUserId(ctx, req.Uri.Id, req.Body)
}

type UserRestGetPodsSliceByUserIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"id"`
	} `json:"uri"`
	Query PodQueryOps `json:"query"`
}

type UserRestGetPodsSliceByUserIdRes struct {
	List  Pods `json:"list"`
	Total int  `json:"total"`
}

func (rest *UserRest) GetPodsSliceByUserId(ctx context.Context, req UserRestGetPodsSliceByUserIdReq) (res UserRestGetPodsSliceByUserIdRes, err error) {
	list, total, err := rest.repo.GetPodsSliceByUserId(ctx, req.Uri.Id, req.Query)
	return UserRestGetPodsSliceByUserIdRes{List: list, Total: total}, err
}

// PodClient is a client for the Pod schema.
type PodClient struct {
	config
}

// NewPodClient returns a client for the Pod from the given config.
func NewPodClient(c config) *PodClient {
	return &PodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pod.Hooks(f(g(h())))`.
func (c *PodClient) Use(hooks ...Hook) {
	c.hooks.Pod = append(c.hooks.Pod, hooks...)
}

// Create returns a create builder for Pod.
func (c *PodClient) Create() *PodCreate {
	mutation := newPodMutation(c.config, OpCreate)
	return &PodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pod entities.
func (c *PodClient) CreateBulk(builders ...*PodCreate) *PodCreateBulk {
	return &PodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pod.
func (c *PodClient) Update() *PodUpdate {
	mutation := newPodMutation(c.config, OpUpdate)
	return &PodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PodClient) UpdateOne(po *Pod) *PodUpdateOne {
	mutation := newPodMutation(c.config, OpUpdateOne, withPod(po))
	return &PodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PodClient) UpdateOneID(id int64) *PodUpdateOne {
	mutation := newPodMutation(c.config, OpUpdateOne, withPodID(id))
	return &PodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pod.
func (c *PodClient) Delete() *PodDelete {
	mutation := newPodMutation(c.config, OpDelete)
	return &PodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PodClient) DeleteOne(po *Pod) *PodDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PodClient) DeleteOneID(id int64) *PodDeleteOne {
	builder := c.Delete().Where(pod.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PodDeleteOne{builder}
}

// Query returns a query builder for Pod.
func (c *PodClient) Query() *PodQuery {
	return &PodQuery{
		config: c.config,
	}
}

// Get returns a Pod entity by its id.
func (c *PodClient) Get(ctx context.Context, id int64) (*Pod, error) {
	return c.Query().Where(pod.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PodClient) GetX(ctx context.Context, id int64) *Pod {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServicetree queries the servicetree edge of a Pod.
func (c *PodClient) QueryServicetree(po *Pod) *SpiderDevTblServicetreeQuery {
	query := &SpiderDevTblServicetreeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pod.Table, pod.FieldID, id),
			sqlgraph.To(spiderdevtblservicetree.Table, spiderdevtblservicetree.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, pod.ServicetreeTable, pod.ServicetreeColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PodClient) Hooks() []Hook {
	return c.hooks.Pod
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `project.Hooks(f(g(h())))`.
func (c *ProjectClient) Use(hooks ...Hook) {
	c.hooks.Project = append(c.hooks.Project, hooks...)
}

// Create returns a create builder for Project.
func (c *ProjectClient) Create() *ProjectCreate {
	mutation := newProjectMutation(c.config, OpCreate)
	return &ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Project entities.
func (c *ProjectClient) CreateBulk(builders ...*ProjectCreate) *ProjectCreateBulk {
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	mutation := newProjectMutation(c.config, OpUpdate)
	return &ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(pr *Project) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProject(pr))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id int) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProjectID(id))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	mutation := newProjectMutation(c.config, OpDelete)
	return &ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectClient) DeleteOne(pr *Project) *ProjectDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectClient) DeleteOneID(id int) *ProjectDeleteOne {
	builder := c.Delete().Where(project.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDeleteOne{builder}
}

// Query returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{
		config: c.config,
	}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id int) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id int) *Project {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProjectClient) Hooks() []Hook {
	return c.hooks.Project
}

// SpiderDevTblServicetreeClient is a client for the SpiderDevTblServicetree schema.
type SpiderDevTblServicetreeClient struct {
	config
}

// NewSpiderDevTblServicetreeClient returns a client for the SpiderDevTblServicetree from the given config.
func NewSpiderDevTblServicetreeClient(c config) *SpiderDevTblServicetreeClient {
	return &SpiderDevTblServicetreeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `spiderdevtblservicetree.Hooks(f(g(h())))`.
func (c *SpiderDevTblServicetreeClient) Use(hooks ...Hook) {
	c.hooks.SpiderDevTblServicetree = append(c.hooks.SpiderDevTblServicetree, hooks...)
}

// Create returns a create builder for SpiderDevTblServicetree.
func (c *SpiderDevTblServicetreeClient) Create() *SpiderDevTblServicetreeCreate {
	mutation := newSpiderDevTblServicetreeMutation(c.config, OpCreate)
	return &SpiderDevTblServicetreeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SpiderDevTblServicetree entities.
func (c *SpiderDevTblServicetreeClient) CreateBulk(builders ...*SpiderDevTblServicetreeCreate) *SpiderDevTblServicetreeCreateBulk {
	return &SpiderDevTblServicetreeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SpiderDevTblServicetree.
func (c *SpiderDevTblServicetreeClient) Update() *SpiderDevTblServicetreeUpdate {
	mutation := newSpiderDevTblServicetreeMutation(c.config, OpUpdate)
	return &SpiderDevTblServicetreeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SpiderDevTblServicetreeClient) UpdateOne(sdts *SpiderDevTblServicetree) *SpiderDevTblServicetreeUpdateOne {
	mutation := newSpiderDevTblServicetreeMutation(c.config, OpUpdateOne, withSpiderDevTblServicetree(sdts))
	return &SpiderDevTblServicetreeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SpiderDevTblServicetreeClient) UpdateOneID(id int32) *SpiderDevTblServicetreeUpdateOne {
	mutation := newSpiderDevTblServicetreeMutation(c.config, OpUpdateOne, withSpiderDevTblServicetreeID(id))
	return &SpiderDevTblServicetreeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SpiderDevTblServicetree.
func (c *SpiderDevTblServicetreeClient) Delete() *SpiderDevTblServicetreeDelete {
	mutation := newSpiderDevTblServicetreeMutation(c.config, OpDelete)
	return &SpiderDevTblServicetreeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SpiderDevTblServicetreeClient) DeleteOne(sdts *SpiderDevTblServicetree) *SpiderDevTblServicetreeDeleteOne {
	return c.DeleteOneID(sdts.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SpiderDevTblServicetreeClient) DeleteOneID(id int32) *SpiderDevTblServicetreeDeleteOne {
	builder := c.Delete().Where(spiderdevtblservicetree.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SpiderDevTblServicetreeDeleteOne{builder}
}

// Query returns a query builder for SpiderDevTblServicetree.
func (c *SpiderDevTblServicetreeClient) Query() *SpiderDevTblServicetreeQuery {
	return &SpiderDevTblServicetreeQuery{
		config: c.config,
	}
}

// Get returns a SpiderDevTblServicetree entity by its id.
func (c *SpiderDevTblServicetreeClient) Get(ctx context.Context, id int32) (*SpiderDevTblServicetree, error) {
	return c.Query().Where(spiderdevtblservicetree.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SpiderDevTblServicetreeClient) GetX(ctx context.Context, id int32) *SpiderDevTblServicetree {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SpiderDevTblServicetreeClient) Hooks() []Hook {
	return c.hooks.SpiderDevTblServicetree
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPods queries the pods edge of a User.
func (c *UserClient) QueryPods(u *User) *PodQuery {
	query := &PodQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(pod.Table, pod.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PodsTable, user.PodsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
