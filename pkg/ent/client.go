// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"hello/pkg/ent/migrate"

	"hello/pkg/ent/audit"
	"hello/pkg/ent/project"
	"hello/pkg/ent/resource"
	"hello/pkg/ent/service"
	"hello/pkg/ent/spiderdevtblservicetree"
	"hello/pkg/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Audit is the client for interacting with the Audit builders.
	Audit *AuditClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// Resource is the client for interacting with the Resource builders.
	Resource *ResourceClient
	// Service is the client for interacting with the Service builders.
	Service *ServiceClient
	// SpiderDevTblServicetree is the client for interacting with the SpiderDevTblServicetree builders.
	SpiderDevTblServicetree *SpiderDevTblServicetreeClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Audit = NewAuditClient(c.config)
	c.Project = NewProjectClient(c.config)
	c.Resource = NewResourceClient(c.config)
	c.Service = NewServiceClient(c.config)
	c.SpiderDevTblServicetree = NewSpiderDevTblServicetreeClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		Audit:                   NewAuditClient(cfg),
		Project:                 NewProjectClient(cfg),
		Resource:                NewResourceClient(cfg),
		Service:                 NewServiceClient(cfg),
		SpiderDevTblServicetree: NewSpiderDevTblServicetreeClient(cfg),
		User:                    NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		Audit:                   NewAuditClient(cfg),
		Project:                 NewProjectClient(cfg),
		Resource:                NewResourceClient(cfg),
		Service:                 NewServiceClient(cfg),
		SpiderDevTblServicetree: NewSpiderDevTblServicetreeClient(cfg),
		User:                    NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Audit.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Audit.Use(hooks...)
	c.Project.Use(hooks...)
	c.Resource.Use(hooks...)
	c.Service.Use(hooks...)
	c.SpiderDevTblServicetree.Use(hooks...)
	c.User.Use(hooks...)
}

type AuditBaseInterface interface {
	RawCreate(ctx context.Context, v *Audit) (res *Audit, err error)
	RawCreateMany(ctx context.Context, vs Audits) (Audits, error)
	RawGetById(ctx context.Context, id int) (res *Audit, err error)
	RawByQueriesAll(ctx context.Context, i interface{}) (res Audits, count int, err error)
	RawByQueriesOne(ctx context.Context, i interface{}) (res *Audit, err error)
	RawUpdateById(ctx context.Context, id int, v *Audit) (*Audit, error)
	RawUpdateMany(ctx context.Context, vs Audits) (err error)

	Create(ctx context.Context, v AuditBaseCreateReq) (res *Audit, err error)
	CreateMany(ctx context.Context, vs []AuditBaseCreateReq) (Audits, error)
	GetById(ctx context.Context, id int) (res AuditBaseGetRes, err error)
	ByQueriesAll(ctx context.Context, i interface{}) (res []AuditBaseGetRes, count int, err error)
	ByQueriesOne(ctx context.Context, i interface{}) (res AuditBaseGetRes, err error)
	UpdateById(ctx context.Context, id int, v AuditBaseUpdateReq) (*Audit, error)
	UpdateMany(ctx context.Context, vs []AuditBaseUpdateReq) (err error)
	DeleteById(ctx context.Context, id int) error
	DeleteMany(ctx context.Context, ids []int) (err error)
}

type AuditBase struct {
	client *Client
}

func RawAuditBaseCreateSet(create *AuditCreate, v *Audit) *AuditCreate {
	return create.
		SetCreateTime(v.CreateTime).
		SetUpdateTime(v.UpdateTime).
		SetURL(v.URL).
		SetQuery(v.Query).
		SetMethod(v.Method).
		SetRequest(v.Request).
		SetResponse(v.Response).
		SetHeader(v.Header).
		SetStatusCode(v.StatusCode).
		SetRemoteIP(v.RemoteIP).
		SetClientIP(v.ClientIP).
		SetCostTime(v.CostTime)
}

func (c *AuditBase) RawCreate(ctx context.Context, v *Audit) (res *Audit, err error) {
	create := c.client.Audit.Create()
	RawAuditBaseCreateSet(create, v)
	return create.Save(ctx)
}

func (c *AuditBase) RawCreateMany(ctx context.Context, vs Audits) (Audits, error) {
	bulk := make([]*AuditCreate, len(vs))
	for i, v := range vs {
		create := c.client.Audit.Create()
		RawAuditBaseCreateSet(create, v)
		bulk[i] = create
	}
	return c.client.Audit.CreateBulk(bulk...).Save(ctx)
}

func (c *AuditBase) RawGetById(ctx context.Context, id int) (res *Audit, err error) {
	return c.client.Audit.Query().Where(audit.IDEQ(id)).First(ctx)
}

func (c *AuditBase) RawByQueriesOne(ctx context.Context, i interface{}) (res *Audit, err error) {
	return c.client.Audit.Query().Queries(i).First(ctx)
}

func (c *AuditBase) RawByQueriesAll(ctx context.Context, i interface{}) (res Audits, count int, err error) {
	return c.client.Audit.Query().ByQueriesAll(ctx, i)
}

func RawAuditBaseUpdateSet(update *AuditUpdateOne, v *Audit) *AuditUpdateOne {
	return update.
		SetUpdateTime(v.UpdateTime).
		SetURL(v.URL).
		SetQuery(v.Query).
		SetMethod(v.Method).
		SetRequest(v.Request).
		SetResponse(v.Response).
		SetHeader(v.Header).
		SetStatusCode(v.StatusCode).
		SetRemoteIP(v.RemoteIP).
		SetClientIP(v.ClientIP).
		SetCostTime(v.CostTime)
}

func (c *AuditBase) RawUpdateById(ctx context.Context, id int, v *Audit) (*Audit, error) {
	update := c.client.Audit.UpdateOneID(id)
	RawAuditBaseUpdateSet(update, v)
	return update.Save(ctx)
}

func (c *AuditBase) RawUpdateMany(ctx context.Context, vs Audits) (err error) {
	tx, err := c.client.Tx(ctx)

	if err != nil {
		return err
	}

	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}

		err = tx.Commit()
	}()

	for _, v := range vs {
		update := tx.Audit.UpdateOneID(v.ID)
		RawAuditBaseUpdateSet(update, v)
		_, err = update.Save(ctx)
		if err != nil {
			return err
		}
	}
	return nil
}

type AuditBaseCreateReq struct {
	URL string `json:"url,omitempty""`

	Query string `json:"query,omitempty""`

	Method string `json:"method,omitempty""`

	Request string `json:"request,omitempty""`

	Response string `json:"response,omitempty""`

	Header string `json:"header,omitempty""`

	StatusCode int `json:"status_code,omitempty""`

	RemoteIP string `json:"remote_ip,omitempty""`

	ClientIP string `json:"client_ip,omitempty""`

	CostTime string `json:"cost_time,omitempty""`
}

func AuditBaseCreateSet(create *AuditCreate, v AuditBaseCreateReq) *AuditCreate {
	return create.
		SetURL(v.URL).
		SetQuery(v.Query).
		SetMethod(v.Method).
		SetRequest(v.Request).
		SetResponse(v.Response).
		SetHeader(v.Header).
		SetStatusCode(v.StatusCode).
		SetRemoteIP(v.RemoteIP).
		SetClientIP(v.ClientIP).
		SetCostTime(v.CostTime)
}

func (c *AuditBase) Create(ctx context.Context, v AuditBaseCreateReq) (res *Audit, err error) {
	create := c.client.Audit.Create()
	AuditBaseCreateSet(create, v)
	return create.Save(ctx)
}

func (c *AuditBase) CreateMany(ctx context.Context, vs []AuditBaseCreateReq) (Audits, error) {
	bulk := make([]*AuditCreate, len(vs))
	for i, v := range vs {
		create := c.client.Audit.Create()
		AuditBaseCreateSet(create, v)
		bulk[i] = create
	}
	return c.client.Audit.CreateBulk(bulk...).Save(ctx)
}

type AuditBaseGetRes struct {
	ID int `json:"id,omitempty"`

	URL string `json:"url,omitempty"`

	Query string `json:"query,omitempty"`

	Method string `json:"method,omitempty"`

	Request string `json:"request,omitempty"`

	Response string `json:"response,omitempty"`

	Header string `json:"header,omitempty"`

	StatusCode int `json:"status_code,omitempty"`

	RemoteIP string `json:"remote_ip,omitempty"`

	ClientIP string `json:"client_ip,omitempty"`

	CostTime string `json:"cost_time,omitempty"`
}

func (c *AuditBase) GetById(ctx context.Context, id int) (res AuditBaseGetRes, err error) {
	query := c.client.Audit.Query()
	query = query.Where(audit.IDEQ(id))

	v, err := query.First(ctx)
	if err != nil {
		return
	}

	res.ID = v.ID

	res.URL = v.URL

	res.Query = v.Query

	res.Method = v.Method

	res.Request = v.Request

	res.Response = v.Response

	res.Header = v.Header

	res.StatusCode = v.StatusCode

	res.RemoteIP = v.RemoteIP

	res.ClientIP = v.ClientIP

	res.CostTime = v.CostTime

	return
}

func (c *AuditBase) ByQueriesOne(ctx context.Context, i interface{}) (res AuditBaseGetRes, err error) {
	v, err := c.client.Audit.Query().Queries(i).First(ctx)
	if err != nil {
		return
	}
	res.ID = v.ID

	res.URL = v.URL

	res.Query = v.Query

	res.Method = v.Method

	res.Request = v.Request

	res.Response = v.Response

	res.Header = v.Header

	res.StatusCode = v.StatusCode

	res.RemoteIP = v.RemoteIP

	res.ClientIP = v.ClientIP

	res.CostTime = v.CostTime

	return
}

func (c *AuditBase) ByQueriesAll(ctx context.Context, i interface{}) (res []AuditBaseGetRes, count int, err error) {
	vs, count, err := c.client.Audit.Query().ByQueriesAll(ctx, i)
	for _, v := range vs {
		res = append(res, AuditBaseGetRes{
			ID: v.ID,

			URL: v.URL,

			Query: v.Query,

			Method: v.Method,

			Request: v.Request,

			Response: v.Response,

			Header: v.Header,

			StatusCode: v.StatusCode,

			RemoteIP: v.RemoteIP,

			ClientIP: v.ClientIP,

			CostTime: v.CostTime,
		})
	}
	return
}

type AuditBaseUpdateReq struct {
	ID int `json:"id,omitempty"`
}

func AuditBaseUpdateSet(update *AuditUpdateOne, v AuditBaseUpdateReq) *AuditUpdateOne {
	return update
}

func (c *AuditBase) UpdateById(ctx context.Context, id int, v AuditBaseUpdateReq) (*Audit, error) {
	update := c.client.Audit.UpdateOneID(id)
	AuditBaseUpdateSet(update, v)
	return update.Save(ctx)
}

func (c *AuditBase) UpdateMany(ctx context.Context, vs []AuditBaseUpdateReq) (err error) {
	tx, err := c.client.Tx(ctx)

	if err != nil {
		return err
	}

	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}

		err = tx.Commit()
	}()

	for _, v := range vs {
		update := tx.Audit.UpdateOneID(v.ID)
		AuditBaseUpdateSet(update, v)
		_, err = update.Save(ctx)
		if err != nil {
			return err
		}
	}
	return nil
}

func (c *AuditBase) DeleteById(ctx context.Context, id int) error {
	return c.client.Audit.DeleteOneID(id).Exec(ctx)
}

func (c *AuditBase) DeleteMany(ctx context.Context, ids []int) error {
	_, err := c.client.Audit.Delete().Where(audit.IDIn(ids...)).Exec(ctx)
	return err
}

func NewAuditBase(client *Client) AuditBaseInterface {
	return &AuditBase{client: client}
}

type ProjectBaseInterface interface {
	RawCreate(ctx context.Context, v *Project) (res *Project, err error)
	RawCreateMany(ctx context.Context, vs Projects) (Projects, error)
	RawGetById(ctx context.Context, id int) (res *Project, err error)
	RawByQueriesAll(ctx context.Context, i interface{}) (res Projects, count int, err error)
	RawByQueriesOne(ctx context.Context, i interface{}) (res *Project, err error)
	RawUpdateById(ctx context.Context, id int, v *Project) (*Project, error)
	RawUpdateMany(ctx context.Context, vs Projects) (err error)

	RawCreateServicesByProjectId(ctx context.Context, id int, vs Services) (res *Project, err error)
	RawGetServicesByProjectId(ctx context.Context, id int, i interface{}) (res Services, count int, err error)
	RawDeleteServicesByProjectId(ctx context.Context, id int, deleteIds []int) (err error)
	RawUpdateBindServicesByProjectId(ctx context.Context, id int, removeIds []int, addIds []int) (err error)
	RawAddBindServicesByProjectId(ctx context.Context, id int, addIds []int) (err error)
	RawRemoveBindServicesByProjectId(ctx context.Context, id int, removeIds []int) (err error)

	Create(ctx context.Context, v ProjectBaseCreateReq) (res *Project, err error)
	CreateMany(ctx context.Context, vs []ProjectBaseCreateReq) (Projects, error)
	GetById(ctx context.Context, id int) (res ProjectBaseGetRes, err error)
	ByQueriesAll(ctx context.Context, i interface{}) (res []ProjectBaseGetRes, count int, err error)
	ByQueriesOne(ctx context.Context, i interface{}) (res ProjectBaseGetRes, err error)
	UpdateById(ctx context.Context, id int, v ProjectBaseUpdateReq) (*Project, error)
	UpdateMany(ctx context.Context, vs []ProjectBaseUpdateReq) (err error)
	DeleteById(ctx context.Context, id int) error
	DeleteMany(ctx context.Context, ids []int) (err error)

	CreateServicesByProjectId(ctx context.Context, id int, vs []ServiceBaseCreateReq) (res *Project, err error)
	GetServicesByProjectId(ctx context.Context, id int, i interface{}) (res []ServiceBaseGetRes, count int, err error)
}

type ProjectBase struct {
	client *Client
}

func RawProjectBaseCreateSet(create *ProjectCreate, v *Project) *ProjectCreate {
	return create.
		SetCreateTime(v.CreateTime).
		SetUpdateTime(v.UpdateTime).
		SetName(v.Name).
		SetAname(v.Aname).
		SetComments(v.Comments)
}

func (c *ProjectBase) RawCreate(ctx context.Context, v *Project) (res *Project, err error) {
	create := c.client.Project.Create()
	RawProjectBaseCreateSet(create, v)
	return create.Save(ctx)
}

func (c *ProjectBase) RawCreateMany(ctx context.Context, vs Projects) (Projects, error) {
	bulk := make([]*ProjectCreate, len(vs))
	for i, v := range vs {
		create := c.client.Project.Create()
		RawProjectBaseCreateSet(create, v)
		bulk[i] = create
	}
	return c.client.Project.CreateBulk(bulk...).Save(ctx)
}

func (c *ProjectBase) RawGetById(ctx context.Context, id int) (res *Project, err error) {
	return c.client.Project.Query().Where(project.IDEQ(id)).First(ctx)
}

func (c *ProjectBase) RawByQueriesOne(ctx context.Context, i interface{}) (res *Project, err error) {
	return c.client.Project.Query().Queries(i).First(ctx)
}

func (c *ProjectBase) RawByQueriesAll(ctx context.Context, i interface{}) (res Projects, count int, err error) {
	return c.client.Project.Query().ByQueriesAll(ctx, i)
}

func RawProjectBaseUpdateSet(update *ProjectUpdateOne, v *Project) *ProjectUpdateOne {
	return update.
		SetUpdateTime(v.UpdateTime).
		SetName(v.Name).
		SetAname(v.Aname).
		SetComments(v.Comments)
}

func (c *ProjectBase) RawUpdateById(ctx context.Context, id int, v *Project) (*Project, error) {
	update := c.client.Project.UpdateOneID(id)
	RawProjectBaseUpdateSet(update, v)
	return update.Save(ctx)
}

func (c *ProjectBase) RawUpdateMany(ctx context.Context, vs Projects) (err error) {
	tx, err := c.client.Tx(ctx)

	if err != nil {
		return err
	}

	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}

		err = tx.Commit()
	}()

	for _, v := range vs {
		update := tx.Project.UpdateOneID(v.ID)
		RawProjectBaseUpdateSet(update, v)
		_, err = update.Save(ctx)
		if err != nil {
			return err
		}
	}
	return nil
}

func (c *ProjectBase) RawCreateServicesByProjectId(ctx context.Context, id int, vs Services) (res *Project, err error) {
	tx, err := c.client.Tx(ctx)
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}
		err = tx.Commit()
	}()

	bulk := make([]*ServiceCreate, len(vs))
	for i, v := range vs {
		create := c.client.Service.Create()
		RawServiceBaseCreateSet(create, v)
		bulk[i] = create
	}
	save, err := tx.Service.CreateBulk(bulk...).Save(ctx)
	if err != nil {
		return
	}

	return tx.Project.UpdateOneID(id).AddServices(save...).Save(ctx)
}
func (c *ProjectBase) RawGetServicesByProjectId(ctx context.Context, id int, i interface{}) (res Services, count int, err error) {
	return c.client.Project.Query().Where(project.ID(id)).QueryServices().ByQueriesAll(ctx, i)
}
func (c *ProjectBase) RawRemoveBindServicesByProjectId(ctx context.Context, id int, removeIds []int) (err error) {
	_, err = c.client.Project.UpdateOneID(id).RemoveServiceIDs(removeIds...).Save(ctx)
	return
}
func (c *ProjectBase) RawDeleteServicesByProjectId(ctx context.Context, id int, deleteIds []int) (err error) {
	tx, err := c.client.Tx(ctx)
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}
		err = tx.Commit()
	}()

	_, err = tx.client.Project.UpdateOneID(id).RemoveServiceIDs(deleteIds...).Save(ctx)
	if err != nil {
		return
	}
	_, err = tx.client.Service.Delete().Where(service.IDIn(deleteIds...)).Exec(ctx)
	return
}

func (c *ProjectBase) RawUpdateBindServicesByProjectId(ctx context.Context, id int, removeIds []int, addIds []int) (err error) {
	return c.client.Project.UpdateOneID(id).RemoveServiceIDs(removeIds...).AddServiceIDs(addIds...).Exec(ctx)
}

func (c *ProjectBase) RawAddBindServicesByProjectId(ctx context.Context, id int, addIds []int) (err error) {
	return c.client.Project.UpdateOneID(id).AddServiceIDs(addIds...).Exec(ctx)
}

type ProjectBaseCreateReq struct {
	Name string `json:"name,omitempty""`

	Aname string `json:"aname,omitempty""`

	Comments string `json:"comments,omitempty""`
}

func ProjectBaseCreateSet(create *ProjectCreate, v ProjectBaseCreateReq) *ProjectCreate {
	return create.
		SetName(v.Name).
		SetAname(v.Aname).
		SetComments(v.Comments)
}

func (c *ProjectBase) Create(ctx context.Context, v ProjectBaseCreateReq) (res *Project, err error) {
	create := c.client.Project.Create()
	ProjectBaseCreateSet(create, v)
	return create.Save(ctx)
}

func (c *ProjectBase) CreateMany(ctx context.Context, vs []ProjectBaseCreateReq) (Projects, error) {
	bulk := make([]*ProjectCreate, len(vs))
	for i, v := range vs {
		create := c.client.Project.Create()
		ProjectBaseCreateSet(create, v)
		bulk[i] = create
	}
	return c.client.Project.CreateBulk(bulk...).Save(ctx)
}

type ProjectBaseGetRes struct {
	ID int `json:"id,omitempty"`

	Name string `json:"name,omitempty"`

	Aname string `json:"aname,omitempty"`

	Comments string `json:"comments,omitempty"`
}

func (c *ProjectBase) GetById(ctx context.Context, id int) (res ProjectBaseGetRes, err error) {
	query := c.client.Project.Query()
	query = query.Where(project.IDEQ(id))

	v, err := query.First(ctx)
	if err != nil {
		return
	}

	res.ID = v.ID

	res.Name = v.Name

	res.Aname = v.Aname

	res.Comments = v.Comments

	return
}

func (c *ProjectBase) ByQueriesOne(ctx context.Context, i interface{}) (res ProjectBaseGetRes, err error) {
	v, err := c.client.Project.Query().Queries(i).First(ctx)
	if err != nil {
		return
	}
	res.ID = v.ID

	res.Name = v.Name

	res.Aname = v.Aname

	res.Comments = v.Comments

	return
}

func (c *ProjectBase) ByQueriesAll(ctx context.Context, i interface{}) (res []ProjectBaseGetRes, count int, err error) {
	vs, count, err := c.client.Project.Query().ByQueriesAll(ctx, i)
	for _, v := range vs {
		res = append(res, ProjectBaseGetRes{
			ID: v.ID,

			Name: v.Name,

			Aname: v.Aname,

			Comments: v.Comments,
		})
	}
	return
}

type ProjectBaseUpdateReq struct {
	ID int `json:"id,omitempty"`

	Name string `json:"name,omitempty"`

	Aname string `json:"aname,omitempty"`

	Comments string `json:"comments,omitempty"`
}

func ProjectBaseUpdateSet(update *ProjectUpdateOne, v ProjectBaseUpdateReq) *ProjectUpdateOne {
	return update.
		SetName(v.Name).
		SetAname(v.Aname).
		SetComments(v.Comments)
}

func (c *ProjectBase) UpdateById(ctx context.Context, id int, v ProjectBaseUpdateReq) (*Project, error) {
	update := c.client.Project.UpdateOneID(id)
	ProjectBaseUpdateSet(update, v)
	return update.Save(ctx)
}

func (c *ProjectBase) UpdateMany(ctx context.Context, vs []ProjectBaseUpdateReq) (err error) {
	tx, err := c.client.Tx(ctx)

	if err != nil {
		return err
	}

	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}

		err = tx.Commit()
	}()

	for _, v := range vs {
		update := tx.Project.UpdateOneID(v.ID)
		ProjectBaseUpdateSet(update, v)
		_, err = update.Save(ctx)
		if err != nil {
			return err
		}
	}
	return nil
}

func (c *ProjectBase) DeleteById(ctx context.Context, id int) error {
	return c.client.Project.DeleteOneID(id).Exec(ctx)
}

func (c *ProjectBase) DeleteMany(ctx context.Context, ids []int) error {
	_, err := c.client.Project.Delete().Where(project.IDIn(ids...)).Exec(ctx)
	return err
}

func (c *ProjectBase) CreateServicesByProjectId(ctx context.Context, id int, vs []ServiceBaseCreateReq) (res *Project, err error) {
	tx, err := c.client.Tx(ctx)
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}
		err = tx.Commit()
	}()

	bulk := make([]*ServiceCreate, len(vs))
	for i, v := range vs {
		create := c.client.Service.Create()
		ServiceBaseCreateSet(create, v)
		bulk[i] = create
	}
	save, err := tx.Service.CreateBulk(bulk...).Save(ctx)
	if err != nil {
		return
	}

	return tx.Project.UpdateOneID(id).AddServices(save...).Save(ctx)
}
func (c *ProjectBase) GetServicesByProjectId(ctx context.Context, id int, i interface{}) (res []ServiceBaseGetRes, count int, err error) {
	vs, count, err := c.client.Project.Query().Where(project.ID(id)).QueryServices().ByQueriesAll(ctx, i)
	for _, v := range vs {
		res = append(res, ServiceBaseGetRes{
			ID: v.ID,

			Name: v.Name,

			Aname: v.Aname,

			Comments: v.Comments,

			Classes: v.Classes,

			Lang: v.Lang,

			Git: v.Git,
		})
	}
	return
}

func NewProjectBase(client *Client) ProjectBaseInterface {
	return &ProjectBase{client: client}
}

type ResourceBaseInterface interface {
	RawCreate(ctx context.Context, v *Resource) (res *Resource, err error)
	RawCreateMany(ctx context.Context, vs Resources) (Resources, error)
	RawGetById(ctx context.Context, id int) (res *Resource, err error)
	RawByQueriesAll(ctx context.Context, i interface{}) (res Resources, count int, err error)
	RawByQueriesOne(ctx context.Context, i interface{}) (res *Resource, err error)
	RawUpdateById(ctx context.Context, id int, v *Resource) (*Resource, error)
	RawUpdateMany(ctx context.Context, vs Resources) (err error)

	Create(ctx context.Context, v ResourceBaseCreateReq) (res *Resource, err error)
	CreateMany(ctx context.Context, vs []ResourceBaseCreateReq) (Resources, error)
	GetById(ctx context.Context, id int) (res ResourceBaseGetRes, err error)
	ByQueriesAll(ctx context.Context, i interface{}) (res []ResourceBaseGetRes, count int, err error)
	ByQueriesOne(ctx context.Context, i interface{}) (res ResourceBaseGetRes, err error)
	UpdateById(ctx context.Context, id int, v ResourceBaseUpdateReq) (*Resource, error)
	UpdateMany(ctx context.Context, vs []ResourceBaseUpdateReq) (err error)
	DeleteById(ctx context.Context, id int) error
	DeleteMany(ctx context.Context, ids []int) (err error)
}

type ResourceBase struct {
	client *Client
}

func RawResourceBaseCreateSet(create *ResourceCreate, v *Resource) *ResourceCreate {
	return create.
		SetCreateTime(v.CreateTime).
		SetUpdateTime(v.UpdateTime).
		SetName(v.Name).
		SetKey(v.Key).
		SetPath(v.Path).
		SetAction(v.Action).
		SetComments(v.Comments)
}

func (c *ResourceBase) RawCreate(ctx context.Context, v *Resource) (res *Resource, err error) {
	create := c.client.Resource.Create()
	RawResourceBaseCreateSet(create, v)
	return create.Save(ctx)
}

func (c *ResourceBase) RawCreateMany(ctx context.Context, vs Resources) (Resources, error) {
	bulk := make([]*ResourceCreate, len(vs))
	for i, v := range vs {
		create := c.client.Resource.Create()
		RawResourceBaseCreateSet(create, v)
		bulk[i] = create
	}
	return c.client.Resource.CreateBulk(bulk...).Save(ctx)
}

func (c *ResourceBase) RawGetById(ctx context.Context, id int) (res *Resource, err error) {
	return c.client.Resource.Query().Where(resource.IDEQ(id)).First(ctx)
}

func (c *ResourceBase) RawByQueriesOne(ctx context.Context, i interface{}) (res *Resource, err error) {
	return c.client.Resource.Query().Queries(i).First(ctx)
}

func (c *ResourceBase) RawByQueriesAll(ctx context.Context, i interface{}) (res Resources, count int, err error) {
	return c.client.Resource.Query().ByQueriesAll(ctx, i)
}

func RawResourceBaseUpdateSet(update *ResourceUpdateOne, v *Resource) *ResourceUpdateOne {
	return update.
		SetUpdateTime(v.UpdateTime).
		SetName(v.Name).
		SetKey(v.Key).
		SetPath(v.Path).
		SetAction(v.Action).
		SetComments(v.Comments)
}

func (c *ResourceBase) RawUpdateById(ctx context.Context, id int, v *Resource) (*Resource, error) {
	update := c.client.Resource.UpdateOneID(id)
	RawResourceBaseUpdateSet(update, v)
	return update.Save(ctx)
}

func (c *ResourceBase) RawUpdateMany(ctx context.Context, vs Resources) (err error) {
	tx, err := c.client.Tx(ctx)

	if err != nil {
		return err
	}

	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}

		err = tx.Commit()
	}()

	for _, v := range vs {
		update := tx.Resource.UpdateOneID(v.ID)
		RawResourceBaseUpdateSet(update, v)
		_, err = update.Save(ctx)
		if err != nil {
			return err
		}
	}
	return nil
}

type ResourceBaseCreateReq struct {
	Name string `json:"name,omitempty""`

	Key string `json:"key,omitempty""`

	Path string `json:"path,omitempty""`

	Action string `json:"action,omitempty""`

	Comments string `json:"comments,omitempty""`
}

func ResourceBaseCreateSet(create *ResourceCreate, v ResourceBaseCreateReq) *ResourceCreate {
	return create.
		SetName(v.Name).
		SetKey(v.Key).
		SetPath(v.Path).
		SetAction(v.Action).
		SetComments(v.Comments)
}

func (c *ResourceBase) Create(ctx context.Context, v ResourceBaseCreateReq) (res *Resource, err error) {
	create := c.client.Resource.Create()
	ResourceBaseCreateSet(create, v)
	return create.Save(ctx)
}

func (c *ResourceBase) CreateMany(ctx context.Context, vs []ResourceBaseCreateReq) (Resources, error) {
	bulk := make([]*ResourceCreate, len(vs))
	for i, v := range vs {
		create := c.client.Resource.Create()
		ResourceBaseCreateSet(create, v)
		bulk[i] = create
	}
	return c.client.Resource.CreateBulk(bulk...).Save(ctx)
}

type ResourceBaseGetRes struct {
	ID int `json:"id,omitempty"`

	Name string `json:"name,omitempty"`

	Key string `json:"key,omitempty"`

	Path string `json:"path,omitempty"`

	Action string `json:"action,omitempty"`

	Comments string `json:"comments,omitempty"`
}

func (c *ResourceBase) GetById(ctx context.Context, id int) (res ResourceBaseGetRes, err error) {
	query := c.client.Resource.Query()
	query = query.Where(resource.IDEQ(id))

	v, err := query.First(ctx)
	if err != nil {
		return
	}

	res.ID = v.ID

	res.Name = v.Name

	res.Key = v.Key

	res.Path = v.Path

	res.Action = v.Action

	res.Comments = v.Comments

	return
}

func (c *ResourceBase) ByQueriesOne(ctx context.Context, i interface{}) (res ResourceBaseGetRes, err error) {
	v, err := c.client.Resource.Query().Queries(i).First(ctx)
	if err != nil {
		return
	}
	res.ID = v.ID

	res.Name = v.Name

	res.Key = v.Key

	res.Path = v.Path

	res.Action = v.Action

	res.Comments = v.Comments

	return
}

func (c *ResourceBase) ByQueriesAll(ctx context.Context, i interface{}) (res []ResourceBaseGetRes, count int, err error) {
	vs, count, err := c.client.Resource.Query().ByQueriesAll(ctx, i)
	for _, v := range vs {
		res = append(res, ResourceBaseGetRes{
			ID: v.ID,

			Name: v.Name,

			Key: v.Key,

			Path: v.Path,

			Action: v.Action,

			Comments: v.Comments,
		})
	}
	return
}

type ResourceBaseUpdateReq struct {
	ID int `json:"id,omitempty"`

	Name string `json:"name,omitempty"`

	Key string `json:"key,omitempty"`

	Path string `json:"path,omitempty"`

	Action string `json:"action,omitempty"`

	Comments string `json:"comments,omitempty"`
}

func ResourceBaseUpdateSet(update *ResourceUpdateOne, v ResourceBaseUpdateReq) *ResourceUpdateOne {
	return update.
		SetName(v.Name).
		SetKey(v.Key).
		SetPath(v.Path).
		SetAction(v.Action).
		SetComments(v.Comments)
}

func (c *ResourceBase) UpdateById(ctx context.Context, id int, v ResourceBaseUpdateReq) (*Resource, error) {
	update := c.client.Resource.UpdateOneID(id)
	ResourceBaseUpdateSet(update, v)
	return update.Save(ctx)
}

func (c *ResourceBase) UpdateMany(ctx context.Context, vs []ResourceBaseUpdateReq) (err error) {
	tx, err := c.client.Tx(ctx)

	if err != nil {
		return err
	}

	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}

		err = tx.Commit()
	}()

	for _, v := range vs {
		update := tx.Resource.UpdateOneID(v.ID)
		ResourceBaseUpdateSet(update, v)
		_, err = update.Save(ctx)
		if err != nil {
			return err
		}
	}
	return nil
}

func (c *ResourceBase) DeleteById(ctx context.Context, id int) error {
	return c.client.Resource.DeleteOneID(id).Exec(ctx)
}

func (c *ResourceBase) DeleteMany(ctx context.Context, ids []int) error {
	_, err := c.client.Resource.Delete().Where(resource.IDIn(ids...)).Exec(ctx)
	return err
}

func NewResourceBase(client *Client) ResourceBaseInterface {
	return &ResourceBase{client: client}
}

type ServiceBaseInterface interface {
	RawCreate(ctx context.Context, v *Service) (res *Service, err error)
	RawCreateMany(ctx context.Context, vs Services) (Services, error)
	RawGetById(ctx context.Context, id int) (res *Service, err error)
	RawByQueriesAll(ctx context.Context, i interface{}) (res Services, count int, err error)
	RawByQueriesOne(ctx context.Context, i interface{}) (res *Service, err error)
	RawUpdateById(ctx context.Context, id int, v *Service) (*Service, error)
	RawUpdateMany(ctx context.Context, vs Services) (err error)

	RawCreateProjectByServiceId(ctx context.Context, id int, v *Project) (res *Service, err error)
	RawGetProjectByServiceId(ctx context.Context, id int) (res *Project, err error)
	RawDeleteProjectByServiceId(ctx context.Context, id int, deleteId int) (err error)
	RawUpdateBindProjectByServiceId(ctx context.Context, id int, updateId int) (err error)
	RawAddBindProjectByServiceId(ctx context.Context, id int, addId int) (err error)
	RawRemoveBindProjectByServiceId(ctx context.Context, id int) (err error)

	Create(ctx context.Context, v ServiceBaseCreateReq) (res *Service, err error)
	CreateMany(ctx context.Context, vs []ServiceBaseCreateReq) (Services, error)
	GetById(ctx context.Context, id int) (res ServiceBaseGetRes, err error)
	ByQueriesAll(ctx context.Context, i interface{}) (res []ServiceBaseGetRes, count int, err error)
	ByQueriesOne(ctx context.Context, i interface{}) (res ServiceBaseGetRes, err error)
	UpdateById(ctx context.Context, id int, v ServiceBaseUpdateReq) (*Service, error)
	UpdateMany(ctx context.Context, vs []ServiceBaseUpdateReq) (err error)
	DeleteById(ctx context.Context, id int) error
	DeleteMany(ctx context.Context, ids []int) (err error)

	CreateProjectByServiceId(ctx context.Context, id int, v ProjectBaseCreateReq) (res *Service, err error)
	GetProjectByServiceId(ctx context.Context, id int) (res ProjectBaseGetRes, err error)
}

type ServiceBase struct {
	client *Client
}

func RawServiceBaseCreateSet(create *ServiceCreate, v *Service) *ServiceCreate {
	return create.
		SetCreateTime(v.CreateTime).
		SetUpdateTime(v.UpdateTime).
		SetName(v.Name).
		SetAname(v.Aname).
		SetComments(v.Comments).
		SetClasses(v.Classes).
		SetLang(v.Lang).
		SetGit(v.Git)
}

func (c *ServiceBase) RawCreate(ctx context.Context, v *Service) (res *Service, err error) {
	create := c.client.Service.Create()
	RawServiceBaseCreateSet(create, v)
	return create.Save(ctx)
}

func (c *ServiceBase) RawCreateMany(ctx context.Context, vs Services) (Services, error) {
	bulk := make([]*ServiceCreate, len(vs))
	for i, v := range vs {
		create := c.client.Service.Create()
		RawServiceBaseCreateSet(create, v)
		bulk[i] = create
	}
	return c.client.Service.CreateBulk(bulk...).Save(ctx)
}

func (c *ServiceBase) RawGetById(ctx context.Context, id int) (res *Service, err error) {
	return c.client.Service.Query().Where(service.IDEQ(id)).First(ctx)
}

func (c *ServiceBase) RawByQueriesOne(ctx context.Context, i interface{}) (res *Service, err error) {
	return c.client.Service.Query().Queries(i).First(ctx)
}

func (c *ServiceBase) RawByQueriesAll(ctx context.Context, i interface{}) (res Services, count int, err error) {
	return c.client.Service.Query().ByQueriesAll(ctx, i)
}

func RawServiceBaseUpdateSet(update *ServiceUpdateOne, v *Service) *ServiceUpdateOne {
	return update.
		SetUpdateTime(v.UpdateTime).
		SetName(v.Name).
		SetAname(v.Aname).
		SetComments(v.Comments).
		SetClasses(v.Classes).
		SetLang(v.Lang).
		SetGit(v.Git)
}

func (c *ServiceBase) RawUpdateById(ctx context.Context, id int, v *Service) (*Service, error) {
	update := c.client.Service.UpdateOneID(id)
	RawServiceBaseUpdateSet(update, v)
	return update.Save(ctx)
}

func (c *ServiceBase) RawUpdateMany(ctx context.Context, vs Services) (err error) {
	tx, err := c.client.Tx(ctx)

	if err != nil {
		return err
	}

	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}

		err = tx.Commit()
	}()

	for _, v := range vs {
		update := tx.Service.UpdateOneID(v.ID)
		RawServiceBaseUpdateSet(update, v)
		_, err = update.Save(ctx)
		if err != nil {
			return err
		}
	}
	return nil
}

func (c *ServiceBase) RawCreateProjectByServiceId(ctx context.Context, id int, v *Project) (res *Service, err error) {
	tx, err := c.client.Tx(ctx)
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}
		err = tx.Commit()
	}()

	create := tx.Project.Create()
	RawProjectBaseCreateSet(create, v)
	save, err := create.Save(ctx)
	if err != nil {
		return
	}

	return tx.Service.UpdateOneID(id).SetProject(save).Save(ctx)
}

func (c *ServiceBase) RawGetProjectByServiceId(ctx context.Context, id int) (res *Project, err error) {
	return c.client.Service.Query().Where(service.ID(id)).QueryProject().First(ctx)
}
func (c *ServiceBase) RawRemoveBindProjectByServiceId(ctx context.Context, id int) (err error) {
	_, err = c.client.Service.UpdateOneID(id).ClearProject().Save(ctx)
	return
}
func (c *ServiceBase) RawDeleteProjectByServiceId(ctx context.Context, id int, deleteId int) (err error) {
	tx, err := c.client.Tx(ctx)
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}
		err = tx.Commit()
	}()

	_, err = tx.client.Service.UpdateOneID(id).ClearProject().Save(ctx)
	if err != nil {
		return
	}
	_, err = tx.client.Project.Delete().Where(project.IDEQ(deleteId)).Exec(ctx)
	return
}

func (c *ServiceBase) RawUpdateBindProjectByServiceId(ctx context.Context, id int, updateId int) (err error) {
	return c.client.Service.UpdateOneID(id).SetProjectID(updateId).Exec(ctx)
}

func (c *ServiceBase) RawAddBindProjectByServiceId(ctx context.Context, id int, addId int) (err error) {
	return c.client.Service.UpdateOneID(id).SetProjectID(addId).Exec(ctx)
}

type ServiceBaseCreateReq struct {
	Name string `json:"name,omitempty""`

	Aname string `json:"aname,omitempty""`

	Comments string `json:"comments,omitempty""`

	Classes service.Classes `json:"classes,omitempty""`

	Lang string `json:"lang,omitempty""`

	Git string `json:"git,omitempty""`
}

func ServiceBaseCreateSet(create *ServiceCreate, v ServiceBaseCreateReq) *ServiceCreate {
	return create.
		SetName(v.Name).
		SetAname(v.Aname).
		SetComments(v.Comments).
		SetClasses(v.Classes).
		SetLang(v.Lang).
		SetGit(v.Git)
}

func (c *ServiceBase) Create(ctx context.Context, v ServiceBaseCreateReq) (res *Service, err error) {
	create := c.client.Service.Create()
	ServiceBaseCreateSet(create, v)
	return create.Save(ctx)
}

func (c *ServiceBase) CreateMany(ctx context.Context, vs []ServiceBaseCreateReq) (Services, error) {
	bulk := make([]*ServiceCreate, len(vs))
	for i, v := range vs {
		create := c.client.Service.Create()
		ServiceBaseCreateSet(create, v)
		bulk[i] = create
	}
	return c.client.Service.CreateBulk(bulk...).Save(ctx)
}

type ServiceBaseGetRes struct {
	ID int `json:"id,omitempty"`

	Name string `json:"name,omitempty"`

	Aname string `json:"aname,omitempty"`

	Comments string `json:"comments,omitempty"`

	Classes service.Classes `json:"classes,omitempty"`

	Lang string `json:"lang,omitempty"`

	Git string `json:"git,omitempty"`
}

func (c *ServiceBase) GetById(ctx context.Context, id int) (res ServiceBaseGetRes, err error) {
	query := c.client.Service.Query()
	query = query.Where(service.IDEQ(id))

	v, err := query.First(ctx)
	if err != nil {
		return
	}

	res.ID = v.ID

	res.Name = v.Name

	res.Aname = v.Aname

	res.Comments = v.Comments

	res.Classes = v.Classes

	res.Lang = v.Lang

	res.Git = v.Git

	return
}

func (c *ServiceBase) ByQueriesOne(ctx context.Context, i interface{}) (res ServiceBaseGetRes, err error) {
	v, err := c.client.Service.Query().Queries(i).First(ctx)
	if err != nil {
		return
	}
	res.ID = v.ID

	res.Name = v.Name

	res.Aname = v.Aname

	res.Comments = v.Comments

	res.Classes = v.Classes

	res.Lang = v.Lang

	res.Git = v.Git

	return
}

func (c *ServiceBase) ByQueriesAll(ctx context.Context, i interface{}) (res []ServiceBaseGetRes, count int, err error) {
	vs, count, err := c.client.Service.Query().ByQueriesAll(ctx, i)
	for _, v := range vs {
		res = append(res, ServiceBaseGetRes{
			ID: v.ID,

			Name: v.Name,

			Aname: v.Aname,

			Comments: v.Comments,

			Classes: v.Classes,

			Lang: v.Lang,

			Git: v.Git,
		})
	}
	return
}

type ServiceBaseUpdateReq struct {
	ID int `json:"id,omitempty"`

	Name string `json:"name,omitempty"`

	Aname string `json:"aname,omitempty"`

	Comments string `json:"comments,omitempty"`

	Classes service.Classes `json:"classes,omitempty"`

	Lang string `json:"lang,omitempty"`

	Git string `json:"git,omitempty"`
}

func ServiceBaseUpdateSet(update *ServiceUpdateOne, v ServiceBaseUpdateReq) *ServiceUpdateOne {
	return update.
		SetName(v.Name).
		SetAname(v.Aname).
		SetComments(v.Comments).
		SetClasses(v.Classes).
		SetLang(v.Lang).
		SetGit(v.Git)
}

func (c *ServiceBase) UpdateById(ctx context.Context, id int, v ServiceBaseUpdateReq) (*Service, error) {
	update := c.client.Service.UpdateOneID(id)
	ServiceBaseUpdateSet(update, v)
	return update.Save(ctx)
}

func (c *ServiceBase) UpdateMany(ctx context.Context, vs []ServiceBaseUpdateReq) (err error) {
	tx, err := c.client.Tx(ctx)

	if err != nil {
		return err
	}

	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}

		err = tx.Commit()
	}()

	for _, v := range vs {
		update := tx.Service.UpdateOneID(v.ID)
		ServiceBaseUpdateSet(update, v)
		_, err = update.Save(ctx)
		if err != nil {
			return err
		}
	}
	return nil
}

func (c *ServiceBase) DeleteById(ctx context.Context, id int) error {
	return c.client.Service.DeleteOneID(id).Exec(ctx)
}

func (c *ServiceBase) DeleteMany(ctx context.Context, ids []int) error {
	_, err := c.client.Service.Delete().Where(service.IDIn(ids...)).Exec(ctx)
	return err
}

func (c *ServiceBase) CreateProjectByServiceId(ctx context.Context, id int, v ProjectBaseCreateReq) (res *Service, err error) {
	tx, err := c.client.Tx(ctx)
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}
		err = tx.Commit()
	}()

	create := tx.Project.Create()
	ProjectBaseCreateSet(create, v)
	save, err := create.Save(ctx)
	if err != nil {
		return
	}

	return tx.Service.UpdateOneID(id).SetProject(save).Save(ctx)
}

func (c *ServiceBase) GetProjectByServiceId(ctx context.Context, id int) (res ProjectBaseGetRes, err error) {
	v, err := c.client.Service.Query().Where(service.ID(id)).QueryProject().First(ctx)
	if err != nil {
		return
	}
	res.ID = v.ID

	res.Name = v.Name

	res.Aname = v.Aname

	res.Comments = v.Comments

	return
}

func NewServiceBase(client *Client) ServiceBaseInterface {
	return &ServiceBase{client: client}
}

type SpiderDevTblServicetreeBaseInterface interface {
	RawCreate(ctx context.Context, v *SpiderDevTblServicetree) (res *SpiderDevTblServicetree, err error)
	RawCreateMany(ctx context.Context, vs SpiderDevTblServicetrees) (SpiderDevTblServicetrees, error)
	RawGetById(ctx context.Context, id int32) (res *SpiderDevTblServicetree, err error)
	RawByQueriesAll(ctx context.Context, i interface{}) (res SpiderDevTblServicetrees, count int, err error)
	RawByQueriesOne(ctx context.Context, i interface{}) (res *SpiderDevTblServicetree, err error)
	RawUpdateById(ctx context.Context, id int32, v *SpiderDevTblServicetree) (*SpiderDevTblServicetree, error)
	RawUpdateMany(ctx context.Context, vs SpiderDevTblServicetrees) (err error)

	Create(ctx context.Context, v SpiderDevTblServicetreeBaseCreateReq) (res *SpiderDevTblServicetree, err error)
	CreateMany(ctx context.Context, vs []SpiderDevTblServicetreeBaseCreateReq) (SpiderDevTblServicetrees, error)
	GetById(ctx context.Context, id int32) (res SpiderDevTblServicetreeBaseGetRes, err error)
	ByQueriesAll(ctx context.Context, i interface{}) (res []SpiderDevTblServicetreeBaseGetRes, count int, err error)
	ByQueriesOne(ctx context.Context, i interface{}) (res SpiderDevTblServicetreeBaseGetRes, err error)
	UpdateById(ctx context.Context, id int32, v SpiderDevTblServicetreeBaseUpdateReq) (*SpiderDevTblServicetree, error)
	UpdateMany(ctx context.Context, vs []SpiderDevTblServicetreeBaseUpdateReq) (err error)
	DeleteById(ctx context.Context, id int32) error
	DeleteMany(ctx context.Context, ids []int32) (err error)
}

type SpiderDevTblServicetreeBase struct {
	client *Client
}

func RawSpiderDevTblServicetreeBaseCreateSet(create *SpiderDevTblServicetreeCreate, v *SpiderDevTblServicetree) *SpiderDevTblServicetreeCreate {
	return create.
		SetName(v.Name).
		SetAname(v.Aname).
		SetPnode(v.Pnode).
		SetType(v.Type).
		SetKey(v.Key).
		SetOrigin(v.Origin)
}

func (c *SpiderDevTblServicetreeBase) RawCreate(ctx context.Context, v *SpiderDevTblServicetree) (res *SpiderDevTblServicetree, err error) {
	create := c.client.SpiderDevTblServicetree.Create()
	RawSpiderDevTblServicetreeBaseCreateSet(create, v)
	return create.Save(ctx)
}

func (c *SpiderDevTblServicetreeBase) RawCreateMany(ctx context.Context, vs SpiderDevTblServicetrees) (SpiderDevTblServicetrees, error) {
	bulk := make([]*SpiderDevTblServicetreeCreate, len(vs))
	for i, v := range vs {
		create := c.client.SpiderDevTblServicetree.Create()
		RawSpiderDevTblServicetreeBaseCreateSet(create, v)
		bulk[i] = create
	}
	return c.client.SpiderDevTblServicetree.CreateBulk(bulk...).Save(ctx)
}

func (c *SpiderDevTblServicetreeBase) RawGetById(ctx context.Context, id int32) (res *SpiderDevTblServicetree, err error) {
	return c.client.SpiderDevTblServicetree.Query().Where(spiderdevtblservicetree.IDEQ(id)).First(ctx)
}

func (c *SpiderDevTblServicetreeBase) RawByQueriesOne(ctx context.Context, i interface{}) (res *SpiderDevTblServicetree, err error) {
	return c.client.SpiderDevTblServicetree.Query().Queries(i).First(ctx)
}

func (c *SpiderDevTblServicetreeBase) RawByQueriesAll(ctx context.Context, i interface{}) (res SpiderDevTblServicetrees, count int, err error) {
	return c.client.SpiderDevTblServicetree.Query().ByQueriesAll(ctx, i)
}

func RawSpiderDevTblServicetreeBaseUpdateSet(update *SpiderDevTblServicetreeUpdateOne, v *SpiderDevTblServicetree) *SpiderDevTblServicetreeUpdateOne {
	return update.
		SetName(v.Name).
		SetAname(v.Aname).
		SetPnode(v.Pnode).
		SetType(v.Type).
		SetKey(v.Key).
		SetOrigin(v.Origin)
}

func (c *SpiderDevTblServicetreeBase) RawUpdateById(ctx context.Context, id int32, v *SpiderDevTblServicetree) (*SpiderDevTblServicetree, error) {
	update := c.client.SpiderDevTblServicetree.UpdateOneID(id)
	RawSpiderDevTblServicetreeBaseUpdateSet(update, v)
	return update.Save(ctx)
}

func (c *SpiderDevTblServicetreeBase) RawUpdateMany(ctx context.Context, vs SpiderDevTblServicetrees) (err error) {
	tx, err := c.client.Tx(ctx)

	if err != nil {
		return err
	}

	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}

		err = tx.Commit()
	}()

	for _, v := range vs {
		update := tx.SpiderDevTblServicetree.UpdateOneID(v.ID)
		RawSpiderDevTblServicetreeBaseUpdateSet(update, v)
		_, err = update.Save(ctx)
		if err != nil {
			return err
		}
	}
	return nil
}

type SpiderDevTblServicetreeBaseCreateReq struct {
}

func SpiderDevTblServicetreeBaseCreateSet(create *SpiderDevTblServicetreeCreate, v SpiderDevTblServicetreeBaseCreateReq) *SpiderDevTblServicetreeCreate {
	return create
}

func (c *SpiderDevTblServicetreeBase) Create(ctx context.Context, v SpiderDevTblServicetreeBaseCreateReq) (res *SpiderDevTblServicetree, err error) {
	create := c.client.SpiderDevTblServicetree.Create()
	SpiderDevTblServicetreeBaseCreateSet(create, v)
	return create.Save(ctx)
}

func (c *SpiderDevTblServicetreeBase) CreateMany(ctx context.Context, vs []SpiderDevTblServicetreeBaseCreateReq) (SpiderDevTblServicetrees, error) {
	bulk := make([]*SpiderDevTblServicetreeCreate, len(vs))
	for i, v := range vs {
		create := c.client.SpiderDevTblServicetree.Create()
		SpiderDevTblServicetreeBaseCreateSet(create, v)
		bulk[i] = create
	}
	return c.client.SpiderDevTblServicetree.CreateBulk(bulk...).Save(ctx)
}

type SpiderDevTblServicetreeBaseGetRes struct {
	ID int32 `json:"id,omitempty"`
}

func (c *SpiderDevTblServicetreeBase) GetById(ctx context.Context, id int32) (res SpiderDevTblServicetreeBaseGetRes, err error) {
	query := c.client.SpiderDevTblServicetree.Query()
	query = query.Where(spiderdevtblservicetree.IDEQ(id))

	v, err := query.First(ctx)
	if err != nil {
		return
	}

	res.ID = v.ID

	return
}

func (c *SpiderDevTblServicetreeBase) ByQueriesOne(ctx context.Context, i interface{}) (res SpiderDevTblServicetreeBaseGetRes, err error) {
	v, err := c.client.SpiderDevTblServicetree.Query().Queries(i).First(ctx)
	if err != nil {
		return
	}
	res.ID = v.ID

	return
}

func (c *SpiderDevTblServicetreeBase) ByQueriesAll(ctx context.Context, i interface{}) (res []SpiderDevTblServicetreeBaseGetRes, count int, err error) {
	vs, count, err := c.client.SpiderDevTblServicetree.Query().ByQueriesAll(ctx, i)
	for _, v := range vs {
		res = append(res, SpiderDevTblServicetreeBaseGetRes{
			ID: v.ID,
		})
	}
	return
}

type SpiderDevTblServicetreeBaseUpdateReq struct {
	ID int32 `json:"id,omitempty"`
}

func SpiderDevTblServicetreeBaseUpdateSet(update *SpiderDevTblServicetreeUpdateOne, v SpiderDevTblServicetreeBaseUpdateReq) *SpiderDevTblServicetreeUpdateOne {
	return update
}

func (c *SpiderDevTblServicetreeBase) UpdateById(ctx context.Context, id int32, v SpiderDevTblServicetreeBaseUpdateReq) (*SpiderDevTblServicetree, error) {
	update := c.client.SpiderDevTblServicetree.UpdateOneID(id)
	SpiderDevTblServicetreeBaseUpdateSet(update, v)
	return update.Save(ctx)
}

func (c *SpiderDevTblServicetreeBase) UpdateMany(ctx context.Context, vs []SpiderDevTblServicetreeBaseUpdateReq) (err error) {
	tx, err := c.client.Tx(ctx)

	if err != nil {
		return err
	}

	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}

		err = tx.Commit()
	}()

	for _, v := range vs {
		update := tx.SpiderDevTblServicetree.UpdateOneID(v.ID)
		SpiderDevTblServicetreeBaseUpdateSet(update, v)
		_, err = update.Save(ctx)
		if err != nil {
			return err
		}
	}
	return nil
}

func (c *SpiderDevTblServicetreeBase) DeleteById(ctx context.Context, id int32) error {
	return c.client.SpiderDevTblServicetree.DeleteOneID(id).Exec(ctx)
}

func (c *SpiderDevTblServicetreeBase) DeleteMany(ctx context.Context, ids []int32) error {
	_, err := c.client.SpiderDevTblServicetree.Delete().Where(spiderdevtblservicetree.IDIn(ids...)).Exec(ctx)
	return err
}

func NewSpiderDevTblServicetreeBase(client *Client) SpiderDevTblServicetreeBaseInterface {
	return &SpiderDevTblServicetreeBase{client: client}
}

type UserBaseInterface interface {
	RawCreate(ctx context.Context, v *User) (res *User, err error)
	RawCreateMany(ctx context.Context, vs Users) (Users, error)
	RawGetById(ctx context.Context, id int) (res *User, err error)
	RawByQueriesAll(ctx context.Context, i interface{}) (res Users, count int, err error)
	RawByQueriesOne(ctx context.Context, i interface{}) (res *User, err error)
	RawUpdateById(ctx context.Context, id int, v *User) (*User, error)
	RawUpdateMany(ctx context.Context, vs Users) (err error)

	Create(ctx context.Context, v UserBaseCreateReq) (res *User, err error)
	CreateMany(ctx context.Context, vs []UserBaseCreateReq) (Users, error)
	GetById(ctx context.Context, id int) (res UserBaseGetRes, err error)
	ByQueriesAll(ctx context.Context, i interface{}) (res []UserBaseGetRes, count int, err error)
	ByQueriesOne(ctx context.Context, i interface{}) (res UserBaseGetRes, err error)
	UpdateById(ctx context.Context, id int, v UserBaseUpdateReq) (*User, error)
	UpdateMany(ctx context.Context, vs []UserBaseUpdateReq) (err error)
	DeleteById(ctx context.Context, id int) error
	DeleteMany(ctx context.Context, ids []int) (err error)
}

type UserBase struct {
	client *Client
}

func RawUserBaseCreateSet(create *UserCreate, v *User) *UserCreate {
	return create.
		SetPassWord(v.PassWord).
		SetToken(v.Token).
		SetEnable(v.Enable).
		SetAge(v.Age).
		SetName(v.Name)
}

func (c *UserBase) RawCreate(ctx context.Context, v *User) (res *User, err error) {
	create := c.client.User.Create()
	RawUserBaseCreateSet(create, v)
	return create.Save(ctx)
}

func (c *UserBase) RawCreateMany(ctx context.Context, vs Users) (Users, error) {
	bulk := make([]*UserCreate, len(vs))
	for i, v := range vs {
		create := c.client.User.Create()
		RawUserBaseCreateSet(create, v)
		bulk[i] = create
	}
	return c.client.User.CreateBulk(bulk...).Save(ctx)
}

func (c *UserBase) RawGetById(ctx context.Context, id int) (res *User, err error) {
	return c.client.User.Query().Where(user.IDEQ(id)).First(ctx)
}

func (c *UserBase) RawByQueriesOne(ctx context.Context, i interface{}) (res *User, err error) {
	return c.client.User.Query().Queries(i).First(ctx)
}

func (c *UserBase) RawByQueriesAll(ctx context.Context, i interface{}) (res Users, count int, err error) {
	return c.client.User.Query().ByQueriesAll(ctx, i)
}

func RawUserBaseUpdateSet(update *UserUpdateOne, v *User) *UserUpdateOne {
	return update.
		SetPassWord(v.PassWord).
		SetToken(v.Token).
		SetEnable(v.Enable).
		SetAge(v.Age).
		SetName(v.Name)
}

func (c *UserBase) RawUpdateById(ctx context.Context, id int, v *User) (*User, error) {
	update := c.client.User.UpdateOneID(id)
	RawUserBaseUpdateSet(update, v)
	return update.Save(ctx)
}

func (c *UserBase) RawUpdateMany(ctx context.Context, vs Users) (err error) {
	tx, err := c.client.Tx(ctx)

	if err != nil {
		return err
	}

	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}

		err = tx.Commit()
	}()

	for _, v := range vs {
		update := tx.User.UpdateOneID(v.ID)
		RawUserBaseUpdateSet(update, v)
		_, err = update.Save(ctx)
		if err != nil {
			return err
		}
	}
	return nil
}

type UserBaseCreateReq struct {
	PassWord string `json:"pass_word""`

	Token string `json:"token,omitempty""`

	Enable bool `json:"enable,omitempty""`

	Age int `json:"age,omitempty" fake:"{number:0,150}""`

	Name string `json:"name,omitempty""`
}

func UserBaseCreateSet(create *UserCreate, v UserBaseCreateReq) *UserCreate {
	return create.
		SetPassWord(v.PassWord).
		SetToken(v.Token).
		SetEnable(v.Enable).
		SetAge(v.Age).
		SetName(v.Name)
}

func (c *UserBase) Create(ctx context.Context, v UserBaseCreateReq) (res *User, err error) {
	create := c.client.User.Create()
	UserBaseCreateSet(create, v)
	return create.Save(ctx)
}

func (c *UserBase) CreateMany(ctx context.Context, vs []UserBaseCreateReq) (Users, error) {
	bulk := make([]*UserCreate, len(vs))
	for i, v := range vs {
		create := c.client.User.Create()
		UserBaseCreateSet(create, v)
		bulk[i] = create
	}
	return c.client.User.CreateBulk(bulk...).Save(ctx)
}

type UserBaseGetRes struct {
	ID int `json:"id,omitempty"`

	PassWord string `json:"pass_word"`

	Token string `json:"token,omitempty"`

	Enable bool `json:"enable,omitempty"`

	Age int `json:"age,omitempty" fake:"{number:0,150}"`

	Name string `json:"name,omitempty"`
}

func (c *UserBase) GetById(ctx context.Context, id int) (res UserBaseGetRes, err error) {
	query := c.client.User.Query()
	query = query.Where(user.IDEQ(id))

	v, err := query.First(ctx)
	if err != nil {
		return
	}

	res.ID = v.ID

	res.PassWord = v.PassWord

	res.Token = v.Token

	res.Enable = v.Enable

	res.Age = v.Age

	res.Name = v.Name

	return
}

func (c *UserBase) ByQueriesOne(ctx context.Context, i interface{}) (res UserBaseGetRes, err error) {
	v, err := c.client.User.Query().Queries(i).First(ctx)
	if err != nil {
		return
	}
	res.ID = v.ID

	res.PassWord = v.PassWord

	res.Token = v.Token

	res.Enable = v.Enable

	res.Age = v.Age

	res.Name = v.Name

	return
}

func (c *UserBase) ByQueriesAll(ctx context.Context, i interface{}) (res []UserBaseGetRes, count int, err error) {
	vs, count, err := c.client.User.Query().ByQueriesAll(ctx, i)
	for _, v := range vs {
		res = append(res, UserBaseGetRes{
			ID: v.ID,

			PassWord: v.PassWord,

			Token: v.Token,

			Enable: v.Enable,

			Age: v.Age,

			Name: v.Name,
		})
	}
	return
}

type UserBaseUpdateReq struct {
	ID int `json:"id,omitempty"`

	PassWord string `json:"pass_word"`

	Token string `json:"token,omitempty"`

	Enable bool `json:"enable,omitempty"`

	Age int `json:"age,omitempty" fake:"{number:0,150}"`

	Name string `json:"name,omitempty"`
}

func UserBaseUpdateSet(update *UserUpdateOne, v UserBaseUpdateReq) *UserUpdateOne {
	return update.
		SetPassWord(v.PassWord).
		SetToken(v.Token).
		SetEnable(v.Enable).
		SetAge(v.Age).
		SetName(v.Name)
}

func (c *UserBase) UpdateById(ctx context.Context, id int, v UserBaseUpdateReq) (*User, error) {
	update := c.client.User.UpdateOneID(id)
	UserBaseUpdateSet(update, v)
	return update.Save(ctx)
}

func (c *UserBase) UpdateMany(ctx context.Context, vs []UserBaseUpdateReq) (err error) {
	tx, err := c.client.Tx(ctx)

	if err != nil {
		return err
	}

	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				err = fmt.Errorf("%w: %v", err, rerr)
			}
			return
		}

		err = tx.Commit()
	}()

	for _, v := range vs {
		update := tx.User.UpdateOneID(v.ID)
		UserBaseUpdateSet(update, v)
		_, err = update.Save(ctx)
		if err != nil {
			return err
		}
	}
	return nil
}

func (c *UserBase) DeleteById(ctx context.Context, id int) error {
	return c.client.User.DeleteOneID(id).Exec(ctx)
}

func (c *UserBase) DeleteMany(ctx context.Context, ids []int) error {
	_, err := c.client.User.Delete().Where(user.IDIn(ids...)).Exec(ctx)
	return err
}

func NewUserBase(client *Client) UserBaseInterface {
	return &UserBase{client: client}
}

type RestInterface interface {
	AuditRestInterface

	ProjectRestInterface

	ResourceRestInterface

	ServiceRestInterface

	SpiderDevTblServicetreeRestInterface

	UserRestInterface
}

type rest struct {
	AuditRestInterface

	ProjectRestInterface

	ResourceRestInterface

	ServiceRestInterface

	SpiderDevTblServicetreeRestInterface

	UserRestInterface
}

func NewRest(db *Client) *rest {
	return &rest{

		AuditRestInterface: NewAuditRest(db),

		ProjectRestInterface: NewProjectRest(db),

		ResourceRestInterface: NewResourceRest(db),

		ServiceRestInterface: NewServiceRest(db),

		SpiderDevTblServicetreeRestInterface: NewSpiderDevTblServicetreeRest(db),

		UserRestInterface: NewUserRest(db),
	}
}

type AuditRestInterface interface {
	// @http-gin /audit POST
	AuditRestCreate(ctx context.Context, req AuditRestCreateReq) (res *Audit, err error)
	// @http-gin /audits POST
	AuditRestCreateMany(ctx context.Context, req AuditRestCreateManyReq) (res Audits, err error)
	// @http-gin /audits/:auditId GET
	AuditRestGetById(ctx context.Context, req AuditRestGetByIdReq) (res AuditBaseGetRes, err error)
	// @http-gin /audits GET
	AuditRestByQueriesAll(ctx context.Context, req AuditRestByQueriesAllReq) (res AuditRestByQueriesAllRes, err error)
	// @http-gin /audits/:auditId PUT
	AuditRestUpdateById(ctx context.Context, req AuditRestUpdateByIdReq) (res *Audit, err error)
	// @http-gin /audits PUT
	AuditRestUpdateMany(ctx context.Context, req AuditRestUpdateManyReq) (success bool, err error)
	// @http-gin /audits/:auditId DELETE
	AuditRestDeleteById(ctx context.Context, req AuditRestDeleteByIdReq) (success bool, err error)
	// @http-gin /audits DELETE
	AuditRestDeleteMany(ctx context.Context, req AuditRestDeleteManyReq) (success bool, err error)
}

func NewAuditRest(client *Client) AuditRestInterface {
	return &AuditRest{repo: &AuditBase{client: client}}
}

type AuditRest struct {
	repo AuditBaseInterface
}

type AuditRestCreateReq struct {
	Body AuditBaseCreateReq `json:"body"`
}

func (rest *AuditRest) AuditRestCreate(ctx context.Context, req AuditRestCreateReq) (res *Audit, err error) {
	return rest.repo.Create(ctx, req.Body)
}

type AuditRestCreateManyReq struct {
	Body []AuditBaseCreateReq `json:"body"`
}

func (rest *AuditRest) AuditRestCreateMany(ctx context.Context, req AuditRestCreateManyReq) (res Audits, err error) {
	return rest.repo.CreateMany(ctx, req.Body)
}

type AuditRestGetByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"auditId"`
	}
}

func (rest *AuditRest) AuditRestGetById(ctx context.Context, req AuditRestGetByIdReq) (res AuditBaseGetRes, err error) {
	return rest.repo.GetById(ctx, req.Uri.Id)
}

type AuditRestByQueriesAllReq struct {
	Query AuditQueryOps `json:"query"`
}

type AuditRestByQueriesAllRes struct {
	List  []AuditBaseGetRes `json:"items"`
	Total int               `json:"total"`
}

func (rest *AuditRest) AuditRestByQueriesAll(ctx context.Context, req AuditRestByQueriesAllReq) (res AuditRestByQueriesAllRes, err error) {
	list, total, err := rest.repo.ByQueriesAll(ctx, req.Query)
	return AuditRestByQueriesAllRes{List: list, Total: total}, err
}

type AuditRestUpdateByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"auditId"`
	} `json:"uri"`
	Body AuditBaseUpdateReq `json:"body"`
}

func (rest *AuditRest) AuditRestUpdateById(ctx context.Context, req AuditRestUpdateByIdReq) (res *Audit, err error) {
	return rest.repo.UpdateById(ctx, req.Uri.Id, req.Body)
}

type AuditRestUpdateManyReq struct {
	Body []AuditBaseUpdateReq `json:"body"`
}

func (rest *AuditRest) AuditRestUpdateMany(ctx context.Context, req AuditRestUpdateManyReq) (success bool, err error) {
	err = rest.repo.UpdateMany(ctx, req.Body)
	if err != nil {
		return false, err
	}
	return true, err
}

type AuditRestDeleteByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"auditId"`
	} `json:"uri"`
}

func (rest *AuditRest) AuditRestDeleteById(ctx context.Context, req AuditRestDeleteByIdReq) (success bool, err error) {
	err = rest.repo.DeleteById(ctx, req.Uri.Id)
	if err != nil {
		return false, err
	}
	return true, err
}

type AuditRestDeleteManyReq struct {
	Query struct {
		Ids []int `json:"ids" form:"ids"`
	} `json:"query"`
}

func (rest *AuditRest) AuditRestDeleteMany(ctx context.Context, req AuditRestDeleteManyReq) (success bool, err error) {
	err = rest.repo.DeleteMany(ctx, req.Query.Ids)
	if err != nil {
		return false, err
	}
	return true, err
}

type ProjectRestInterface interface {
	// @http-gin /project POST
	ProjectRestCreate(ctx context.Context, req ProjectRestCreateReq) (res *Project, err error)
	// @http-gin /projects POST
	ProjectRestCreateMany(ctx context.Context, req ProjectRestCreateManyReq) (res Projects, err error)
	// @http-gin /projects/:projectId GET
	ProjectRestGetById(ctx context.Context, req ProjectRestGetByIdReq) (res ProjectBaseGetRes, err error)
	// @http-gin /projects GET
	ProjectRestByQueriesAll(ctx context.Context, req ProjectRestByQueriesAllReq) (res ProjectRestByQueriesAllRes, err error)
	// @http-gin /projects/:projectId PUT
	ProjectRestUpdateById(ctx context.Context, req ProjectRestUpdateByIdReq) (res *Project, err error)
	// @http-gin /projects PUT
	ProjectRestUpdateMany(ctx context.Context, req ProjectRestUpdateManyReq) (success bool, err error)
	// @http-gin /projects/:projectId DELETE
	ProjectRestDeleteById(ctx context.Context, req ProjectRestDeleteByIdReq) (success bool, err error)
	// @http-gin /projects DELETE
	ProjectRestDeleteMany(ctx context.Context, req ProjectRestDeleteManyReq) (success bool, err error)

	// @http-gin /projects/:projectId/services POST
	ProjectRestCreateServicesByProjectId(ctx context.Context, req ProjectRestCreateServicesByProjectIdReq) (res *Project, err error)
	// @http-gin /projects/:projectId/services GET
	ProjectRestGetServicesByProjectId(ctx context.Context, req ProjectRestGetServicesByProjectIdReq) (res ProjectRestGetServicesByProjectIdRes, err error)
	// @http-gin /projects/:projectId/services DELETE
	ProjectRestDeleteServicesByProjectId(ctx context.Context, req ProjectRestDeleteServicesByProjectIdReq) (res string, err error)
	// @http-gin /projects/:projectId/services/bind/remove PUT
	ProjectRestRemoveBindServicesByProjectId(ctx context.Context, req ProjectRestRemoveBindServicesByProjectIdReq) (res string, err error)
	// @http-gin /projects/:projectId/services/bind/add PUT
	ProjectRestAddBindServicesByProjectId(ctx context.Context, req ProjectRestAddBindServicesByProjectIdReq) (res string, err error)
	// @http-gin /projects/:projectId/services/bind/update PUT
	ProjectRestUpdateBindServicesByProjectId(ctx context.Context, req ProjectRestUpdateBindServicesByProjectIdReq) (res string, err error)
}

func NewProjectRest(client *Client) ProjectRestInterface {
	return &ProjectRest{repo: &ProjectBase{client: client}}
}

type ProjectRest struct {
	repo ProjectBaseInterface
}

type ProjectRestCreateReq struct {
	Body ProjectBaseCreateReq `json:"body"`
}

func (rest *ProjectRest) ProjectRestCreate(ctx context.Context, req ProjectRestCreateReq) (res *Project, err error) {
	return rest.repo.Create(ctx, req.Body)
}

type ProjectRestCreateManyReq struct {
	Body []ProjectBaseCreateReq `json:"body"`
}

func (rest *ProjectRest) ProjectRestCreateMany(ctx context.Context, req ProjectRestCreateManyReq) (res Projects, err error) {
	return rest.repo.CreateMany(ctx, req.Body)
}

type ProjectRestGetByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"projectId"`
	}
}

func (rest *ProjectRest) ProjectRestGetById(ctx context.Context, req ProjectRestGetByIdReq) (res ProjectBaseGetRes, err error) {
	return rest.repo.GetById(ctx, req.Uri.Id)
}

type ProjectRestByQueriesAllReq struct {
	Query ProjectQueryOps `json:"query"`
}

type ProjectRestByQueriesAllRes struct {
	List  []ProjectBaseGetRes `json:"items"`
	Total int                 `json:"total"`
}

func (rest *ProjectRest) ProjectRestByQueriesAll(ctx context.Context, req ProjectRestByQueriesAllReq) (res ProjectRestByQueriesAllRes, err error) {
	list, total, err := rest.repo.ByQueriesAll(ctx, req.Query)
	return ProjectRestByQueriesAllRes{List: list, Total: total}, err
}

type ProjectRestUpdateByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"projectId"`
	} `json:"uri"`
	Body ProjectBaseUpdateReq `json:"body"`
}

func (rest *ProjectRest) ProjectRestUpdateById(ctx context.Context, req ProjectRestUpdateByIdReq) (res *Project, err error) {
	return rest.repo.UpdateById(ctx, req.Uri.Id, req.Body)
}

type ProjectRestUpdateManyReq struct {
	Body []ProjectBaseUpdateReq `json:"body"`
}

func (rest *ProjectRest) ProjectRestUpdateMany(ctx context.Context, req ProjectRestUpdateManyReq) (success bool, err error) {
	err = rest.repo.UpdateMany(ctx, req.Body)
	if err != nil {
		return false, err
	}
	return true, err
}

type ProjectRestDeleteByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"projectId"`
	} `json:"uri"`
}

func (rest *ProjectRest) ProjectRestDeleteById(ctx context.Context, req ProjectRestDeleteByIdReq) (success bool, err error) {
	err = rest.repo.DeleteById(ctx, req.Uri.Id)
	if err != nil {
		return false, err
	}
	return true, err
}

type ProjectRestDeleteManyReq struct {
	Query struct {
		Ids []int `json:"ids" form:"ids"`
	} `json:"query"`
}

func (rest *ProjectRest) ProjectRestDeleteMany(ctx context.Context, req ProjectRestDeleteManyReq) (success bool, err error) {
	err = rest.repo.DeleteMany(ctx, req.Query.Ids)
	if err != nil {
		return false, err
	}
	return true, err
}

type ProjectRestCreateServicesByProjectIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"projectId"`
	}
	Body []ServiceBaseCreateReq `json:"body"`
}

func (rest *ProjectRest) ProjectRestCreateServicesByProjectId(ctx context.Context, req ProjectRestCreateServicesByProjectIdReq) (res *Project, err error) {
	return rest.repo.CreateServicesByProjectId(ctx, req.Uri.Id, req.Body)
}

type ProjectRestGetServicesByProjectIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"projectId"`
	} `json:"uri"`
	Query ServiceQueryOps `json:"query"`
}

type ProjectRestGetServicesByProjectIdRes struct {
	List  []ServiceBaseGetRes `json:"list"`
	Total int                 `json:"total"`
}

func (rest *ProjectRest) ProjectRestGetServicesByProjectId(ctx context.Context, req ProjectRestGetServicesByProjectIdReq) (res ProjectRestGetServicesByProjectIdRes, err error) {
	list, total, err := rest.repo.GetServicesByProjectId(ctx, req.Uri.Id, req.Query)
	return ProjectRestGetServicesByProjectIdRes{List: list, Total: total}, err
}

type ProjectRestDeleteServicesByProjectIdReq struct {
	Uri struct {
		ProjectId int `json:"projectId" uri:"projectId"`
	} `json:"uri"`
	Query struct {
		ServiceIds []int `json:"serviceIds" form:"serviceIds"`
	}
}

func (rest *ProjectRest) ProjectRestDeleteServicesByProjectId(ctx context.Context, req ProjectRestDeleteServicesByProjectIdReq) (res string, err error) {
	return "", rest.repo.RawDeleteServicesByProjectId(ctx, req.Uri.ProjectId, req.Query.ServiceIds)

}

type ProjectRestRemoveBindServicesByProjectIdReq struct {
	Uri struct {
		ProjectId int `json:"projectId" uri:"projectId"`
	} `json:"uri"`
	Body struct {
		ServiceIds []int `json:"serviceIds"`
	}
}

func (rest *ProjectRest) ProjectRestRemoveBindServicesByProjectId(ctx context.Context, req ProjectRestRemoveBindServicesByProjectIdReq) (res string, err error) {
	return "", rest.repo.RawRemoveBindServicesByProjectId(ctx, req.Uri.ProjectId, req.Body.ServiceIds)
}

type ProjectRestAddBindServicesByProjectIdReq struct {
	Uri struct {
		ProjectId int `json:"projectId" uri:"projectId"`
	} `json:"uri"`
	Body struct {
		ServiceIds []int `json:"serviceIds"`
	}
}

func (rest *ProjectRest) ProjectRestAddBindServicesByProjectId(ctx context.Context, req ProjectRestAddBindServicesByProjectIdReq) (res string, err error) {
	return "", rest.repo.RawAddBindServicesByProjectId(ctx, req.Uri.ProjectId, req.Body.ServiceIds)
}

type ProjectRestUpdateBindServicesByProjectIdReq struct {
	Uri struct {
		ProjectId int `json:"projectId" uri:"projectId"`
	} `json:"uri"`
	Body struct {
		OldIds []int `json:"OldIds"`
		NewIds []int `json:"NewIds"`
	} `json:"body"`
}

func (rest *ProjectRest) ProjectRestUpdateBindServicesByProjectId(ctx context.Context, req ProjectRestUpdateBindServicesByProjectIdReq) (res string, err error) {
	return "", rest.repo.RawUpdateBindServicesByProjectId(ctx, req.Uri.ProjectId, req.Body.OldIds, req.Body.NewIds)
}

type ResourceRestInterface interface {
	// @http-gin /resource POST
	ResourceRestCreate(ctx context.Context, req ResourceRestCreateReq) (res *Resource, err error)
	// @http-gin /resources POST
	ResourceRestCreateMany(ctx context.Context, req ResourceRestCreateManyReq) (res Resources, err error)
	// @http-gin /resources/:resourceId GET
	ResourceRestGetById(ctx context.Context, req ResourceRestGetByIdReq) (res ResourceBaseGetRes, err error)
	// @http-gin /resources GET
	ResourceRestByQueriesAll(ctx context.Context, req ResourceRestByQueriesAllReq) (res ResourceRestByQueriesAllRes, err error)
	// @http-gin /resources/:resourceId PUT
	ResourceRestUpdateById(ctx context.Context, req ResourceRestUpdateByIdReq) (res *Resource, err error)
	// @http-gin /resources PUT
	ResourceRestUpdateMany(ctx context.Context, req ResourceRestUpdateManyReq) (success bool, err error)
	// @http-gin /resources/:resourceId DELETE
	ResourceRestDeleteById(ctx context.Context, req ResourceRestDeleteByIdReq) (success bool, err error)
	// @http-gin /resources DELETE
	ResourceRestDeleteMany(ctx context.Context, req ResourceRestDeleteManyReq) (success bool, err error)
}

func NewResourceRest(client *Client) ResourceRestInterface {
	return &ResourceRest{repo: &ResourceBase{client: client}}
}

type ResourceRest struct {
	repo ResourceBaseInterface
}

type ResourceRestCreateReq struct {
	Body ResourceBaseCreateReq `json:"body"`
}

func (rest *ResourceRest) ResourceRestCreate(ctx context.Context, req ResourceRestCreateReq) (res *Resource, err error) {
	return rest.repo.Create(ctx, req.Body)
}

type ResourceRestCreateManyReq struct {
	Body []ResourceBaseCreateReq `json:"body"`
}

func (rest *ResourceRest) ResourceRestCreateMany(ctx context.Context, req ResourceRestCreateManyReq) (res Resources, err error) {
	return rest.repo.CreateMany(ctx, req.Body)
}

type ResourceRestGetByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"resourceId"`
	}
}

func (rest *ResourceRest) ResourceRestGetById(ctx context.Context, req ResourceRestGetByIdReq) (res ResourceBaseGetRes, err error) {
	return rest.repo.GetById(ctx, req.Uri.Id)
}

type ResourceRestByQueriesAllReq struct {
	Query ResourceQueryOps `json:"query"`
}

type ResourceRestByQueriesAllRes struct {
	List  []ResourceBaseGetRes `json:"items"`
	Total int                  `json:"total"`
}

func (rest *ResourceRest) ResourceRestByQueriesAll(ctx context.Context, req ResourceRestByQueriesAllReq) (res ResourceRestByQueriesAllRes, err error) {
	list, total, err := rest.repo.ByQueriesAll(ctx, req.Query)
	return ResourceRestByQueriesAllRes{List: list, Total: total}, err
}

type ResourceRestUpdateByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"resourceId"`
	} `json:"uri"`
	Body ResourceBaseUpdateReq `json:"body"`
}

func (rest *ResourceRest) ResourceRestUpdateById(ctx context.Context, req ResourceRestUpdateByIdReq) (res *Resource, err error) {
	return rest.repo.UpdateById(ctx, req.Uri.Id, req.Body)
}

type ResourceRestUpdateManyReq struct {
	Body []ResourceBaseUpdateReq `json:"body"`
}

func (rest *ResourceRest) ResourceRestUpdateMany(ctx context.Context, req ResourceRestUpdateManyReq) (success bool, err error) {
	err = rest.repo.UpdateMany(ctx, req.Body)
	if err != nil {
		return false, err
	}
	return true, err
}

type ResourceRestDeleteByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"resourceId"`
	} `json:"uri"`
}

func (rest *ResourceRest) ResourceRestDeleteById(ctx context.Context, req ResourceRestDeleteByIdReq) (success bool, err error) {
	err = rest.repo.DeleteById(ctx, req.Uri.Id)
	if err != nil {
		return false, err
	}
	return true, err
}

type ResourceRestDeleteManyReq struct {
	Query struct {
		Ids []int `json:"ids" form:"ids"`
	} `json:"query"`
}

func (rest *ResourceRest) ResourceRestDeleteMany(ctx context.Context, req ResourceRestDeleteManyReq) (success bool, err error) {
	err = rest.repo.DeleteMany(ctx, req.Query.Ids)
	if err != nil {
		return false, err
	}
	return true, err
}

type ServiceRestInterface interface {
	// @http-gin /service POST
	ServiceRestCreate(ctx context.Context, req ServiceRestCreateReq) (res *Service, err error)
	// @http-gin /services POST
	ServiceRestCreateMany(ctx context.Context, req ServiceRestCreateManyReq) (res Services, err error)
	// @http-gin /services/:serviceId GET
	ServiceRestGetById(ctx context.Context, req ServiceRestGetByIdReq) (res ServiceBaseGetRes, err error)
	// @http-gin /services GET
	ServiceRestByQueriesAll(ctx context.Context, req ServiceRestByQueriesAllReq) (res ServiceRestByQueriesAllRes, err error)
	// @http-gin /services/:serviceId PUT
	ServiceRestUpdateById(ctx context.Context, req ServiceRestUpdateByIdReq) (res *Service, err error)
	// @http-gin /services PUT
	ServiceRestUpdateMany(ctx context.Context, req ServiceRestUpdateManyReq) (success bool, err error)
	// @http-gin /services/:serviceId DELETE
	ServiceRestDeleteById(ctx context.Context, req ServiceRestDeleteByIdReq) (success bool, err error)
	// @http-gin /services DELETE
	ServiceRestDeleteMany(ctx context.Context, req ServiceRestDeleteManyReq) (success bool, err error)

	// @http-gin /services/:serviceId/project POST
	ServiceRestCreateProjectByServiceId(ctx context.Context, req ServiceRestCreateProjectByServiceIdReq) (res *Service, err error)
	// @http-gin /services/:serviceId/project GET
	ServiceRestGetProjectByServiceId(ctx context.Context, req ServiceRestGetProjectByServiceIdReq) (res ProjectBaseGetRes, err error)
	// @http-gin /services/:serviceId/project DELETE
	ServiceRestDeleteProjectByServiceId(ctx context.Context, req ServiceRestDeleteProjectByServiceIdReq) (res string, err error)
	// @http-gin /services/:serviceId/project/bind/remove PUT
	ServiceRestRemoveBindProjectByServiceId(ctx context.Context, req ServiceRestRemoveBindProjectByServiceIdReq) (res string, err error)
	// @http-gin /services/:serviceId/project/:projectId/bind/add PUT
	ServiceRestAddBindProjectByServiceId(ctx context.Context, req ServiceRestAddBindProjectByServiceIdReq) (res string, err error)
	// @http-gin /services/:serviceId/project/:projectId/bind/update PUT
	ServiceRestUpdateBindProjectByServiceId(ctx context.Context, req ServiceRestUpdateBindProjectByServiceIdReq) (res string, err error)
}

func NewServiceRest(client *Client) ServiceRestInterface {
	return &ServiceRest{repo: &ServiceBase{client: client}}
}

type ServiceRest struct {
	repo ServiceBaseInterface
}

type ServiceRestCreateReq struct {
	Body ServiceBaseCreateReq `json:"body"`
}

func (rest *ServiceRest) ServiceRestCreate(ctx context.Context, req ServiceRestCreateReq) (res *Service, err error) {
	return rest.repo.Create(ctx, req.Body)
}

type ServiceRestCreateManyReq struct {
	Body []ServiceBaseCreateReq `json:"body"`
}

func (rest *ServiceRest) ServiceRestCreateMany(ctx context.Context, req ServiceRestCreateManyReq) (res Services, err error) {
	return rest.repo.CreateMany(ctx, req.Body)
}

type ServiceRestGetByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"serviceId"`
	}
}

func (rest *ServiceRest) ServiceRestGetById(ctx context.Context, req ServiceRestGetByIdReq) (res ServiceBaseGetRes, err error) {
	return rest.repo.GetById(ctx, req.Uri.Id)
}

type ServiceRestByQueriesAllReq struct {
	Query ServiceQueryOps `json:"query"`
}

type ServiceRestByQueriesAllRes struct {
	List  []ServiceBaseGetRes `json:"items"`
	Total int                 `json:"total"`
}

func (rest *ServiceRest) ServiceRestByQueriesAll(ctx context.Context, req ServiceRestByQueriesAllReq) (res ServiceRestByQueriesAllRes, err error) {
	list, total, err := rest.repo.ByQueriesAll(ctx, req.Query)
	return ServiceRestByQueriesAllRes{List: list, Total: total}, err
}

type ServiceRestUpdateByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"serviceId"`
	} `json:"uri"`
	Body ServiceBaseUpdateReq `json:"body"`
}

func (rest *ServiceRest) ServiceRestUpdateById(ctx context.Context, req ServiceRestUpdateByIdReq) (res *Service, err error) {
	return rest.repo.UpdateById(ctx, req.Uri.Id, req.Body)
}

type ServiceRestUpdateManyReq struct {
	Body []ServiceBaseUpdateReq `json:"body"`
}

func (rest *ServiceRest) ServiceRestUpdateMany(ctx context.Context, req ServiceRestUpdateManyReq) (success bool, err error) {
	err = rest.repo.UpdateMany(ctx, req.Body)
	if err != nil {
		return false, err
	}
	return true, err
}

type ServiceRestDeleteByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"serviceId"`
	} `json:"uri"`
}

func (rest *ServiceRest) ServiceRestDeleteById(ctx context.Context, req ServiceRestDeleteByIdReq) (success bool, err error) {
	err = rest.repo.DeleteById(ctx, req.Uri.Id)
	if err != nil {
		return false, err
	}
	return true, err
}

type ServiceRestDeleteManyReq struct {
	Query struct {
		Ids []int `json:"ids" form:"ids"`
	} `json:"query"`
}

func (rest *ServiceRest) ServiceRestDeleteMany(ctx context.Context, req ServiceRestDeleteManyReq) (success bool, err error) {
	err = rest.repo.DeleteMany(ctx, req.Query.Ids)
	if err != nil {
		return false, err
	}
	return true, err
}

type ServiceRestCreateProjectByServiceIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"serviceId"`
	}
	Body ProjectBaseCreateReq `json:"body"`
}

func (rest *ServiceRest) ServiceRestCreateProjectByServiceId(ctx context.Context, req ServiceRestCreateProjectByServiceIdReq) (res *Service, err error) {
	return rest.repo.CreateProjectByServiceId(ctx, req.Uri.Id, req.Body)
}

type ServiceRestGetProjectByServiceIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"serviceId"`
	} `json:"uri"`
}

func (rest *ServiceRest) ServiceRestGetProjectByServiceId(ctx context.Context, req ServiceRestGetProjectByServiceIdReq) (res ProjectBaseGetRes, err error) {
	return rest.repo.GetProjectByServiceId(ctx, req.Uri.Id)
}

type ServiceRestDeleteProjectByServiceIdReq struct {
	Uri struct {
		ServiceId int `json:"serviceId" uri:"serviceId"`
		ProjectId int `json:"projectId" uri:"projectId"`
	} `json:"uri"`
}

func (rest *ServiceRest) ServiceRestDeleteProjectByServiceId(ctx context.Context, req ServiceRestDeleteProjectByServiceIdReq) (res string, err error) {
	return "", rest.repo.RawDeleteProjectByServiceId(ctx, req.Uri.ServiceId, req.Uri.ProjectId)

}

type ServiceRestRemoveBindProjectByServiceIdReq struct {
	Uri struct {
		ServiceId int `json:"serviceId" uri:"serviceId"`
	} `json:"uri"`
}

func (rest *ServiceRest) ServiceRestRemoveBindProjectByServiceId(ctx context.Context, req ServiceRestRemoveBindProjectByServiceIdReq) (res string, err error) {
	return "", rest.repo.RawRemoveBindProjectByServiceId(ctx, req.Uri.ServiceId)
}

type ServiceRestAddBindProjectByServiceIdReq struct {
	Uri struct {
		ServiceId int `json:"serviceId" uri:"serviceId"`
		ProjectId int `json:"projectId" uri:"projectId"`
	} `json:"uri"`
}

func (rest *ServiceRest) ServiceRestAddBindProjectByServiceId(ctx context.Context, req ServiceRestAddBindProjectByServiceIdReq) (res string, err error) {
	return "", rest.repo.RawAddBindProjectByServiceId(ctx, req.Uri.ServiceId, req.Uri.ProjectId)
}

type ServiceRestUpdateBindProjectByServiceIdReq struct {
	Uri struct {
		ServiceId int `json:"serviceId" uri:"serviceId"`
		ProjectId int `json:"projectId" uri:"projectId"`
	} `json:"uri"`
}

func (rest *ServiceRest) ServiceRestUpdateBindProjectByServiceId(ctx context.Context, req ServiceRestUpdateBindProjectByServiceIdReq) (res string, err error) {
	return "", rest.repo.RawUpdateBindProjectByServiceId(ctx, req.Uri.ServiceId, req.Uri.ProjectId)
}

type SpiderDevTblServicetreeRestInterface interface {
	// @http-gin /spiderdevtblservicetree POST
	SpiderDevTblServicetreeRestCreate(ctx context.Context, req SpiderDevTblServicetreeRestCreateReq) (res *SpiderDevTblServicetree, err error)
	// @http-gin /spiderdevtblservicetrees POST
	SpiderDevTblServicetreeRestCreateMany(ctx context.Context, req SpiderDevTblServicetreeRestCreateManyReq) (res SpiderDevTblServicetrees, err error)
	// @http-gin /spiderdevtblservicetrees/:spiderdevtblservicetreeId GET
	SpiderDevTblServicetreeRestGetById(ctx context.Context, req SpiderDevTblServicetreeRestGetByIdReq) (res SpiderDevTblServicetreeBaseGetRes, err error)
	// @http-gin /spiderdevtblservicetrees GET
	SpiderDevTblServicetreeRestByQueriesAll(ctx context.Context, req SpiderDevTblServicetreeRestByQueriesAllReq) (res SpiderDevTblServicetreeRestByQueriesAllRes, err error)
	// @http-gin /spiderdevtblservicetrees/:spiderdevtblservicetreeId PUT
	SpiderDevTblServicetreeRestUpdateById(ctx context.Context, req SpiderDevTblServicetreeRestUpdateByIdReq) (res *SpiderDevTblServicetree, err error)
	// @http-gin /spiderdevtblservicetrees PUT
	SpiderDevTblServicetreeRestUpdateMany(ctx context.Context, req SpiderDevTblServicetreeRestUpdateManyReq) (success bool, err error)
	// @http-gin /spiderdevtblservicetrees/:spiderdevtblservicetreeId DELETE
	SpiderDevTblServicetreeRestDeleteById(ctx context.Context, req SpiderDevTblServicetreeRestDeleteByIdReq) (success bool, err error)
	// @http-gin /spiderdevtblservicetrees DELETE
	SpiderDevTblServicetreeRestDeleteMany(ctx context.Context, req SpiderDevTblServicetreeRestDeleteManyReq) (success bool, err error)
}

func NewSpiderDevTblServicetreeRest(client *Client) SpiderDevTblServicetreeRestInterface {
	return &SpiderDevTblServicetreeRest{repo: &SpiderDevTblServicetreeBase{client: client}}
}

type SpiderDevTblServicetreeRest struct {
	repo SpiderDevTblServicetreeBaseInterface
}

type SpiderDevTblServicetreeRestCreateReq struct {
	Body SpiderDevTblServicetreeBaseCreateReq `json:"body"`
}

func (rest *SpiderDevTblServicetreeRest) SpiderDevTblServicetreeRestCreate(ctx context.Context, req SpiderDevTblServicetreeRestCreateReq) (res *SpiderDevTblServicetree, err error) {
	return rest.repo.Create(ctx, req.Body)
}

type SpiderDevTblServicetreeRestCreateManyReq struct {
	Body []SpiderDevTblServicetreeBaseCreateReq `json:"body"`
}

func (rest *SpiderDevTblServicetreeRest) SpiderDevTblServicetreeRestCreateMany(ctx context.Context, req SpiderDevTblServicetreeRestCreateManyReq) (res SpiderDevTblServicetrees, err error) {
	return rest.repo.CreateMany(ctx, req.Body)
}

type SpiderDevTblServicetreeRestGetByIdReq struct {
	Uri struct {
		Id int32 `json:"id" uri:"spiderdevtblservicetreeId"`
	}
}

func (rest *SpiderDevTblServicetreeRest) SpiderDevTblServicetreeRestGetById(ctx context.Context, req SpiderDevTblServicetreeRestGetByIdReq) (res SpiderDevTblServicetreeBaseGetRes, err error) {
	return rest.repo.GetById(ctx, req.Uri.Id)
}

type SpiderDevTblServicetreeRestByQueriesAllReq struct {
	Query SpiderDevTblServicetreeQueryOps `json:"query"`
}

type SpiderDevTblServicetreeRestByQueriesAllRes struct {
	List  []SpiderDevTblServicetreeBaseGetRes `json:"items"`
	Total int                                 `json:"total"`
}

func (rest *SpiderDevTblServicetreeRest) SpiderDevTblServicetreeRestByQueriesAll(ctx context.Context, req SpiderDevTblServicetreeRestByQueriesAllReq) (res SpiderDevTblServicetreeRestByQueriesAllRes, err error) {
	list, total, err := rest.repo.ByQueriesAll(ctx, req.Query)
	return SpiderDevTblServicetreeRestByQueriesAllRes{List: list, Total: total}, err
}

type SpiderDevTblServicetreeRestUpdateByIdReq struct {
	Uri struct {
		Id int32 `json:"id" uri:"spiderdevtblservicetreeId"`
	} `json:"uri"`
	Body SpiderDevTblServicetreeBaseUpdateReq `json:"body"`
}

func (rest *SpiderDevTblServicetreeRest) SpiderDevTblServicetreeRestUpdateById(ctx context.Context, req SpiderDevTblServicetreeRestUpdateByIdReq) (res *SpiderDevTblServicetree, err error) {
	return rest.repo.UpdateById(ctx, req.Uri.Id, req.Body)
}

type SpiderDevTblServicetreeRestUpdateManyReq struct {
	Body []SpiderDevTblServicetreeBaseUpdateReq `json:"body"`
}

func (rest *SpiderDevTblServicetreeRest) SpiderDevTblServicetreeRestUpdateMany(ctx context.Context, req SpiderDevTblServicetreeRestUpdateManyReq) (success bool, err error) {
	err = rest.repo.UpdateMany(ctx, req.Body)
	if err != nil {
		return false, err
	}
	return true, err
}

type SpiderDevTblServicetreeRestDeleteByIdReq struct {
	Uri struct {
		Id int32 `json:"id" uri:"spiderdevtblservicetreeId"`
	} `json:"uri"`
}

func (rest *SpiderDevTblServicetreeRest) SpiderDevTblServicetreeRestDeleteById(ctx context.Context, req SpiderDevTblServicetreeRestDeleteByIdReq) (success bool, err error) {
	err = rest.repo.DeleteById(ctx, req.Uri.Id)
	if err != nil {
		return false, err
	}
	return true, err
}

type SpiderDevTblServicetreeRestDeleteManyReq struct {
	Query struct {
		Ids []int32 `json:"ids" form:"ids"`
	} `json:"query"`
}

func (rest *SpiderDevTblServicetreeRest) SpiderDevTblServicetreeRestDeleteMany(ctx context.Context, req SpiderDevTblServicetreeRestDeleteManyReq) (success bool, err error) {
	err = rest.repo.DeleteMany(ctx, req.Query.Ids)
	if err != nil {
		return false, err
	}
	return true, err
}

type UserRestInterface interface {
	// @http-gin /user POST
	UserRestCreate(ctx context.Context, req UserRestCreateReq) (res *User, err error)
	// @http-gin /users POST
	UserRestCreateMany(ctx context.Context, req UserRestCreateManyReq) (res Users, err error)
	// @http-gin /users/:userId GET
	UserRestGetById(ctx context.Context, req UserRestGetByIdReq) (res UserBaseGetRes, err error)
	// @http-gin /users GET
	UserRestByQueriesAll(ctx context.Context, req UserRestByQueriesAllReq) (res UserRestByQueriesAllRes, err error)
	// @http-gin /users/:userId PUT
	UserRestUpdateById(ctx context.Context, req UserRestUpdateByIdReq) (res *User, err error)
	// @http-gin /users PUT
	UserRestUpdateMany(ctx context.Context, req UserRestUpdateManyReq) (success bool, err error)
	// @http-gin /users/:userId DELETE
	UserRestDeleteById(ctx context.Context, req UserRestDeleteByIdReq) (success bool, err error)
	// @http-gin /users DELETE
	UserRestDeleteMany(ctx context.Context, req UserRestDeleteManyReq) (success bool, err error)
}

func NewUserRest(client *Client) UserRestInterface {
	return &UserRest{repo: &UserBase{client: client}}
}

type UserRest struct {
	repo UserBaseInterface
}

type UserRestCreateReq struct {
	Body UserBaseCreateReq `json:"body"`
}

func (rest *UserRest) UserRestCreate(ctx context.Context, req UserRestCreateReq) (res *User, err error) {
	return rest.repo.Create(ctx, req.Body)
}

type UserRestCreateManyReq struct {
	Body []UserBaseCreateReq `json:"body"`
}

func (rest *UserRest) UserRestCreateMany(ctx context.Context, req UserRestCreateManyReq) (res Users, err error) {
	return rest.repo.CreateMany(ctx, req.Body)
}

type UserRestGetByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"userId"`
	}
}

func (rest *UserRest) UserRestGetById(ctx context.Context, req UserRestGetByIdReq) (res UserBaseGetRes, err error) {
	return rest.repo.GetById(ctx, req.Uri.Id)
}

type UserRestByQueriesAllReq struct {
	Query UserQueryOps `json:"query"`
}

type UserRestByQueriesAllRes struct {
	List  []UserBaseGetRes `json:"items"`
	Total int              `json:"total"`
}

func (rest *UserRest) UserRestByQueriesAll(ctx context.Context, req UserRestByQueriesAllReq) (res UserRestByQueriesAllRes, err error) {
	list, total, err := rest.repo.ByQueriesAll(ctx, req.Query)
	return UserRestByQueriesAllRes{List: list, Total: total}, err
}

type UserRestUpdateByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"userId"`
	} `json:"uri"`
	Body UserBaseUpdateReq `json:"body"`
}

func (rest *UserRest) UserRestUpdateById(ctx context.Context, req UserRestUpdateByIdReq) (res *User, err error) {
	return rest.repo.UpdateById(ctx, req.Uri.Id, req.Body)
}

type UserRestUpdateManyReq struct {
	Body []UserBaseUpdateReq `json:"body"`
}

func (rest *UserRest) UserRestUpdateMany(ctx context.Context, req UserRestUpdateManyReq) (success bool, err error) {
	err = rest.repo.UpdateMany(ctx, req.Body)
	if err != nil {
		return false, err
	}
	return true, err
}

type UserRestDeleteByIdReq struct {
	Uri struct {
		Id int `json:"id" uri:"userId"`
	} `json:"uri"`
}

func (rest *UserRest) UserRestDeleteById(ctx context.Context, req UserRestDeleteByIdReq) (success bool, err error) {
	err = rest.repo.DeleteById(ctx, req.Uri.Id)
	if err != nil {
		return false, err
	}
	return true, err
}

type UserRestDeleteManyReq struct {
	Query struct {
		Ids []int `json:"ids" form:"ids"`
	} `json:"query"`
}

func (rest *UserRest) UserRestDeleteMany(ctx context.Context, req UserRestDeleteManyReq) (success bool, err error) {
	err = rest.repo.DeleteMany(ctx, req.Query.Ids)
	if err != nil {
		return false, err
	}
	return true, err
}

// AuditClient is a client for the Audit schema.
type AuditClient struct {
	config
}

// NewAuditClient returns a client for the Audit from the given config.
func NewAuditClient(c config) *AuditClient {
	return &AuditClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `audit.Hooks(f(g(h())))`.
func (c *AuditClient) Use(hooks ...Hook) {
	c.hooks.Audit = append(c.hooks.Audit, hooks...)
}

// Create returns a create builder for Audit.
func (c *AuditClient) Create() *AuditCreate {
	mutation := newAuditMutation(c.config, OpCreate)
	return &AuditCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Audit entities.
func (c *AuditClient) CreateBulk(builders ...*AuditCreate) *AuditCreateBulk {
	return &AuditCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Audit.
func (c *AuditClient) Update() *AuditUpdate {
	mutation := newAuditMutation(c.config, OpUpdate)
	return &AuditUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuditClient) UpdateOne(a *Audit) *AuditUpdateOne {
	mutation := newAuditMutation(c.config, OpUpdateOne, withAudit(a))
	return &AuditUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuditClient) UpdateOneID(id int) *AuditUpdateOne {
	mutation := newAuditMutation(c.config, OpUpdateOne, withAuditID(id))
	return &AuditUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Audit.
func (c *AuditClient) Delete() *AuditDelete {
	mutation := newAuditMutation(c.config, OpDelete)
	return &AuditDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AuditClient) DeleteOne(a *Audit) *AuditDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AuditClient) DeleteOneID(id int) *AuditDeleteOne {
	builder := c.Delete().Where(audit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuditDeleteOne{builder}
}

// Query returns a query builder for Audit.
func (c *AuditClient) Query() *AuditQuery {
	return &AuditQuery{
		config: c.config,
	}
}

// Get returns a Audit entity by its id.
func (c *AuditClient) Get(ctx context.Context, id int) (*Audit, error) {
	return c.Query().Where(audit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuditClient) GetX(ctx context.Context, id int) *Audit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuditClient) Hooks() []Hook {
	return c.hooks.Audit
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `project.Hooks(f(g(h())))`.
func (c *ProjectClient) Use(hooks ...Hook) {
	c.hooks.Project = append(c.hooks.Project, hooks...)
}

// Create returns a create builder for Project.
func (c *ProjectClient) Create() *ProjectCreate {
	mutation := newProjectMutation(c.config, OpCreate)
	return &ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Project entities.
func (c *ProjectClient) CreateBulk(builders ...*ProjectCreate) *ProjectCreateBulk {
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	mutation := newProjectMutation(c.config, OpUpdate)
	return &ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(pr *Project) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProject(pr))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id int) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProjectID(id))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	mutation := newProjectMutation(c.config, OpDelete)
	return &ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectClient) DeleteOne(pr *Project) *ProjectDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectClient) DeleteOneID(id int) *ProjectDeleteOne {
	builder := c.Delete().Where(project.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDeleteOne{builder}
}

// Query returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{
		config: c.config,
	}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id int) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id int) *Project {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServices queries the services edge of a Project.
func (c *ProjectClient) QueryServices(pr *Project) *ServiceQuery {
	query := &ServiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ServicesTable, project.ServicesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectClient) Hooks() []Hook {
	return c.hooks.Project
}

// ResourceClient is a client for the Resource schema.
type ResourceClient struct {
	config
}

// NewResourceClient returns a client for the Resource from the given config.
func NewResourceClient(c config) *ResourceClient {
	return &ResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resource.Hooks(f(g(h())))`.
func (c *ResourceClient) Use(hooks ...Hook) {
	c.hooks.Resource = append(c.hooks.Resource, hooks...)
}

// Create returns a create builder for Resource.
func (c *ResourceClient) Create() *ResourceCreate {
	mutation := newResourceMutation(c.config, OpCreate)
	return &ResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Resource entities.
func (c *ResourceClient) CreateBulk(builders ...*ResourceCreate) *ResourceCreateBulk {
	return &ResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Resource.
func (c *ResourceClient) Update() *ResourceUpdate {
	mutation := newResourceMutation(c.config, OpUpdate)
	return &ResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResourceClient) UpdateOne(r *Resource) *ResourceUpdateOne {
	mutation := newResourceMutation(c.config, OpUpdateOne, withResource(r))
	return &ResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResourceClient) UpdateOneID(id int) *ResourceUpdateOne {
	mutation := newResourceMutation(c.config, OpUpdateOne, withResourceID(id))
	return &ResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Resource.
func (c *ResourceClient) Delete() *ResourceDelete {
	mutation := newResourceMutation(c.config, OpDelete)
	return &ResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ResourceClient) DeleteOne(r *Resource) *ResourceDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ResourceClient) DeleteOneID(id int) *ResourceDeleteOne {
	builder := c.Delete().Where(resource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResourceDeleteOne{builder}
}

// Query returns a query builder for Resource.
func (c *ResourceClient) Query() *ResourceQuery {
	return &ResourceQuery{
		config: c.config,
	}
}

// Get returns a Resource entity by its id.
func (c *ResourceClient) Get(ctx context.Context, id int) (*Resource, error) {
	return c.Query().Where(resource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResourceClient) GetX(ctx context.Context, id int) *Resource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ResourceClient) Hooks() []Hook {
	return c.hooks.Resource
}

// ServiceClient is a client for the Service schema.
type ServiceClient struct {
	config
}

// NewServiceClient returns a client for the Service from the given config.
func NewServiceClient(c config) *ServiceClient {
	return &ServiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `service.Hooks(f(g(h())))`.
func (c *ServiceClient) Use(hooks ...Hook) {
	c.hooks.Service = append(c.hooks.Service, hooks...)
}

// Create returns a create builder for Service.
func (c *ServiceClient) Create() *ServiceCreate {
	mutation := newServiceMutation(c.config, OpCreate)
	return &ServiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Service entities.
func (c *ServiceClient) CreateBulk(builders ...*ServiceCreate) *ServiceCreateBulk {
	return &ServiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Service.
func (c *ServiceClient) Update() *ServiceUpdate {
	mutation := newServiceMutation(c.config, OpUpdate)
	return &ServiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceClient) UpdateOne(s *Service) *ServiceUpdateOne {
	mutation := newServiceMutation(c.config, OpUpdateOne, withService(s))
	return &ServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceClient) UpdateOneID(id int) *ServiceUpdateOne {
	mutation := newServiceMutation(c.config, OpUpdateOne, withServiceID(id))
	return &ServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Service.
func (c *ServiceClient) Delete() *ServiceDelete {
	mutation := newServiceMutation(c.config, OpDelete)
	return &ServiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ServiceClient) DeleteOne(s *Service) *ServiceDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ServiceClient) DeleteOneID(id int) *ServiceDeleteOne {
	builder := c.Delete().Where(service.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceDeleteOne{builder}
}

// Query returns a query builder for Service.
func (c *ServiceClient) Query() *ServiceQuery {
	return &ServiceQuery{
		config: c.config,
	}
}

// Get returns a Service entity by its id.
func (c *ServiceClient) Get(ctx context.Context, id int) (*Service, error) {
	return c.Query().Where(service.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceClient) GetX(ctx context.Context, id int) *Service {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a Service.
func (c *ServiceClient) QueryProject(s *Service) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(service.Table, service.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, service.ProjectTable, service.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServiceClient) Hooks() []Hook {
	return c.hooks.Service
}

// SpiderDevTblServicetreeClient is a client for the SpiderDevTblServicetree schema.
type SpiderDevTblServicetreeClient struct {
	config
}

// NewSpiderDevTblServicetreeClient returns a client for the SpiderDevTblServicetree from the given config.
func NewSpiderDevTblServicetreeClient(c config) *SpiderDevTblServicetreeClient {
	return &SpiderDevTblServicetreeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `spiderdevtblservicetree.Hooks(f(g(h())))`.
func (c *SpiderDevTblServicetreeClient) Use(hooks ...Hook) {
	c.hooks.SpiderDevTblServicetree = append(c.hooks.SpiderDevTblServicetree, hooks...)
}

// Create returns a create builder for SpiderDevTblServicetree.
func (c *SpiderDevTblServicetreeClient) Create() *SpiderDevTblServicetreeCreate {
	mutation := newSpiderDevTblServicetreeMutation(c.config, OpCreate)
	return &SpiderDevTblServicetreeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SpiderDevTblServicetree entities.
func (c *SpiderDevTblServicetreeClient) CreateBulk(builders ...*SpiderDevTblServicetreeCreate) *SpiderDevTblServicetreeCreateBulk {
	return &SpiderDevTblServicetreeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SpiderDevTblServicetree.
func (c *SpiderDevTblServicetreeClient) Update() *SpiderDevTblServicetreeUpdate {
	mutation := newSpiderDevTblServicetreeMutation(c.config, OpUpdate)
	return &SpiderDevTblServicetreeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SpiderDevTblServicetreeClient) UpdateOne(sdts *SpiderDevTblServicetree) *SpiderDevTblServicetreeUpdateOne {
	mutation := newSpiderDevTblServicetreeMutation(c.config, OpUpdateOne, withSpiderDevTblServicetree(sdts))
	return &SpiderDevTblServicetreeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SpiderDevTblServicetreeClient) UpdateOneID(id int32) *SpiderDevTblServicetreeUpdateOne {
	mutation := newSpiderDevTblServicetreeMutation(c.config, OpUpdateOne, withSpiderDevTblServicetreeID(id))
	return &SpiderDevTblServicetreeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SpiderDevTblServicetree.
func (c *SpiderDevTblServicetreeClient) Delete() *SpiderDevTblServicetreeDelete {
	mutation := newSpiderDevTblServicetreeMutation(c.config, OpDelete)
	return &SpiderDevTblServicetreeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SpiderDevTblServicetreeClient) DeleteOne(sdts *SpiderDevTblServicetree) *SpiderDevTblServicetreeDeleteOne {
	return c.DeleteOneID(sdts.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SpiderDevTblServicetreeClient) DeleteOneID(id int32) *SpiderDevTblServicetreeDeleteOne {
	builder := c.Delete().Where(spiderdevtblservicetree.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SpiderDevTblServicetreeDeleteOne{builder}
}

// Query returns a query builder for SpiderDevTblServicetree.
func (c *SpiderDevTblServicetreeClient) Query() *SpiderDevTblServicetreeQuery {
	return &SpiderDevTblServicetreeQuery{
		config: c.config,
	}
}

// Get returns a SpiderDevTblServicetree entity by its id.
func (c *SpiderDevTblServicetreeClient) Get(ctx context.Context, id int32) (*SpiderDevTblServicetree, error) {
	return c.Query().Where(spiderdevtblservicetree.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SpiderDevTblServicetreeClient) GetX(ctx context.Context, id int32) *SpiderDevTblServicetree {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SpiderDevTblServicetreeClient) Hooks() []Hook {
	return c.hooks.SpiderDevTblServicetree
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
