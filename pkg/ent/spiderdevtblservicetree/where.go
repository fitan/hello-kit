// Code generated by entc, DO NOT EDIT.

package spiderdevtblservicetree

import (
	"hello/pkg/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// IDIsNil applies the IsNil predicate on the ID field.
func IDIsNil(id int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldID)))
	})
}

// IDNotNil applies the NotNil predicate on the ID field.
func IDNotNil(id int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldID)))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Aname applies equality check predicate on the "aname" field. It's identical to AnameEQ.
func Aname(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAname), v))
	})
}

// Pnode applies equality check predicate on the "pnode" field. It's identical to PnodeEQ.
func Pnode(v int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPnode), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKey), v))
	})
}

// Origin applies equality check predicate on the "origin" field. It's identical to OriginEQ.
func Origin(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrigin), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.SpiderDevTblServicetree {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.SpiderDevTblServicetree {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// AnameEQ applies the EQ predicate on the "aname" field.
func AnameEQ(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAname), v))
	})
}

// AnameNEQ applies the NEQ predicate on the "aname" field.
func AnameNEQ(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAname), v))
	})
}

// AnameIn applies the In predicate on the "aname" field.
func AnameIn(vs ...string) predicate.SpiderDevTblServicetree {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAname), v...))
	})
}

// AnameNotIn applies the NotIn predicate on the "aname" field.
func AnameNotIn(vs ...string) predicate.SpiderDevTblServicetree {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAname), v...))
	})
}

// AnameGT applies the GT predicate on the "aname" field.
func AnameGT(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAname), v))
	})
}

// AnameGTE applies the GTE predicate on the "aname" field.
func AnameGTE(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAname), v))
	})
}

// AnameLT applies the LT predicate on the "aname" field.
func AnameLT(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAname), v))
	})
}

// AnameLTE applies the LTE predicate on the "aname" field.
func AnameLTE(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAname), v))
	})
}

// AnameContains applies the Contains predicate on the "aname" field.
func AnameContains(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAname), v))
	})
}

// AnameHasPrefix applies the HasPrefix predicate on the "aname" field.
func AnameHasPrefix(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAname), v))
	})
}

// AnameHasSuffix applies the HasSuffix predicate on the "aname" field.
func AnameHasSuffix(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAname), v))
	})
}

// AnameIsNil applies the IsNil predicate on the "aname" field.
func AnameIsNil() predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAname)))
	})
}

// AnameNotNil applies the NotNil predicate on the "aname" field.
func AnameNotNil() predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAname)))
	})
}

// AnameEqualFold applies the EqualFold predicate on the "aname" field.
func AnameEqualFold(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAname), v))
	})
}

// AnameContainsFold applies the ContainsFold predicate on the "aname" field.
func AnameContainsFold(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAname), v))
	})
}

// PnodeEQ applies the EQ predicate on the "pnode" field.
func PnodeEQ(v int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPnode), v))
	})
}

// PnodeNEQ applies the NEQ predicate on the "pnode" field.
func PnodeNEQ(v int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPnode), v))
	})
}

// PnodeIn applies the In predicate on the "pnode" field.
func PnodeIn(vs ...int32) predicate.SpiderDevTblServicetree {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPnode), v...))
	})
}

// PnodeNotIn applies the NotIn predicate on the "pnode" field.
func PnodeNotIn(vs ...int32) predicate.SpiderDevTblServicetree {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPnode), v...))
	})
}

// PnodeGT applies the GT predicate on the "pnode" field.
func PnodeGT(v int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPnode), v))
	})
}

// PnodeGTE applies the GTE predicate on the "pnode" field.
func PnodeGTE(v int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPnode), v))
	})
}

// PnodeLT applies the LT predicate on the "pnode" field.
func PnodeLT(v int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPnode), v))
	})
}

// PnodeLTE applies the LTE predicate on the "pnode" field.
func PnodeLTE(v int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPnode), v))
	})
}

// PnodeIsNil applies the IsNil predicate on the "pnode" field.
func PnodeIsNil() predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPnode)))
	})
}

// PnodeNotNil applies the NotNil predicate on the "pnode" field.
func PnodeNotNil() predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPnode)))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int32) predicate.SpiderDevTblServicetree {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int32) predicate.SpiderDevTblServicetree {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int32) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldType)))
	})
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldType)))
	})
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKey), v))
	})
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKey), v))
	})
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.SpiderDevTblServicetree {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKey), v...))
	})
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.SpiderDevTblServicetree {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKey), v...))
	})
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKey), v))
	})
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKey), v))
	})
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKey), v))
	})
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKey), v))
	})
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKey), v))
	})
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKey), v))
	})
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKey), v))
	})
}

// KeyIsNil applies the IsNil predicate on the "key" field.
func KeyIsNil() predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldKey)))
	})
}

// KeyNotNil applies the NotNil predicate on the "key" field.
func KeyNotNil() predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldKey)))
	})
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKey), v))
	})
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKey), v))
	})
}

// OriginEQ applies the EQ predicate on the "origin" field.
func OriginEQ(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrigin), v))
	})
}

// OriginNEQ applies the NEQ predicate on the "origin" field.
func OriginNEQ(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrigin), v))
	})
}

// OriginIn applies the In predicate on the "origin" field.
func OriginIn(vs ...string) predicate.SpiderDevTblServicetree {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrigin), v...))
	})
}

// OriginNotIn applies the NotIn predicate on the "origin" field.
func OriginNotIn(vs ...string) predicate.SpiderDevTblServicetree {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrigin), v...))
	})
}

// OriginGT applies the GT predicate on the "origin" field.
func OriginGT(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrigin), v))
	})
}

// OriginGTE applies the GTE predicate on the "origin" field.
func OriginGTE(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrigin), v))
	})
}

// OriginLT applies the LT predicate on the "origin" field.
func OriginLT(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrigin), v))
	})
}

// OriginLTE applies the LTE predicate on the "origin" field.
func OriginLTE(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrigin), v))
	})
}

// OriginContains applies the Contains predicate on the "origin" field.
func OriginContains(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrigin), v))
	})
}

// OriginHasPrefix applies the HasPrefix predicate on the "origin" field.
func OriginHasPrefix(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrigin), v))
	})
}

// OriginHasSuffix applies the HasSuffix predicate on the "origin" field.
func OriginHasSuffix(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrigin), v))
	})
}

// OriginIsNil applies the IsNil predicate on the "origin" field.
func OriginIsNil() predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrigin)))
	})
}

// OriginNotNil applies the NotNil predicate on the "origin" field.
func OriginNotNil() predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrigin)))
	})
}

// OriginEqualFold applies the EqualFold predicate on the "origin" field.
func OriginEqualFold(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrigin), v))
	})
}

// OriginContainsFold applies the ContainsFold predicate on the "origin" field.
func OriginContainsFold(v string) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrigin), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SpiderDevTblServicetree) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SpiderDevTblServicetree) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SpiderDevTblServicetree) predicate.SpiderDevTblServicetree {
	return predicate.SpiderDevTblServicetree(func(s *sql.Selector) {
		p(s.Not())
	})
}
