// Code generated by entc, DO NOT EDIT.

package pod

import (
	"hello/pkg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// IDIsNil applies the IsNil predicate on the ID field.
func IDIsNil(id int64) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldID)))
	})
}

// IDNotNil applies the NotNil predicate on the ID field.
func IDNotNil(id int64) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldID)))
	})
}

// ClusterName applies equality check predicate on the "cluster_name" field. It's identical to ClusterNameEQ.
func ClusterName(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClusterName), v))
	})
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNamespace), v))
	})
}

// ServiceName applies equality check predicate on the "service_name" field. It's identical to ServiceNameEQ.
func ServiceName(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceName), v))
	})
}

// PodName applies equality check predicate on the "pod_name" field. It's identical to PodNameEQ.
func PodName(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPodName), v))
	})
}

// ResourceVersion applies equality check predicate on the "resource_version" field. It's identical to ResourceVersionEQ.
func ResourceVersion(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResourceVersion), v))
	})
}

// PodIP applies equality check predicate on the "pod_ip" field. It's identical to PodIPEQ.
func PodIP(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPodIP), v))
	})
}

// HostIP applies equality check predicate on the "host_ip" field. It's identical to HostIPEQ.
func HostIP(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHostIP), v))
	})
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// Phase applies equality check predicate on the "phase" field. It's identical to PhaseEQ.
func Phase(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhase), v))
	})
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReason), v))
	})
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMessage), v))
	})
}

// Detail applies equality check predicate on the "detail" field. It's identical to DetailEQ.
func Detail(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetail), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ClusterNameEQ applies the EQ predicate on the "cluster_name" field.
func ClusterNameEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClusterName), v))
	})
}

// ClusterNameNEQ applies the NEQ predicate on the "cluster_name" field.
func ClusterNameNEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClusterName), v))
	})
}

// ClusterNameIn applies the In predicate on the "cluster_name" field.
func ClusterNameIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClusterName), v...))
	})
}

// ClusterNameNotIn applies the NotIn predicate on the "cluster_name" field.
func ClusterNameNotIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClusterName), v...))
	})
}

// ClusterNameGT applies the GT predicate on the "cluster_name" field.
func ClusterNameGT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClusterName), v))
	})
}

// ClusterNameGTE applies the GTE predicate on the "cluster_name" field.
func ClusterNameGTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClusterName), v))
	})
}

// ClusterNameLT applies the LT predicate on the "cluster_name" field.
func ClusterNameLT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClusterName), v))
	})
}

// ClusterNameLTE applies the LTE predicate on the "cluster_name" field.
func ClusterNameLTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClusterName), v))
	})
}

// ClusterNameContains applies the Contains predicate on the "cluster_name" field.
func ClusterNameContains(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClusterName), v))
	})
}

// ClusterNameHasPrefix applies the HasPrefix predicate on the "cluster_name" field.
func ClusterNameHasPrefix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClusterName), v))
	})
}

// ClusterNameHasSuffix applies the HasSuffix predicate on the "cluster_name" field.
func ClusterNameHasSuffix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClusterName), v))
	})
}

// ClusterNameIsNil applies the IsNil predicate on the "cluster_name" field.
func ClusterNameIsNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldClusterName)))
	})
}

// ClusterNameNotNil applies the NotNil predicate on the "cluster_name" field.
func ClusterNameNotNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldClusterName)))
	})
}

// ClusterNameEqualFold applies the EqualFold predicate on the "cluster_name" field.
func ClusterNameEqualFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClusterName), v))
	})
}

// ClusterNameContainsFold applies the ContainsFold predicate on the "cluster_name" field.
func ClusterNameContainsFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClusterName), v))
	})
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNamespace), v))
	})
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNamespace), v))
	})
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNamespace), v...))
	})
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNamespace), v...))
	})
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNamespace), v))
	})
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNamespace), v))
	})
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNamespace), v))
	})
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNamespace), v))
	})
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNamespace), v))
	})
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNamespace), v))
	})
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNamespace), v))
	})
}

// NamespaceIsNil applies the IsNil predicate on the "namespace" field.
func NamespaceIsNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNamespace)))
	})
}

// NamespaceNotNil applies the NotNil predicate on the "namespace" field.
func NamespaceNotNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNamespace)))
	})
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNamespace), v))
	})
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNamespace), v))
	})
}

// ServiceNameEQ applies the EQ predicate on the "service_name" field.
func ServiceNameEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceName), v))
	})
}

// ServiceNameNEQ applies the NEQ predicate on the "service_name" field.
func ServiceNameNEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServiceName), v))
	})
}

// ServiceNameIn applies the In predicate on the "service_name" field.
func ServiceNameIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldServiceName), v...))
	})
}

// ServiceNameNotIn applies the NotIn predicate on the "service_name" field.
func ServiceNameNotIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldServiceName), v...))
	})
}

// ServiceNameGT applies the GT predicate on the "service_name" field.
func ServiceNameGT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldServiceName), v))
	})
}

// ServiceNameGTE applies the GTE predicate on the "service_name" field.
func ServiceNameGTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldServiceName), v))
	})
}

// ServiceNameLT applies the LT predicate on the "service_name" field.
func ServiceNameLT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldServiceName), v))
	})
}

// ServiceNameLTE applies the LTE predicate on the "service_name" field.
func ServiceNameLTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldServiceName), v))
	})
}

// ServiceNameContains applies the Contains predicate on the "service_name" field.
func ServiceNameContains(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldServiceName), v))
	})
}

// ServiceNameHasPrefix applies the HasPrefix predicate on the "service_name" field.
func ServiceNameHasPrefix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldServiceName), v))
	})
}

// ServiceNameHasSuffix applies the HasSuffix predicate on the "service_name" field.
func ServiceNameHasSuffix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldServiceName), v))
	})
}

// ServiceNameIsNil applies the IsNil predicate on the "service_name" field.
func ServiceNameIsNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldServiceName)))
	})
}

// ServiceNameNotNil applies the NotNil predicate on the "service_name" field.
func ServiceNameNotNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldServiceName)))
	})
}

// ServiceNameEqualFold applies the EqualFold predicate on the "service_name" field.
func ServiceNameEqualFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldServiceName), v))
	})
}

// ServiceNameContainsFold applies the ContainsFold predicate on the "service_name" field.
func ServiceNameContainsFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldServiceName), v))
	})
}

// PodNameEQ applies the EQ predicate on the "pod_name" field.
func PodNameEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPodName), v))
	})
}

// PodNameNEQ applies the NEQ predicate on the "pod_name" field.
func PodNameNEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPodName), v))
	})
}

// PodNameIn applies the In predicate on the "pod_name" field.
func PodNameIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPodName), v...))
	})
}

// PodNameNotIn applies the NotIn predicate on the "pod_name" field.
func PodNameNotIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPodName), v...))
	})
}

// PodNameGT applies the GT predicate on the "pod_name" field.
func PodNameGT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPodName), v))
	})
}

// PodNameGTE applies the GTE predicate on the "pod_name" field.
func PodNameGTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPodName), v))
	})
}

// PodNameLT applies the LT predicate on the "pod_name" field.
func PodNameLT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPodName), v))
	})
}

// PodNameLTE applies the LTE predicate on the "pod_name" field.
func PodNameLTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPodName), v))
	})
}

// PodNameContains applies the Contains predicate on the "pod_name" field.
func PodNameContains(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPodName), v))
	})
}

// PodNameHasPrefix applies the HasPrefix predicate on the "pod_name" field.
func PodNameHasPrefix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPodName), v))
	})
}

// PodNameHasSuffix applies the HasSuffix predicate on the "pod_name" field.
func PodNameHasSuffix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPodName), v))
	})
}

// PodNameIsNil applies the IsNil predicate on the "pod_name" field.
func PodNameIsNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPodName)))
	})
}

// PodNameNotNil applies the NotNil predicate on the "pod_name" field.
func PodNameNotNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPodName)))
	})
}

// PodNameEqualFold applies the EqualFold predicate on the "pod_name" field.
func PodNameEqualFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPodName), v))
	})
}

// PodNameContainsFold applies the ContainsFold predicate on the "pod_name" field.
func PodNameContainsFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPodName), v))
	})
}

// ResourceVersionEQ applies the EQ predicate on the "resource_version" field.
func ResourceVersionEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResourceVersion), v))
	})
}

// ResourceVersionNEQ applies the NEQ predicate on the "resource_version" field.
func ResourceVersionNEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResourceVersion), v))
	})
}

// ResourceVersionIn applies the In predicate on the "resource_version" field.
func ResourceVersionIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResourceVersion), v...))
	})
}

// ResourceVersionNotIn applies the NotIn predicate on the "resource_version" field.
func ResourceVersionNotIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResourceVersion), v...))
	})
}

// ResourceVersionGT applies the GT predicate on the "resource_version" field.
func ResourceVersionGT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResourceVersion), v))
	})
}

// ResourceVersionGTE applies the GTE predicate on the "resource_version" field.
func ResourceVersionGTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResourceVersion), v))
	})
}

// ResourceVersionLT applies the LT predicate on the "resource_version" field.
func ResourceVersionLT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResourceVersion), v))
	})
}

// ResourceVersionLTE applies the LTE predicate on the "resource_version" field.
func ResourceVersionLTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResourceVersion), v))
	})
}

// ResourceVersionContains applies the Contains predicate on the "resource_version" field.
func ResourceVersionContains(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResourceVersion), v))
	})
}

// ResourceVersionHasPrefix applies the HasPrefix predicate on the "resource_version" field.
func ResourceVersionHasPrefix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResourceVersion), v))
	})
}

// ResourceVersionHasSuffix applies the HasSuffix predicate on the "resource_version" field.
func ResourceVersionHasSuffix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResourceVersion), v))
	})
}

// ResourceVersionIsNil applies the IsNil predicate on the "resource_version" field.
func ResourceVersionIsNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResourceVersion)))
	})
}

// ResourceVersionNotNil applies the NotNil predicate on the "resource_version" field.
func ResourceVersionNotNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResourceVersion)))
	})
}

// ResourceVersionEqualFold applies the EqualFold predicate on the "resource_version" field.
func ResourceVersionEqualFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResourceVersion), v))
	})
}

// ResourceVersionContainsFold applies the ContainsFold predicate on the "resource_version" field.
func ResourceVersionContainsFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResourceVersion), v))
	})
}

// PodIPEQ applies the EQ predicate on the "pod_ip" field.
func PodIPEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPodIP), v))
	})
}

// PodIPNEQ applies the NEQ predicate on the "pod_ip" field.
func PodIPNEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPodIP), v))
	})
}

// PodIPIn applies the In predicate on the "pod_ip" field.
func PodIPIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPodIP), v...))
	})
}

// PodIPNotIn applies the NotIn predicate on the "pod_ip" field.
func PodIPNotIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPodIP), v...))
	})
}

// PodIPGT applies the GT predicate on the "pod_ip" field.
func PodIPGT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPodIP), v))
	})
}

// PodIPGTE applies the GTE predicate on the "pod_ip" field.
func PodIPGTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPodIP), v))
	})
}

// PodIPLT applies the LT predicate on the "pod_ip" field.
func PodIPLT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPodIP), v))
	})
}

// PodIPLTE applies the LTE predicate on the "pod_ip" field.
func PodIPLTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPodIP), v))
	})
}

// PodIPContains applies the Contains predicate on the "pod_ip" field.
func PodIPContains(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPodIP), v))
	})
}

// PodIPHasPrefix applies the HasPrefix predicate on the "pod_ip" field.
func PodIPHasPrefix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPodIP), v))
	})
}

// PodIPHasSuffix applies the HasSuffix predicate on the "pod_ip" field.
func PodIPHasSuffix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPodIP), v))
	})
}

// PodIPIsNil applies the IsNil predicate on the "pod_ip" field.
func PodIPIsNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPodIP)))
	})
}

// PodIPNotNil applies the NotNil predicate on the "pod_ip" field.
func PodIPNotNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPodIP)))
	})
}

// PodIPEqualFold applies the EqualFold predicate on the "pod_ip" field.
func PodIPEqualFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPodIP), v))
	})
}

// PodIPContainsFold applies the ContainsFold predicate on the "pod_ip" field.
func PodIPContainsFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPodIP), v))
	})
}

// HostIPEQ applies the EQ predicate on the "host_ip" field.
func HostIPEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHostIP), v))
	})
}

// HostIPNEQ applies the NEQ predicate on the "host_ip" field.
func HostIPNEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHostIP), v))
	})
}

// HostIPIn applies the In predicate on the "host_ip" field.
func HostIPIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHostIP), v...))
	})
}

// HostIPNotIn applies the NotIn predicate on the "host_ip" field.
func HostIPNotIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHostIP), v...))
	})
}

// HostIPGT applies the GT predicate on the "host_ip" field.
func HostIPGT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHostIP), v))
	})
}

// HostIPGTE applies the GTE predicate on the "host_ip" field.
func HostIPGTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHostIP), v))
	})
}

// HostIPLT applies the LT predicate on the "host_ip" field.
func HostIPLT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHostIP), v))
	})
}

// HostIPLTE applies the LTE predicate on the "host_ip" field.
func HostIPLTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHostIP), v))
	})
}

// HostIPContains applies the Contains predicate on the "host_ip" field.
func HostIPContains(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHostIP), v))
	})
}

// HostIPHasPrefix applies the HasPrefix predicate on the "host_ip" field.
func HostIPHasPrefix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHostIP), v))
	})
}

// HostIPHasSuffix applies the HasSuffix predicate on the "host_ip" field.
func HostIPHasSuffix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHostIP), v))
	})
}

// HostIPIsNil applies the IsNil predicate on the "host_ip" field.
func HostIPIsNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHostIP)))
	})
}

// HostIPNotNil applies the NotNil predicate on the "host_ip" field.
func HostIPNotNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHostIP)))
	})
}

// HostIPEqualFold applies the EqualFold predicate on the "host_ip" field.
func HostIPEqualFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHostIP), v))
	})
}

// HostIPContainsFold applies the ContainsFold predicate on the "host_ip" field.
func HostIPContainsFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHostIP), v))
	})
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartTime), v))
	})
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartTime), v...))
	})
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartTime), v...))
	})
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartTime), v))
	})
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartTime), v))
	})
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartTime), v))
	})
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartTime), v))
	})
}

// StartTimeIsNil applies the IsNil predicate on the "start_time" field.
func StartTimeIsNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStartTime)))
	})
}

// StartTimeNotNil applies the NotNil predicate on the "start_time" field.
func StartTimeNotNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStartTime)))
	})
}

// PhaseEQ applies the EQ predicate on the "phase" field.
func PhaseEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhase), v))
	})
}

// PhaseNEQ applies the NEQ predicate on the "phase" field.
func PhaseNEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhase), v))
	})
}

// PhaseIn applies the In predicate on the "phase" field.
func PhaseIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhase), v...))
	})
}

// PhaseNotIn applies the NotIn predicate on the "phase" field.
func PhaseNotIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhase), v...))
	})
}

// PhaseGT applies the GT predicate on the "phase" field.
func PhaseGT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhase), v))
	})
}

// PhaseGTE applies the GTE predicate on the "phase" field.
func PhaseGTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhase), v))
	})
}

// PhaseLT applies the LT predicate on the "phase" field.
func PhaseLT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhase), v))
	})
}

// PhaseLTE applies the LTE predicate on the "phase" field.
func PhaseLTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhase), v))
	})
}

// PhaseContains applies the Contains predicate on the "phase" field.
func PhaseContains(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhase), v))
	})
}

// PhaseHasPrefix applies the HasPrefix predicate on the "phase" field.
func PhaseHasPrefix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhase), v))
	})
}

// PhaseHasSuffix applies the HasSuffix predicate on the "phase" field.
func PhaseHasSuffix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhase), v))
	})
}

// PhaseIsNil applies the IsNil predicate on the "phase" field.
func PhaseIsNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPhase)))
	})
}

// PhaseNotNil applies the NotNil predicate on the "phase" field.
func PhaseNotNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPhase)))
	})
}

// PhaseEqualFold applies the EqualFold predicate on the "phase" field.
func PhaseEqualFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhase), v))
	})
}

// PhaseContainsFold applies the ContainsFold predicate on the "phase" field.
func PhaseContainsFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhase), v))
	})
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReason), v))
	})
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReason), v))
	})
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReason), v...))
	})
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReason), v...))
	})
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReason), v))
	})
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReason), v))
	})
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReason), v))
	})
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReason), v))
	})
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReason), v))
	})
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReason), v))
	})
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReason), v))
	})
}

// ReasonIsNil applies the IsNil predicate on the "reason" field.
func ReasonIsNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReason)))
	})
}

// ReasonNotNil applies the NotNil predicate on the "reason" field.
func ReasonNotNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReason)))
	})
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReason), v))
	})
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReason), v))
	})
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMessage), v))
	})
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMessage), v))
	})
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMessage), v...))
	})
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMessage), v...))
	})
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMessage), v))
	})
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMessage), v))
	})
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMessage), v))
	})
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMessage), v))
	})
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMessage), v))
	})
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMessage), v))
	})
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMessage), v))
	})
}

// MessageIsNil applies the IsNil predicate on the "message" field.
func MessageIsNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMessage)))
	})
}

// MessageNotNil applies the NotNil predicate on the "message" field.
func MessageNotNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMessage)))
	})
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMessage), v))
	})
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMessage), v))
	})
}

// DetailEQ applies the EQ predicate on the "detail" field.
func DetailEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetail), v))
	})
}

// DetailNEQ applies the NEQ predicate on the "detail" field.
func DetailNEQ(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDetail), v))
	})
}

// DetailIn applies the In predicate on the "detail" field.
func DetailIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDetail), v...))
	})
}

// DetailNotIn applies the NotIn predicate on the "detail" field.
func DetailNotIn(vs ...string) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDetail), v...))
	})
}

// DetailGT applies the GT predicate on the "detail" field.
func DetailGT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDetail), v))
	})
}

// DetailGTE applies the GTE predicate on the "detail" field.
func DetailGTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDetail), v))
	})
}

// DetailLT applies the LT predicate on the "detail" field.
func DetailLT(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDetail), v))
	})
}

// DetailLTE applies the LTE predicate on the "detail" field.
func DetailLTE(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDetail), v))
	})
}

// DetailContains applies the Contains predicate on the "detail" field.
func DetailContains(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDetail), v))
	})
}

// DetailHasPrefix applies the HasPrefix predicate on the "detail" field.
func DetailHasPrefix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDetail), v))
	})
}

// DetailHasSuffix applies the HasSuffix predicate on the "detail" field.
func DetailHasSuffix(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDetail), v))
	})
}

// DetailIsNil applies the IsNil predicate on the "detail" field.
func DetailIsNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDetail)))
	})
}

// DetailNotNil applies the NotNil predicate on the "detail" field.
func DetailNotNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDetail)))
	})
}

// DetailEqualFold applies the EqualFold predicate on the "detail" field.
func DetailEqualFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDetail), v))
	})
}

// DetailContainsFold applies the ContainsFold predicate on the "detail" field.
func DetailContainsFold(v string) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDetail), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Pod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// HasServicetree applies the HasEdge predicate on the "servicetree" edge.
func HasServicetree() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ServicetreeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ServicetreeTable, ServicetreeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServicetreeWith applies the HasEdge predicate on the "servicetree" edge with a given conditions (other predicates).
func HasServicetreeWith(preds ...predicate.SpiderDevTblServicetree) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ServicetreeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ServicetreeTable, ServicetreeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pod) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pod) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pod) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		p(s.Not())
	})
}
