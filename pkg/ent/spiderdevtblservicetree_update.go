// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hello/pkg/ent/predicate"
	"hello/pkg/ent/spiderdevtblservicetree"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpiderDevTblServicetreeUpdate is the builder for updating SpiderDevTblServicetree entities.
type SpiderDevTblServicetreeUpdate struct {
	config
	hooks    []Hook
	mutation *SpiderDevTblServicetreeMutation
}

// Where appends a list predicates to the SpiderDevTblServicetreeUpdate builder.
func (sdtsu *SpiderDevTblServicetreeUpdate) Where(ps ...predicate.SpiderDevTblServicetree) *SpiderDevTblServicetreeUpdate {
	sdtsu.mutation.Where(ps...)
	return sdtsu
}

// SetName sets the "name" field.
func (sdtsu *SpiderDevTblServicetreeUpdate) SetName(s string) *SpiderDevTblServicetreeUpdate {
	sdtsu.mutation.SetName(s)
	return sdtsu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sdtsu *SpiderDevTblServicetreeUpdate) SetNillableName(s *string) *SpiderDevTblServicetreeUpdate {
	if s != nil {
		sdtsu.SetName(*s)
	}
	return sdtsu
}

// ClearName clears the value of the "name" field.
func (sdtsu *SpiderDevTblServicetreeUpdate) ClearName() *SpiderDevTblServicetreeUpdate {
	sdtsu.mutation.ClearName()
	return sdtsu
}

// SetAname sets the "aname" field.
func (sdtsu *SpiderDevTblServicetreeUpdate) SetAname(s string) *SpiderDevTblServicetreeUpdate {
	sdtsu.mutation.SetAname(s)
	return sdtsu
}

// SetNillableAname sets the "aname" field if the given value is not nil.
func (sdtsu *SpiderDevTblServicetreeUpdate) SetNillableAname(s *string) *SpiderDevTblServicetreeUpdate {
	if s != nil {
		sdtsu.SetAname(*s)
	}
	return sdtsu
}

// ClearAname clears the value of the "aname" field.
func (sdtsu *SpiderDevTblServicetreeUpdate) ClearAname() *SpiderDevTblServicetreeUpdate {
	sdtsu.mutation.ClearAname()
	return sdtsu
}

// SetPnode sets the "pnode" field.
func (sdtsu *SpiderDevTblServicetreeUpdate) SetPnode(i int32) *SpiderDevTblServicetreeUpdate {
	sdtsu.mutation.ResetPnode()
	sdtsu.mutation.SetPnode(i)
	return sdtsu
}

// SetNillablePnode sets the "pnode" field if the given value is not nil.
func (sdtsu *SpiderDevTblServicetreeUpdate) SetNillablePnode(i *int32) *SpiderDevTblServicetreeUpdate {
	if i != nil {
		sdtsu.SetPnode(*i)
	}
	return sdtsu
}

// AddPnode adds i to the "pnode" field.
func (sdtsu *SpiderDevTblServicetreeUpdate) AddPnode(i int32) *SpiderDevTblServicetreeUpdate {
	sdtsu.mutation.AddPnode(i)
	return sdtsu
}

// ClearPnode clears the value of the "pnode" field.
func (sdtsu *SpiderDevTblServicetreeUpdate) ClearPnode() *SpiderDevTblServicetreeUpdate {
	sdtsu.mutation.ClearPnode()
	return sdtsu
}

// SetType sets the "type" field.
func (sdtsu *SpiderDevTblServicetreeUpdate) SetType(i int32) *SpiderDevTblServicetreeUpdate {
	sdtsu.mutation.ResetType()
	sdtsu.mutation.SetType(i)
	return sdtsu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sdtsu *SpiderDevTblServicetreeUpdate) SetNillableType(i *int32) *SpiderDevTblServicetreeUpdate {
	if i != nil {
		sdtsu.SetType(*i)
	}
	return sdtsu
}

// AddType adds i to the "type" field.
func (sdtsu *SpiderDevTblServicetreeUpdate) AddType(i int32) *SpiderDevTblServicetreeUpdate {
	sdtsu.mutation.AddType(i)
	return sdtsu
}

// ClearType clears the value of the "type" field.
func (sdtsu *SpiderDevTblServicetreeUpdate) ClearType() *SpiderDevTblServicetreeUpdate {
	sdtsu.mutation.ClearType()
	return sdtsu
}

// SetKey sets the "key" field.
func (sdtsu *SpiderDevTblServicetreeUpdate) SetKey(s string) *SpiderDevTblServicetreeUpdate {
	sdtsu.mutation.SetKey(s)
	return sdtsu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (sdtsu *SpiderDevTblServicetreeUpdate) SetNillableKey(s *string) *SpiderDevTblServicetreeUpdate {
	if s != nil {
		sdtsu.SetKey(*s)
	}
	return sdtsu
}

// ClearKey clears the value of the "key" field.
func (sdtsu *SpiderDevTblServicetreeUpdate) ClearKey() *SpiderDevTblServicetreeUpdate {
	sdtsu.mutation.ClearKey()
	return sdtsu
}

// SetOrigin sets the "origin" field.
func (sdtsu *SpiderDevTblServicetreeUpdate) SetOrigin(s string) *SpiderDevTblServicetreeUpdate {
	sdtsu.mutation.SetOrigin(s)
	return sdtsu
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (sdtsu *SpiderDevTblServicetreeUpdate) SetNillableOrigin(s *string) *SpiderDevTblServicetreeUpdate {
	if s != nil {
		sdtsu.SetOrigin(*s)
	}
	return sdtsu
}

// ClearOrigin clears the value of the "origin" field.
func (sdtsu *SpiderDevTblServicetreeUpdate) ClearOrigin() *SpiderDevTblServicetreeUpdate {
	sdtsu.mutation.ClearOrigin()
	return sdtsu
}

// Mutation returns the SpiderDevTblServicetreeMutation object of the builder.
func (sdtsu *SpiderDevTblServicetreeUpdate) Mutation() *SpiderDevTblServicetreeMutation {
	return sdtsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdtsu *SpiderDevTblServicetreeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(sdtsu.hooks) == 0 {
		affected, err = sdtsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpiderDevTblServicetreeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sdtsu.mutation = mutation
			affected, err = sdtsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sdtsu.hooks) - 1; i >= 0; i-- {
			if sdtsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sdtsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sdtsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sdtsu *SpiderDevTblServicetreeUpdate) SaveX(ctx context.Context) int {
	affected, err := sdtsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdtsu *SpiderDevTblServicetreeUpdate) Exec(ctx context.Context) error {
	_, err := sdtsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdtsu *SpiderDevTblServicetreeUpdate) ExecX(ctx context.Context) {
	if err := sdtsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sdtsu *SpiderDevTblServicetreeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   spiderdevtblservicetree.Table,
			Columns: spiderdevtblservicetree.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: spiderdevtblservicetree.FieldID,
			},
		},
	}
	if ps := sdtsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdtsu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spiderdevtblservicetree.FieldName,
		})
	}
	if sdtsu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: spiderdevtblservicetree.FieldName,
		})
	}
	if value, ok := sdtsu.mutation.Aname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spiderdevtblservicetree.FieldAname,
		})
	}
	if sdtsu.mutation.AnameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: spiderdevtblservicetree.FieldAname,
		})
	}
	if value, ok := sdtsu.mutation.Pnode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: spiderdevtblservicetree.FieldPnode,
		})
	}
	if value, ok := sdtsu.mutation.AddedPnode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: spiderdevtblservicetree.FieldPnode,
		})
	}
	if sdtsu.mutation.PnodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: spiderdevtblservicetree.FieldPnode,
		})
	}
	if value, ok := sdtsu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: spiderdevtblservicetree.FieldType,
		})
	}
	if value, ok := sdtsu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: spiderdevtblservicetree.FieldType,
		})
	}
	if sdtsu.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: spiderdevtblservicetree.FieldType,
		})
	}
	if value, ok := sdtsu.mutation.Key(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spiderdevtblservicetree.FieldKey,
		})
	}
	if sdtsu.mutation.KeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: spiderdevtblservicetree.FieldKey,
		})
	}
	if value, ok := sdtsu.mutation.Origin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spiderdevtblservicetree.FieldOrigin,
		})
	}
	if sdtsu.mutation.OriginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: spiderdevtblservicetree.FieldOrigin,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sdtsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spiderdevtblservicetree.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SpiderDevTblServicetreeUpdateOne is the builder for updating a single SpiderDevTblServicetree entity.
type SpiderDevTblServicetreeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpiderDevTblServicetreeMutation
}

// SetName sets the "name" field.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) SetName(s string) *SpiderDevTblServicetreeUpdateOne {
	sdtsuo.mutation.SetName(s)
	return sdtsuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) SetNillableName(s *string) *SpiderDevTblServicetreeUpdateOne {
	if s != nil {
		sdtsuo.SetName(*s)
	}
	return sdtsuo
}

// ClearName clears the value of the "name" field.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) ClearName() *SpiderDevTblServicetreeUpdateOne {
	sdtsuo.mutation.ClearName()
	return sdtsuo
}

// SetAname sets the "aname" field.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) SetAname(s string) *SpiderDevTblServicetreeUpdateOne {
	sdtsuo.mutation.SetAname(s)
	return sdtsuo
}

// SetNillableAname sets the "aname" field if the given value is not nil.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) SetNillableAname(s *string) *SpiderDevTblServicetreeUpdateOne {
	if s != nil {
		sdtsuo.SetAname(*s)
	}
	return sdtsuo
}

// ClearAname clears the value of the "aname" field.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) ClearAname() *SpiderDevTblServicetreeUpdateOne {
	sdtsuo.mutation.ClearAname()
	return sdtsuo
}

// SetPnode sets the "pnode" field.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) SetPnode(i int32) *SpiderDevTblServicetreeUpdateOne {
	sdtsuo.mutation.ResetPnode()
	sdtsuo.mutation.SetPnode(i)
	return sdtsuo
}

// SetNillablePnode sets the "pnode" field if the given value is not nil.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) SetNillablePnode(i *int32) *SpiderDevTblServicetreeUpdateOne {
	if i != nil {
		sdtsuo.SetPnode(*i)
	}
	return sdtsuo
}

// AddPnode adds i to the "pnode" field.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) AddPnode(i int32) *SpiderDevTblServicetreeUpdateOne {
	sdtsuo.mutation.AddPnode(i)
	return sdtsuo
}

// ClearPnode clears the value of the "pnode" field.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) ClearPnode() *SpiderDevTblServicetreeUpdateOne {
	sdtsuo.mutation.ClearPnode()
	return sdtsuo
}

// SetType sets the "type" field.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) SetType(i int32) *SpiderDevTblServicetreeUpdateOne {
	sdtsuo.mutation.ResetType()
	sdtsuo.mutation.SetType(i)
	return sdtsuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) SetNillableType(i *int32) *SpiderDevTblServicetreeUpdateOne {
	if i != nil {
		sdtsuo.SetType(*i)
	}
	return sdtsuo
}

// AddType adds i to the "type" field.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) AddType(i int32) *SpiderDevTblServicetreeUpdateOne {
	sdtsuo.mutation.AddType(i)
	return sdtsuo
}

// ClearType clears the value of the "type" field.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) ClearType() *SpiderDevTblServicetreeUpdateOne {
	sdtsuo.mutation.ClearType()
	return sdtsuo
}

// SetKey sets the "key" field.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) SetKey(s string) *SpiderDevTblServicetreeUpdateOne {
	sdtsuo.mutation.SetKey(s)
	return sdtsuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) SetNillableKey(s *string) *SpiderDevTblServicetreeUpdateOne {
	if s != nil {
		sdtsuo.SetKey(*s)
	}
	return sdtsuo
}

// ClearKey clears the value of the "key" field.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) ClearKey() *SpiderDevTblServicetreeUpdateOne {
	sdtsuo.mutation.ClearKey()
	return sdtsuo
}

// SetOrigin sets the "origin" field.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) SetOrigin(s string) *SpiderDevTblServicetreeUpdateOne {
	sdtsuo.mutation.SetOrigin(s)
	return sdtsuo
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) SetNillableOrigin(s *string) *SpiderDevTblServicetreeUpdateOne {
	if s != nil {
		sdtsuo.SetOrigin(*s)
	}
	return sdtsuo
}

// ClearOrigin clears the value of the "origin" field.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) ClearOrigin() *SpiderDevTblServicetreeUpdateOne {
	sdtsuo.mutation.ClearOrigin()
	return sdtsuo
}

// Mutation returns the SpiderDevTblServicetreeMutation object of the builder.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) Mutation() *SpiderDevTblServicetreeMutation {
	return sdtsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) Select(field string, fields ...string) *SpiderDevTblServicetreeUpdateOne {
	sdtsuo.fields = append([]string{field}, fields...)
	return sdtsuo
}

// Save executes the query and returns the updated SpiderDevTblServicetree entity.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) Save(ctx context.Context) (*SpiderDevTblServicetree, error) {
	var (
		err  error
		node *SpiderDevTblServicetree
	)
	if len(sdtsuo.hooks) == 0 {
		node, err = sdtsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpiderDevTblServicetreeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sdtsuo.mutation = mutation
			node, err = sdtsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sdtsuo.hooks) - 1; i >= 0; i-- {
			if sdtsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sdtsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sdtsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) SaveX(ctx context.Context) *SpiderDevTblServicetree {
	node, err := sdtsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) Exec(ctx context.Context) error {
	_, err := sdtsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdtsuo *SpiderDevTblServicetreeUpdateOne) ExecX(ctx context.Context) {
	if err := sdtsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sdtsuo *SpiderDevTblServicetreeUpdateOne) sqlSave(ctx context.Context) (_node *SpiderDevTblServicetree, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   spiderdevtblservicetree.Table,
			Columns: spiderdevtblservicetree.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: spiderdevtblservicetree.FieldID,
			},
		},
	}
	id, ok := sdtsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SpiderDevTblServicetree.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sdtsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spiderdevtblservicetree.FieldID)
		for _, f := range fields {
			if !spiderdevtblservicetree.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != spiderdevtblservicetree.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sdtsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdtsuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spiderdevtblservicetree.FieldName,
		})
	}
	if sdtsuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: spiderdevtblservicetree.FieldName,
		})
	}
	if value, ok := sdtsuo.mutation.Aname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spiderdevtblservicetree.FieldAname,
		})
	}
	if sdtsuo.mutation.AnameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: spiderdevtblservicetree.FieldAname,
		})
	}
	if value, ok := sdtsuo.mutation.Pnode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: spiderdevtblservicetree.FieldPnode,
		})
	}
	if value, ok := sdtsuo.mutation.AddedPnode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: spiderdevtblservicetree.FieldPnode,
		})
	}
	if sdtsuo.mutation.PnodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: spiderdevtblservicetree.FieldPnode,
		})
	}
	if value, ok := sdtsuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: spiderdevtblservicetree.FieldType,
		})
	}
	if value, ok := sdtsuo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: spiderdevtblservicetree.FieldType,
		})
	}
	if sdtsuo.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: spiderdevtblservicetree.FieldType,
		})
	}
	if value, ok := sdtsuo.mutation.Key(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spiderdevtblservicetree.FieldKey,
		})
	}
	if sdtsuo.mutation.KeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: spiderdevtblservicetree.FieldKey,
		})
	}
	if value, ok := sdtsuo.mutation.Origin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spiderdevtblservicetree.FieldOrigin,
		})
	}
	if sdtsuo.mutation.OriginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: spiderdevtblservicetree.FieldOrigin,
		})
	}
	_node = &SpiderDevTblServicetree{config: sdtsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sdtsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spiderdevtblservicetree.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
