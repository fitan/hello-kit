// Code generated by entc, DO NOT EDIT.

package service

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the service type in the database.
	Label = "service"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAname holds the string denoting the aname field in the database.
	FieldAname = "aname"
	// FieldComments holds the string denoting the comments field in the database.
	FieldComments = "comments"
	// FieldClasses holds the string denoting the classes field in the database.
	FieldClasses = "classes"
	// FieldLang holds the string denoting the lang field in the database.
	FieldLang = "lang"
	// FieldGit holds the string denoting the git field in the database.
	FieldGit = "git"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// Table holds the table name of the service in the database.
	Table = "services"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "services"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_services"
)

// Columns holds all SQL columns for service fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldAname,
	FieldComments,
	FieldClasses,
	FieldLang,
	FieldGit,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "services"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"project_services",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// Classes defines the type for the "classes" enum field.
type Classes string

// Classes values.
const (
	ClassesApp        Classes = "app"
	ClassesMiddleware Classes = "middleware"
)

func (c Classes) String() string {
	return string(c)
}

// ClassesValidator is a validator for the "classes" field enum values. It is called by the builders before save.
func ClassesValidator(c Classes) error {
	switch c {
	case ClassesApp, ClassesMiddleware:
		return nil
	default:
		return fmt.Errorf("service: invalid enum value for classes field: %q", c)
	}
}
