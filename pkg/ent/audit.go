// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hello/pkg/ent/audit"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Audit is the model entity for the Audit schema.
type Audit struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Query holds the value of the "query" field.
	Query string `json:"query,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// Request holds the value of the "request" field.
	Request string `json:"request,omitempty"`
	// Response holds the value of the "response" field.
	Response string `json:"response,omitempty"`
	// Header holds the value of the "header" field.
	Header string `json:"header,omitempty"`
	// StatusCode holds the value of the "status_code" field.
	StatusCode int `json:"status_code,omitempty"`
	// RemoteIP holds the value of the "remote_ip" field.
	RemoteIP string `json:"remote_ip,omitempty"`
	// ClientIP holds the value of the "client_ip" field.
	ClientIP string `json:"client_ip,omitempty"`
	// CostTime holds the value of the "cost_time" field.
	CostTime string `json:"cost_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Audit) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case audit.FieldID, audit.FieldStatusCode:
			values[i] = new(sql.NullInt64)
		case audit.FieldURL, audit.FieldQuery, audit.FieldMethod, audit.FieldRequest, audit.FieldResponse, audit.FieldHeader, audit.FieldRemoteIP, audit.FieldClientIP, audit.FieldCostTime:
			values[i] = new(sql.NullString)
		case audit.FieldCreateTime, audit.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Audit", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Audit fields.
func (a *Audit) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case audit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case audit.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				a.CreateTime = value.Time
			}
		case audit.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				a.UpdateTime = value.Time
			}
		case audit.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				a.URL = value.String
			}
		case audit.FieldQuery:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field query", values[i])
			} else if value.Valid {
				a.Query = value.String
			}
		case audit.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				a.Method = value.String
			}
		case audit.FieldRequest:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request", values[i])
			} else if value.Valid {
				a.Request = value.String
			}
		case audit.FieldResponse:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response", values[i])
			} else if value.Valid {
				a.Response = value.String
			}
		case audit.FieldHeader:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field header", values[i])
			} else if value.Valid {
				a.Header = value.String
			}
		case audit.FieldStatusCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_code", values[i])
			} else if value.Valid {
				a.StatusCode = int(value.Int64)
			}
		case audit.FieldRemoteIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remote_ip", values[i])
			} else if value.Valid {
				a.RemoteIP = value.String
			}
		case audit.FieldClientIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_ip", values[i])
			} else if value.Valid {
				a.ClientIP = value.String
			}
		case audit.FieldCostTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cost_time", values[i])
			} else if value.Valid {
				a.CostTime = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Audit.
// Note that you need to call Audit.Unwrap() before calling this method if this Audit
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Audit) Update() *AuditUpdateOne {
	return (&AuditClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Audit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Audit) Unwrap() *Audit {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Audit is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Audit) String() string {
	var builder strings.Builder
	builder.WriteString("Audit(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(a.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(a.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", url=")
	builder.WriteString(a.URL)
	builder.WriteString(", query=")
	builder.WriteString(a.Query)
	builder.WriteString(", method=")
	builder.WriteString(a.Method)
	builder.WriteString(", request=")
	builder.WriteString(a.Request)
	builder.WriteString(", response=")
	builder.WriteString(a.Response)
	builder.WriteString(", header=")
	builder.WriteString(a.Header)
	builder.WriteString(", status_code=")
	builder.WriteString(fmt.Sprintf("%v", a.StatusCode))
	builder.WriteString(", remote_ip=")
	builder.WriteString(a.RemoteIP)
	builder.WriteString(", client_ip=")
	builder.WriteString(a.ClientIP)
	builder.WriteString(", cost_time=")
	builder.WriteString(a.CostTime)
	builder.WriteByte(')')
	return builder.String()
}

// Audits is a parsable slice of Audit.
type Audits []*Audit

func (a Audits) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
