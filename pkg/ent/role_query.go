// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"hello/pkg/ent/predicate"
	"hello/pkg/ent/resource"
	"hello/pkg/ent/role"
	"math"
	"reflect"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleQuery is the builder for querying Role entities.
type RoleQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.Role
	// eager-loading edges.
	withResources *ResourceQuery
	withFKs       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RoleQuery builder.
func (rq *RoleQuery) Where(ps ...predicate.Role) *RoleQuery {
	rq.predicates = append(rq.predicates, ps...)
	return rq
}

// Limit adds a limit step to the query.
func (rq *RoleQuery) Limit(limit int) *RoleQuery {
	rq.limit = &limit
	return rq
}

// Offset adds an offset step to the query.
func (rq *RoleQuery) Offset(offset int) *RoleQuery {
	rq.offset = &offset
	return rq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rq *RoleQuery) Unique(unique bool) *RoleQuery {
	rq.unique = &unique
	return rq
}

// Order adds an order step to the query.
func (rq *RoleQuery) Order(o ...OrderFunc) *RoleQuery {
	rq.order = append(rq.order, o...)
	return rq
}

// QueryResources chains the current query on the "resources" edge.
func (rq *RoleQuery) QueryResources() *ResourceQuery {
	query := &ResourceQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, selector),
			sqlgraph.To(resource.Table, resource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, role.ResourcesTable, role.ResourcesColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Role entity from the query.
// Returns a *NotFoundError when no Role was found.
func (rq *RoleQuery) First(ctx context.Context) (*Role, error) {
	nodes, err := rq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{role.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rq *RoleQuery) FirstX(ctx context.Context) *Role {
	node, err := rq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Role ID from the query.
// Returns a *NotFoundError when no Role ID was found.
func (rq *RoleQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{role.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rq *RoleQuery) FirstIDX(ctx context.Context) int {
	id, err := rq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Role entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Role entity is found.
// Returns a *NotFoundError when no Role entities are found.
func (rq *RoleQuery) Only(ctx context.Context) (*Role, error) {
	nodes, err := rq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{role.Label}
	default:
		return nil, &NotSingularError{role.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rq *RoleQuery) OnlyX(ctx context.Context) *Role {
	node, err := rq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Role ID in the query.
// Returns a *NotSingularError when more than one Role ID is found.
// Returns a *NotFoundError when no entities are found.
func (rq *RoleQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{role.Label}
	default:
		err = &NotSingularError{role.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rq *RoleQuery) OnlyIDX(ctx context.Context) int {
	id, err := rq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Roles.
func (rq *RoleQuery) All(ctx context.Context) ([]*Role, error) {
	if err := rq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rq *RoleQuery) AllX(ctx context.Context) []*Role {
	nodes, err := rq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Role IDs.
func (rq *RoleQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rq.Select(role.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rq *RoleQuery) IDsX(ctx context.Context) []int {
	ids, err := rq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rq *RoleQuery) Count(ctx context.Context) (int, error) {
	if err := rq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rq *RoleQuery) CountX(ctx context.Context) int {
	count, err := rq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rq *RoleQuery) Exist(ctx context.Context) (bool, error) {
	if err := rq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rq *RoleQuery) ExistX(ctx context.Context) bool {
	exist, err := rq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RoleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rq *RoleQuery) Clone() *RoleQuery {
	if rq == nil {
		return nil
	}
	return &RoleQuery{
		config:        rq.config,
		limit:         rq.limit,
		offset:        rq.offset,
		order:         append([]OrderFunc{}, rq.order...),
		predicates:    append([]predicate.Role{}, rq.predicates...),
		withResources: rq.withResources.Clone(),
		// clone intermediate query.
		sql:    rq.sql.Clone(),
		path:   rq.path,
		unique: rq.unique,
	}
}

// WithResources tells the query-builder to eager-load the nodes that are connected to
// the "resources" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RoleQuery) WithResources(opts ...func(*ResourceQuery)) *RoleQuery {
	query := &ResourceQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withResources = query
	return rq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Role.Query().
//		GroupBy(role.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (rq *RoleQuery) GroupBy(field string, fields ...string) *RoleGroupBy {
	group := &RoleGroupBy{config: rq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.Role.Query().
//		Select(role.FieldCreateTime).
//		Scan(ctx, &v)
//
func (rq *RoleQuery) Select(fields ...string) *RoleSelect {
	rq.fields = append(rq.fields, fields...)
	return &RoleSelect{RoleQuery: rq}
}

func (rq *RoleQuery) prepareQuery(ctx context.Context) error {
	for _, f := range rq.fields {
		if !role.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rq.path != nil {
		prev, err := rq.path(ctx)
		if err != nil {
			return err
		}
		rq.sql = prev
	}
	return nil
}

func (rq *RoleQuery) sqlAll(ctx context.Context) ([]*Role, error) {
	var (
		nodes       = []*Role{}
		withFKs     = rq.withFKs
		_spec       = rq.querySpec()
		loadedTypes = [1]bool{
			rq.withResources != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, role.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Role{config: rq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, rq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := rq.withResources; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Role)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Resources = []*Resource{}
		}
		query.withFKs = true
		query.Where(predicate.Resource(func(s *sql.Selector) {
			s.Where(sql.InValues(role.ResourcesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.role_resources
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "role_resources" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "role_resources" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Resources = append(node.Edges.Resources, n)
		}
	}

	return nodes, nil
}

func (rq *RoleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rq.querySpec()
	_spec.Node.Columns = rq.fields
	if len(rq.fields) > 0 {
		_spec.Unique = rq.unique != nil && *rq.unique
	}
	return sqlgraph.CountNodes(ctx, rq.driver, _spec)
}

func (rq *RoleQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (rq *RoleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   role.Table,
			Columns: role.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: role.FieldID,
			},
		},
		From:   rq.sql,
		Unique: true,
	}
	if unique := rq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := rq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, role.FieldID)
		for i := range fields {
			if fields[i] != role.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rq *RoleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rq.driver.Dialect())
	t1 := builder.Table(role.Table)
	columns := rq.fields
	if len(columns) == 0 {
		columns = role.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rq.sql != nil {
		selector = rq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rq.unique != nil && *rq.unique {
		selector.Distinct()
	}
	for _, p := range rq.predicates {
		p(selector)
	}
	for _, p := range rq.order {
		p(selector)
	}
	if offset := rq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

func (rq *RoleQuery) Queries(i interface{}) *RoleQuery {
	queryList, _ := SetRoleFormQueries(i)
	for _, v := range queryList {
		v.Query(rq)
	}
	return rq
}

func (rq *RoleQuery) ByQueriesAll(ctx context.Context, i interface{}) (res Roles, count int, err error) {
	queryList, countList := SetRoleFormQueries(i)
	countQ := rq.Clone()
	for _, v := range queryList {
		v.Query(rq)
	}
	for _, v := range countList {
		v.Query(countQ)
	}
	count, err = countQ.Count(ctx)
	if err != nil {
		return
	}
	res, err = rq.All(ctx)
	return
}

type RoleTableFormer interface {
	Query(q *RoleQuery)
	CountQuery() bool
}

type RoleTablePagingForm struct {
	Limit *int `json:"_limit" form:"_limit" `
	Page  *int `json:"_page" form:"_page"`
}

func (f RoleTablePagingForm) Query(q *RoleQuery) {
	if f.Limit != nil && f.Page != nil {
		q.Limit(*f.Limit).Offset((*f.Page - 1) * *f.Limit)
	}
}

func (f RoleTablePagingForm) CountQuery() bool {
	return false
}

type RoleTableOrderForm struct {
	Order  *string `json:"order" form:"_order" binding:"omitempty,oneof=acs desc"`
	SortBy *string `json:"sortBy" form:"_sortBy"`
}

func (f RoleTableOrderForm) Query(q *RoleQuery) {
	if f.Order != nil && f.SortBy != nil {
		if *f.Order == "acs" {
			q.Order(Asc(*f.SortBy))
		}

		if *f.Order == "desc" {
			q.Order(Desc(*f.SortBy))
		}
	}
}
func (f RoleTableOrderForm) CountQuery() bool {
	return false
}

func SetRoleFormQueries(o interface{}) ([]RoleTableFormer, []RoleTableFormer) {
	queryList := make([]RoleTableFormer, 0)
	countList := make([]RoleTableFormer, 0)
	v := reflect.ValueOf(o)
	former := reflect.TypeOf((*RoleTableFormer)(nil)).Elem()
	RoleFormDepValue(v, former, &queryList, &countList)
	return queryList, countList
}

func RoleFormDepValue(v reflect.Value, former reflect.Type, queryList *[]RoleTableFormer, countList *[]RoleTableFormer) {
	for i := 0; i < v.NumField(); i++ {
		f := v.Field(i)
		if f.IsZero() {
			continue
		}
		if f.Type().Implements(former) {
			former := f.Interface().(RoleTableFormer)
			*queryList = append(*queryList, former)
			if former.CountQuery() {
				*countList = append(*countList, former)
			}
			continue
		}
		if f.Type().Kind() == reflect.Struct {
			RoleFormDepValue(f, former, queryList, countList)
		}
	}
}

type RoleQueryOps struct {
}

type RoleTableCreateTimeEQForm struct {
	CreateTimeEQ *time.Time `form:"CreateTimeEQ" json:"CreateTimeEQ"`
}

func (f RoleTableCreateTimeEQForm) Query(q *RoleQuery) {
	if f.CreateTimeEQ != nil {
		q.Where(role.CreateTimeEQ(*f.CreateTimeEQ))
	}
}
func (f RoleTableCreateTimeEQForm) CountQuery() bool {
	return true
}

type RoleTableCreateTimeNEQForm struct {
	CreateTimeNEQ *time.Time `form:"CreateTimeNEQ" json:"CreateTimeNEQ"`
}

func (f RoleTableCreateTimeNEQForm) Query(q *RoleQuery) {
	if f.CreateTimeNEQ != nil {
		q.Where(role.CreateTimeNEQ(*f.CreateTimeNEQ))
	}
}
func (f RoleTableCreateTimeNEQForm) CountQuery() bool {
	return true
}

type RoleTableCreateTimeInForm struct {
	CreateTimeIn *[]time.Time `form:"CreateTimeIn" json:"CreateTimeIn"`
}

func (f RoleTableCreateTimeInForm) Query(q *RoleQuery) {
	if f.CreateTimeIn != nil {
		q.Where(role.CreateTimeIn(*f.CreateTimeIn...))
	}
}
func (f RoleTableCreateTimeInForm) CountQuery() bool {
	return true
}

type RoleTableCreateTimeNotInForm struct {
	CreateTimeNotIn *[]time.Time `form:"CreateTimeNotIn" json:"CreateTimeNotIn"`
}

func (f RoleTableCreateTimeNotInForm) Query(q *RoleQuery) {
	if f.CreateTimeNotIn != nil {
		q.Where(role.CreateTimeNotIn(*f.CreateTimeNotIn...))
	}
}
func (f RoleTableCreateTimeNotInForm) CountQuery() bool {
	return true
}

type RoleTableCreateTimeGTForm struct {
	CreateTimeGT *time.Time `form:"CreateTimeGT" json:"CreateTimeGT"`
}

func (f RoleTableCreateTimeGTForm) Query(q *RoleQuery) {
	if f.CreateTimeGT != nil {
		q.Where(role.CreateTimeGT(*f.CreateTimeGT))
	}
}
func (f RoleTableCreateTimeGTForm) CountQuery() bool {
	return true
}

type RoleTableCreateTimeGTEForm struct {
	CreateTimeGTE *time.Time `form:"CreateTimeGTE" json:"CreateTimeGTE"`
}

func (f RoleTableCreateTimeGTEForm) Query(q *RoleQuery) {
	if f.CreateTimeGTE != nil {
		q.Where(role.CreateTimeGTE(*f.CreateTimeGTE))
	}
}
func (f RoleTableCreateTimeGTEForm) CountQuery() bool {
	return true
}

type RoleTableCreateTimeLTForm struct {
	CreateTimeLT *time.Time `form:"CreateTimeLT" json:"CreateTimeLT"`
}

func (f RoleTableCreateTimeLTForm) Query(q *RoleQuery) {
	if f.CreateTimeLT != nil {
		q.Where(role.CreateTimeLT(*f.CreateTimeLT))
	}
}
func (f RoleTableCreateTimeLTForm) CountQuery() bool {
	return true
}

type RoleTableCreateTimeLTEForm struct {
	CreateTimeLTE *time.Time `form:"CreateTimeLTE" json:"CreateTimeLTE"`
}

func (f RoleTableCreateTimeLTEForm) Query(q *RoleQuery) {
	if f.CreateTimeLTE != nil {
		q.Where(role.CreateTimeLTE(*f.CreateTimeLTE))
	}
}
func (f RoleTableCreateTimeLTEForm) CountQuery() bool {
	return true
}

type RoleTableUpdateTimeEQForm struct {
	UpdateTimeEQ *time.Time `form:"UpdateTimeEQ" json:"UpdateTimeEQ"`
}

func (f RoleTableUpdateTimeEQForm) Query(q *RoleQuery) {
	if f.UpdateTimeEQ != nil {
		q.Where(role.UpdateTimeEQ(*f.UpdateTimeEQ))
	}
}
func (f RoleTableUpdateTimeEQForm) CountQuery() bool {
	return true
}

type RoleTableUpdateTimeNEQForm struct {
	UpdateTimeNEQ *time.Time `form:"UpdateTimeNEQ" json:"UpdateTimeNEQ"`
}

func (f RoleTableUpdateTimeNEQForm) Query(q *RoleQuery) {
	if f.UpdateTimeNEQ != nil {
		q.Where(role.UpdateTimeNEQ(*f.UpdateTimeNEQ))
	}
}
func (f RoleTableUpdateTimeNEQForm) CountQuery() bool {
	return true
}

type RoleTableUpdateTimeInForm struct {
	UpdateTimeIn *[]time.Time `form:"UpdateTimeIn" json:"UpdateTimeIn"`
}

func (f RoleTableUpdateTimeInForm) Query(q *RoleQuery) {
	if f.UpdateTimeIn != nil {
		q.Where(role.UpdateTimeIn(*f.UpdateTimeIn...))
	}
}
func (f RoleTableUpdateTimeInForm) CountQuery() bool {
	return true
}

type RoleTableUpdateTimeNotInForm struct {
	UpdateTimeNotIn *[]time.Time `form:"UpdateTimeNotIn" json:"UpdateTimeNotIn"`
}

func (f RoleTableUpdateTimeNotInForm) Query(q *RoleQuery) {
	if f.UpdateTimeNotIn != nil {
		q.Where(role.UpdateTimeNotIn(*f.UpdateTimeNotIn...))
	}
}
func (f RoleTableUpdateTimeNotInForm) CountQuery() bool {
	return true
}

type RoleTableUpdateTimeGTForm struct {
	UpdateTimeGT *time.Time `form:"UpdateTimeGT" json:"UpdateTimeGT"`
}

func (f RoleTableUpdateTimeGTForm) Query(q *RoleQuery) {
	if f.UpdateTimeGT != nil {
		q.Where(role.UpdateTimeGT(*f.UpdateTimeGT))
	}
}
func (f RoleTableUpdateTimeGTForm) CountQuery() bool {
	return true
}

type RoleTableUpdateTimeGTEForm struct {
	UpdateTimeGTE *time.Time `form:"UpdateTimeGTE" json:"UpdateTimeGTE"`
}

func (f RoleTableUpdateTimeGTEForm) Query(q *RoleQuery) {
	if f.UpdateTimeGTE != nil {
		q.Where(role.UpdateTimeGTE(*f.UpdateTimeGTE))
	}
}
func (f RoleTableUpdateTimeGTEForm) CountQuery() bool {
	return true
}

type RoleTableUpdateTimeLTForm struct {
	UpdateTimeLT *time.Time `form:"UpdateTimeLT" json:"UpdateTimeLT"`
}

func (f RoleTableUpdateTimeLTForm) Query(q *RoleQuery) {
	if f.UpdateTimeLT != nil {
		q.Where(role.UpdateTimeLT(*f.UpdateTimeLT))
	}
}
func (f RoleTableUpdateTimeLTForm) CountQuery() bool {
	return true
}

type RoleTableUpdateTimeLTEForm struct {
	UpdateTimeLTE *time.Time `form:"UpdateTimeLTE" json:"UpdateTimeLTE"`
}

func (f RoleTableUpdateTimeLTEForm) Query(q *RoleQuery) {
	if f.UpdateTimeLTE != nil {
		q.Where(role.UpdateTimeLTE(*f.UpdateTimeLTE))
	}
}
func (f RoleTableUpdateTimeLTEForm) CountQuery() bool {
	return true
}

type RoleTableNameEQForm struct {
	NameEQ *string `form:"NameEQ" json:"NameEQ"`
}

func (f RoleTableNameEQForm) Query(q *RoleQuery) {
	if f.NameEQ != nil {
		q.Where(role.NameEQ(*f.NameEQ))
	}
}
func (f RoleTableNameEQForm) CountQuery() bool {
	return true
}

type RoleTableNameNEQForm struct {
	NameNEQ *string `form:"NameNEQ" json:"NameNEQ"`
}

func (f RoleTableNameNEQForm) Query(q *RoleQuery) {
	if f.NameNEQ != nil {
		q.Where(role.NameNEQ(*f.NameNEQ))
	}
}
func (f RoleTableNameNEQForm) CountQuery() bool {
	return true
}

type RoleTableNameInForm struct {
	NameIn *[]string `form:"NameIn" json:"NameIn"`
}

func (f RoleTableNameInForm) Query(q *RoleQuery) {
	if f.NameIn != nil {
		q.Where(role.NameIn(*f.NameIn...))
	}
}
func (f RoleTableNameInForm) CountQuery() bool {
	return true
}

type RoleTableNameNotInForm struct {
	NameNotIn *[]string `form:"NameNotIn" json:"NameNotIn"`
}

func (f RoleTableNameNotInForm) Query(q *RoleQuery) {
	if f.NameNotIn != nil {
		q.Where(role.NameNotIn(*f.NameNotIn...))
	}
}
func (f RoleTableNameNotInForm) CountQuery() bool {
	return true
}

type RoleTableNameGTForm struct {
	NameGT *string `form:"NameGT" json:"NameGT"`
}

func (f RoleTableNameGTForm) Query(q *RoleQuery) {
	if f.NameGT != nil {
		q.Where(role.NameGT(*f.NameGT))
	}
}
func (f RoleTableNameGTForm) CountQuery() bool {
	return true
}

type RoleTableNameGTEForm struct {
	NameGTE *string `form:"NameGTE" json:"NameGTE"`
}

func (f RoleTableNameGTEForm) Query(q *RoleQuery) {
	if f.NameGTE != nil {
		q.Where(role.NameGTE(*f.NameGTE))
	}
}
func (f RoleTableNameGTEForm) CountQuery() bool {
	return true
}

type RoleTableNameLTForm struct {
	NameLT *string `form:"NameLT" json:"NameLT"`
}

func (f RoleTableNameLTForm) Query(q *RoleQuery) {
	if f.NameLT != nil {
		q.Where(role.NameLT(*f.NameLT))
	}
}
func (f RoleTableNameLTForm) CountQuery() bool {
	return true
}

type RoleTableNameLTEForm struct {
	NameLTE *string `form:"NameLTE" json:"NameLTE"`
}

func (f RoleTableNameLTEForm) Query(q *RoleQuery) {
	if f.NameLTE != nil {
		q.Where(role.NameLTE(*f.NameLTE))
	}
}
func (f RoleTableNameLTEForm) CountQuery() bool {
	return true
}

type RoleTableNameContainsForm struct {
	NameContains *string `form:"NameContains" json:"NameContains"`
}

func (f RoleTableNameContainsForm) Query(q *RoleQuery) {
	if f.NameContains != nil {
		q.Where(role.NameContains(*f.NameContains))
	}
}
func (f RoleTableNameContainsForm) CountQuery() bool {
	return true
}

type RoleTableNameHasPrefixForm struct {
	NameHasPrefix *string `form:"NameHasPrefix" json:"NameHasPrefix"`
}

func (f RoleTableNameHasPrefixForm) Query(q *RoleQuery) {
	if f.NameHasPrefix != nil {
		q.Where(role.NameHasPrefix(*f.NameHasPrefix))
	}
}
func (f RoleTableNameHasPrefixForm) CountQuery() bool {
	return true
}

type RoleTableNameHasSuffixForm struct {
	NameHasSuffix *string `form:"NameHasSuffix" json:"NameHasSuffix"`
}

func (f RoleTableNameHasSuffixForm) Query(q *RoleQuery) {
	if f.NameHasSuffix != nil {
		q.Where(role.NameHasSuffix(*f.NameHasSuffix))
	}
}
func (f RoleTableNameHasSuffixForm) CountQuery() bool {
	return true
}

type RoleTableNameEqualFoldForm struct {
	NameEqualFold *string `form:"NameEqualFold" json:"NameEqualFold"`
}

func (f RoleTableNameEqualFoldForm) Query(q *RoleQuery) {
	if f.NameEqualFold != nil {
		q.Where(role.NameEqualFold(*f.NameEqualFold))
	}
}
func (f RoleTableNameEqualFoldForm) CountQuery() bool {
	return true
}

type RoleTableNameContainsFoldForm struct {
	NameContainsFold *string `form:"NameContainsFold" json:"NameContainsFold"`
}

func (f RoleTableNameContainsFoldForm) Query(q *RoleQuery) {
	if f.NameContainsFold != nil {
		q.Where(role.NameContainsFold(*f.NameContainsFold))
	}
}
func (f RoleTableNameContainsFoldForm) CountQuery() bool {
	return true
}

type RoleTableLevelEQForm struct {
	LevelEQ *int `form:"LevelEQ" json:"LevelEQ"`
}

func (f RoleTableLevelEQForm) Query(q *RoleQuery) {
	if f.LevelEQ != nil {
		q.Where(role.LevelEQ(*f.LevelEQ))
	}
}
func (f RoleTableLevelEQForm) CountQuery() bool {
	return true
}

type RoleTableLevelNEQForm struct {
	LevelNEQ *int `form:"LevelNEQ" json:"LevelNEQ"`
}

func (f RoleTableLevelNEQForm) Query(q *RoleQuery) {
	if f.LevelNEQ != nil {
		q.Where(role.LevelNEQ(*f.LevelNEQ))
	}
}
func (f RoleTableLevelNEQForm) CountQuery() bool {
	return true
}

type RoleTableLevelInForm struct {
	LevelIn *[]int `form:"LevelIn" json:"LevelIn"`
}

func (f RoleTableLevelInForm) Query(q *RoleQuery) {
	if f.LevelIn != nil {
		q.Where(role.LevelIn(*f.LevelIn...))
	}
}
func (f RoleTableLevelInForm) CountQuery() bool {
	return true
}

type RoleTableLevelNotInForm struct {
	LevelNotIn *[]int `form:"LevelNotIn" json:"LevelNotIn"`
}

func (f RoleTableLevelNotInForm) Query(q *RoleQuery) {
	if f.LevelNotIn != nil {
		q.Where(role.LevelNotIn(*f.LevelNotIn...))
	}
}
func (f RoleTableLevelNotInForm) CountQuery() bool {
	return true
}

type RoleTableLevelGTForm struct {
	LevelGT *int `form:"LevelGT" json:"LevelGT"`
}

func (f RoleTableLevelGTForm) Query(q *RoleQuery) {
	if f.LevelGT != nil {
		q.Where(role.LevelGT(*f.LevelGT))
	}
}
func (f RoleTableLevelGTForm) CountQuery() bool {
	return true
}

type RoleTableLevelGTEForm struct {
	LevelGTE *int `form:"LevelGTE" json:"LevelGTE"`
}

func (f RoleTableLevelGTEForm) Query(q *RoleQuery) {
	if f.LevelGTE != nil {
		q.Where(role.LevelGTE(*f.LevelGTE))
	}
}
func (f RoleTableLevelGTEForm) CountQuery() bool {
	return true
}

type RoleTableLevelLTForm struct {
	LevelLT *int `form:"LevelLT" json:"LevelLT"`
}

func (f RoleTableLevelLTForm) Query(q *RoleQuery) {
	if f.LevelLT != nil {
		q.Where(role.LevelLT(*f.LevelLT))
	}
}
func (f RoleTableLevelLTForm) CountQuery() bool {
	return true
}

type RoleTableLevelLTEForm struct {
	LevelLTE *int `form:"LevelLTE" json:"LevelLTE"`
}

func (f RoleTableLevelLTEForm) Query(q *RoleQuery) {
	if f.LevelLTE != nil {
		q.Where(role.LevelLTE(*f.LevelLTE))
	}
}
func (f RoleTableLevelLTEForm) CountQuery() bool {
	return true
}

type RoleTableCommentsEQForm struct {
	CommentsEQ *string `form:"CommentsEQ" json:"CommentsEQ"`
}

func (f RoleTableCommentsEQForm) Query(q *RoleQuery) {
	if f.CommentsEQ != nil {
		q.Where(role.CommentsEQ(*f.CommentsEQ))
	}
}
func (f RoleTableCommentsEQForm) CountQuery() bool {
	return true
}

type RoleTableCommentsNEQForm struct {
	CommentsNEQ *string `form:"CommentsNEQ" json:"CommentsNEQ"`
}

func (f RoleTableCommentsNEQForm) Query(q *RoleQuery) {
	if f.CommentsNEQ != nil {
		q.Where(role.CommentsNEQ(*f.CommentsNEQ))
	}
}
func (f RoleTableCommentsNEQForm) CountQuery() bool {
	return true
}

type RoleTableCommentsInForm struct {
	CommentsIn *[]string `form:"CommentsIn" json:"CommentsIn"`
}

func (f RoleTableCommentsInForm) Query(q *RoleQuery) {
	if f.CommentsIn != nil {
		q.Where(role.CommentsIn(*f.CommentsIn...))
	}
}
func (f RoleTableCommentsInForm) CountQuery() bool {
	return true
}

type RoleTableCommentsNotInForm struct {
	CommentsNotIn *[]string `form:"CommentsNotIn" json:"CommentsNotIn"`
}

func (f RoleTableCommentsNotInForm) Query(q *RoleQuery) {
	if f.CommentsNotIn != nil {
		q.Where(role.CommentsNotIn(*f.CommentsNotIn...))
	}
}
func (f RoleTableCommentsNotInForm) CountQuery() bool {
	return true
}

type RoleTableCommentsGTForm struct {
	CommentsGT *string `form:"CommentsGT" json:"CommentsGT"`
}

func (f RoleTableCommentsGTForm) Query(q *RoleQuery) {
	if f.CommentsGT != nil {
		q.Where(role.CommentsGT(*f.CommentsGT))
	}
}
func (f RoleTableCommentsGTForm) CountQuery() bool {
	return true
}

type RoleTableCommentsGTEForm struct {
	CommentsGTE *string `form:"CommentsGTE" json:"CommentsGTE"`
}

func (f RoleTableCommentsGTEForm) Query(q *RoleQuery) {
	if f.CommentsGTE != nil {
		q.Where(role.CommentsGTE(*f.CommentsGTE))
	}
}
func (f RoleTableCommentsGTEForm) CountQuery() bool {
	return true
}

type RoleTableCommentsLTForm struct {
	CommentsLT *string `form:"CommentsLT" json:"CommentsLT"`
}

func (f RoleTableCommentsLTForm) Query(q *RoleQuery) {
	if f.CommentsLT != nil {
		q.Where(role.CommentsLT(*f.CommentsLT))
	}
}
func (f RoleTableCommentsLTForm) CountQuery() bool {
	return true
}

type RoleTableCommentsLTEForm struct {
	CommentsLTE *string `form:"CommentsLTE" json:"CommentsLTE"`
}

func (f RoleTableCommentsLTEForm) Query(q *RoleQuery) {
	if f.CommentsLTE != nil {
		q.Where(role.CommentsLTE(*f.CommentsLTE))
	}
}
func (f RoleTableCommentsLTEForm) CountQuery() bool {
	return true
}

type RoleTableCommentsContainsForm struct {
	CommentsContains *string `form:"CommentsContains" json:"CommentsContains"`
}

func (f RoleTableCommentsContainsForm) Query(q *RoleQuery) {
	if f.CommentsContains != nil {
		q.Where(role.CommentsContains(*f.CommentsContains))
	}
}
func (f RoleTableCommentsContainsForm) CountQuery() bool {
	return true
}

type RoleTableCommentsHasPrefixForm struct {
	CommentsHasPrefix *string `form:"CommentsHasPrefix" json:"CommentsHasPrefix"`
}

func (f RoleTableCommentsHasPrefixForm) Query(q *RoleQuery) {
	if f.CommentsHasPrefix != nil {
		q.Where(role.CommentsHasPrefix(*f.CommentsHasPrefix))
	}
}
func (f RoleTableCommentsHasPrefixForm) CountQuery() bool {
	return true
}

type RoleTableCommentsHasSuffixForm struct {
	CommentsHasSuffix *string `form:"CommentsHasSuffix" json:"CommentsHasSuffix"`
}

func (f RoleTableCommentsHasSuffixForm) Query(q *RoleQuery) {
	if f.CommentsHasSuffix != nil {
		q.Where(role.CommentsHasSuffix(*f.CommentsHasSuffix))
	}
}
func (f RoleTableCommentsHasSuffixForm) CountQuery() bool {
	return true
}

type RoleTableCommentsEqualFoldForm struct {
	CommentsEqualFold *string `form:"CommentsEqualFold" json:"CommentsEqualFold"`
}

func (f RoleTableCommentsEqualFoldForm) Query(q *RoleQuery) {
	if f.CommentsEqualFold != nil {
		q.Where(role.CommentsEqualFold(*f.CommentsEqualFold))
	}
}
func (f RoleTableCommentsEqualFoldForm) CountQuery() bool {
	return true
}

type RoleTableCommentsContainsFoldForm struct {
	CommentsContainsFold *string `form:"CommentsContainsFold" json:"CommentsContainsFold"`
}

func (f RoleTableCommentsContainsFoldForm) Query(q *RoleQuery) {
	if f.CommentsContainsFold != nil {
		q.Where(role.CommentsContainsFold(*f.CommentsContainsFold))
	}
}
func (f RoleTableCommentsContainsFoldForm) CountQuery() bool {
	return true
}

// RoleGroupBy is the group-by builder for Role entities.
type RoleGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rgb *RoleGroupBy) Aggregate(fns ...AggregateFunc) *RoleGroupBy {
	rgb.fns = append(rgb.fns, fns...)
	return rgb
}

// Scan applies the group-by query and scans the result into the given value.
func (rgb *RoleGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rgb.path(ctx)
	if err != nil {
		return err
	}
	rgb.sql = query
	return rgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rgb *RoleGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (rgb *RoleGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rgb.fields) > 1 {
		return nil, errors.New("ent: RoleGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rgb *RoleGroupBy) StringsX(ctx context.Context) []string {
	v, err := rgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rgb *RoleGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{role.Label}
	default:
		err = fmt.Errorf("ent: RoleGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rgb *RoleGroupBy) StringX(ctx context.Context) string {
	v, err := rgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (rgb *RoleGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rgb.fields) > 1 {
		return nil, errors.New("ent: RoleGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rgb *RoleGroupBy) IntsX(ctx context.Context) []int {
	v, err := rgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rgb *RoleGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{role.Label}
	default:
		err = fmt.Errorf("ent: RoleGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rgb *RoleGroupBy) IntX(ctx context.Context) int {
	v, err := rgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (rgb *RoleGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rgb.fields) > 1 {
		return nil, errors.New("ent: RoleGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rgb *RoleGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rgb *RoleGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{role.Label}
	default:
		err = fmt.Errorf("ent: RoleGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rgb *RoleGroupBy) Float64X(ctx context.Context) float64 {
	v, err := rgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (rgb *RoleGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rgb.fields) > 1 {
		return nil, errors.New("ent: RoleGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rgb *RoleGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rgb *RoleGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{role.Label}
	default:
		err = fmt.Errorf("ent: RoleGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rgb *RoleGroupBy) BoolX(ctx context.Context) bool {
	v, err := rgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rgb *RoleGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rgb.fields {
		if !role.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rgb *RoleGroupBy) sqlQuery() *sql.Selector {
	selector := rgb.sql.Select()
	aggregation := make([]string, 0, len(rgb.fns))
	for _, fn := range rgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(rgb.fields)+len(rgb.fns))
		for _, f := range rgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(rgb.fields...)...)
}

// RoleSelect is the builder for selecting fields of Role entities.
type RoleSelect struct {
	*RoleQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (rs *RoleSelect) Scan(ctx context.Context, v interface{}) error {
	if err := rs.prepareQuery(ctx); err != nil {
		return err
	}
	rs.sql = rs.RoleQuery.sqlQuery(ctx)
	return rs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rs *RoleSelect) ScanX(ctx context.Context, v interface{}) {
	if err := rs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (rs *RoleSelect) Strings(ctx context.Context) ([]string, error) {
	if len(rs.fields) > 1 {
		return nil, errors.New("ent: RoleSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := rs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rs *RoleSelect) StringsX(ctx context.Context) []string {
	v, err := rs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (rs *RoleSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{role.Label}
	default:
		err = fmt.Errorf("ent: RoleSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rs *RoleSelect) StringX(ctx context.Context) string {
	v, err := rs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (rs *RoleSelect) Ints(ctx context.Context) ([]int, error) {
	if len(rs.fields) > 1 {
		return nil, errors.New("ent: RoleSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := rs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rs *RoleSelect) IntsX(ctx context.Context) []int {
	v, err := rs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (rs *RoleSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{role.Label}
	default:
		err = fmt.Errorf("ent: RoleSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rs *RoleSelect) IntX(ctx context.Context) int {
	v, err := rs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (rs *RoleSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(rs.fields) > 1 {
		return nil, errors.New("ent: RoleSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := rs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rs *RoleSelect) Float64sX(ctx context.Context) []float64 {
	v, err := rs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (rs *RoleSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{role.Label}
	default:
		err = fmt.Errorf("ent: RoleSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rs *RoleSelect) Float64X(ctx context.Context) float64 {
	v, err := rs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (rs *RoleSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(rs.fields) > 1 {
		return nil, errors.New("ent: RoleSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := rs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rs *RoleSelect) BoolsX(ctx context.Context) []bool {
	v, err := rs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (rs *RoleSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{role.Label}
	default:
		err = fmt.Errorf("ent: RoleSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rs *RoleSelect) BoolX(ctx context.Context) bool {
	v, err := rs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rs *RoleSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := rs.sql.Query()
	if err := rs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
