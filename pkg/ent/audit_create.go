// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hello/pkg/ent/audit"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuditCreate is the builder for creating a Audit entity.
type AuditCreate struct {
	config
	mutation *AuditMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ac *AuditCreate) SetCreateTime(t time.Time) *AuditCreate {
	ac.mutation.SetCreateTime(t)
	return ac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ac *AuditCreate) SetNillableCreateTime(t *time.Time) *AuditCreate {
	if t != nil {
		ac.SetCreateTime(*t)
	}
	return ac
}

// SetUpdateTime sets the "update_time" field.
func (ac *AuditCreate) SetUpdateTime(t time.Time) *AuditCreate {
	ac.mutation.SetUpdateTime(t)
	return ac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ac *AuditCreate) SetNillableUpdateTime(t *time.Time) *AuditCreate {
	if t != nil {
		ac.SetUpdateTime(*t)
	}
	return ac
}

// SetURL sets the "url" field.
func (ac *AuditCreate) SetURL(s string) *AuditCreate {
	ac.mutation.SetURL(s)
	return ac
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (ac *AuditCreate) SetNillableURL(s *string) *AuditCreate {
	if s != nil {
		ac.SetURL(*s)
	}
	return ac
}

// SetQuery sets the "query" field.
func (ac *AuditCreate) SetQuery(s string) *AuditCreate {
	ac.mutation.SetQuery(s)
	return ac
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (ac *AuditCreate) SetNillableQuery(s *string) *AuditCreate {
	if s != nil {
		ac.SetQuery(*s)
	}
	return ac
}

// SetMethod sets the "method" field.
func (ac *AuditCreate) SetMethod(s string) *AuditCreate {
	ac.mutation.SetMethod(s)
	return ac
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (ac *AuditCreate) SetNillableMethod(s *string) *AuditCreate {
	if s != nil {
		ac.SetMethod(*s)
	}
	return ac
}

// SetRequest sets the "request" field.
func (ac *AuditCreate) SetRequest(s string) *AuditCreate {
	ac.mutation.SetRequest(s)
	return ac
}

// SetNillableRequest sets the "request" field if the given value is not nil.
func (ac *AuditCreate) SetNillableRequest(s *string) *AuditCreate {
	if s != nil {
		ac.SetRequest(*s)
	}
	return ac
}

// SetResponse sets the "response" field.
func (ac *AuditCreate) SetResponse(s string) *AuditCreate {
	ac.mutation.SetResponse(s)
	return ac
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (ac *AuditCreate) SetNillableResponse(s *string) *AuditCreate {
	if s != nil {
		ac.SetResponse(*s)
	}
	return ac
}

// SetHeader sets the "header" field.
func (ac *AuditCreate) SetHeader(s string) *AuditCreate {
	ac.mutation.SetHeader(s)
	return ac
}

// SetNillableHeader sets the "header" field if the given value is not nil.
func (ac *AuditCreate) SetNillableHeader(s *string) *AuditCreate {
	if s != nil {
		ac.SetHeader(*s)
	}
	return ac
}

// SetStatusCode sets the "status_code" field.
func (ac *AuditCreate) SetStatusCode(i int) *AuditCreate {
	ac.mutation.SetStatusCode(i)
	return ac
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (ac *AuditCreate) SetNillableStatusCode(i *int) *AuditCreate {
	if i != nil {
		ac.SetStatusCode(*i)
	}
	return ac
}

// SetRemoteIP sets the "remote_ip" field.
func (ac *AuditCreate) SetRemoteIP(s string) *AuditCreate {
	ac.mutation.SetRemoteIP(s)
	return ac
}

// SetNillableRemoteIP sets the "remote_ip" field if the given value is not nil.
func (ac *AuditCreate) SetNillableRemoteIP(s *string) *AuditCreate {
	if s != nil {
		ac.SetRemoteIP(*s)
	}
	return ac
}

// SetClientIP sets the "client_ip" field.
func (ac *AuditCreate) SetClientIP(s string) *AuditCreate {
	ac.mutation.SetClientIP(s)
	return ac
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (ac *AuditCreate) SetNillableClientIP(s *string) *AuditCreate {
	if s != nil {
		ac.SetClientIP(*s)
	}
	return ac
}

// SetCostTime sets the "cost_time" field.
func (ac *AuditCreate) SetCostTime(s string) *AuditCreate {
	ac.mutation.SetCostTime(s)
	return ac
}

// SetNillableCostTime sets the "cost_time" field if the given value is not nil.
func (ac *AuditCreate) SetNillableCostTime(s *string) *AuditCreate {
	if s != nil {
		ac.SetCostTime(*s)
	}
	return ac
}

// Mutation returns the AuditMutation object of the builder.
func (ac *AuditCreate) Mutation() *AuditMutation {
	return ac.mutation
}

// Save creates the Audit in the database.
func (ac *AuditCreate) Save(ctx context.Context) (*Audit, error) {
	var (
		err  error
		node *Audit
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuditMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AuditCreate) SaveX(ctx context.Context) *Audit {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AuditCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AuditCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AuditCreate) defaults() {
	if _, ok := ac.mutation.CreateTime(); !ok {
		v := audit.DefaultCreateTime()
		ac.mutation.SetCreateTime(v)
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		v := audit.DefaultUpdateTime()
		ac.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AuditCreate) check() error {
	if _, ok := ac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Audit.create_time"`)}
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Audit.update_time"`)}
	}
	return nil
}

func (ac *AuditCreate) sqlSave(ctx context.Context) (*Audit, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *AuditCreate) createSpec() (*Audit, *sqlgraph.CreateSpec) {
	var (
		_node = &Audit{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: audit.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: audit.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: audit.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ac.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: audit.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := ac.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldURL,
		})
		_node.URL = value
	}
	if value, ok := ac.mutation.Query(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldQuery,
		})
		_node.Query = value
	}
	if value, ok := ac.mutation.Method(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldMethod,
		})
		_node.Method = value
	}
	if value, ok := ac.mutation.Request(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldRequest,
		})
		_node.Request = value
	}
	if value, ok := ac.mutation.Response(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldResponse,
		})
		_node.Response = value
	}
	if value, ok := ac.mutation.Header(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldHeader,
		})
		_node.Header = value
	}
	if value, ok := ac.mutation.StatusCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: audit.FieldStatusCode,
		})
		_node.StatusCode = value
	}
	if value, ok := ac.mutation.RemoteIP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldRemoteIP,
		})
		_node.RemoteIP = value
	}
	if value, ok := ac.mutation.ClientIP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldClientIP,
		})
		_node.ClientIP = value
	}
	if value, ok := ac.mutation.CostTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: audit.FieldCostTime,
		})
		_node.CostTime = value
	}
	return _node, _spec
}

// AuditCreateBulk is the builder for creating many Audit entities in bulk.
type AuditCreateBulk struct {
	config
	builders []*AuditCreate
}

// Save creates the Audit entities in the database.
func (acb *AuditCreateBulk) Save(ctx context.Context) ([]*Audit, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Audit, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuditMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AuditCreateBulk) SaveX(ctx context.Context) []*Audit {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AuditCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AuditCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
