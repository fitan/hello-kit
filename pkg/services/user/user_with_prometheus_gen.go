package user

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"hello/pkg/ent"
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// UserServiceWithPrometheus implements UserService interface with all methods wrapped
// with Prometheus metrics
type UserServiceWithPrometheus struct {
	base         UserService
	instanceName string
}

var userserviceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "userservice_duration_seconds",
		Help:       "userservice runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"})

// NewUserServiceWithPrometheus returns an instance of the UserService decorated with prometheus summary metric
func NewUserServiceWithPrometheus(base UserService, instanceName string) UserServiceWithPrometheus {
	return UserServiceWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// GetById implements UserService
func (_d UserServiceWithPrometheus) GetById(ctx context.Context, req GetByIdReq) (up1 *ent.User, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetById(ctx, req)
}

// GetList implements UserService
func (_d UserServiceWithPrometheus) GetList(ctx context.Context, req GetListReq) (upa1 []*ent.User, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetList", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetList(ctx, req)
}
