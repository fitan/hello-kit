package user

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"

	"hello/pkg/ent"
)

// UserServiceWithPrometheus implements UserService interface with all methods wrapped
// with Prometheus metrics
type UserServiceWithPrometheus struct {
	base         UserService
	instanceName string
}

var userserviceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "services_user_duration_seconds",
		Help:       "userservice runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"})

// NewUserServiceWithPrometheus returns an instance of the UserService decorated with prometheus summary metric
func NewUserServiceWithPrometheus(base UserService) UserServiceWithPrometheus {
	return UserServiceWithPrometheus{
		base:         base,
		instanceName: "userservice",
	}
}

// UserRestByQueriesAll implements UserService
func (_d UserServiceWithPrometheus) UserRestByQueriesAll(ctx context.Context, req ent.UserRestByQueriesAllReq) (res ent.UserRestByQueriesAllRes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "UserRestByQueriesAll", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UserRestByQueriesAll(ctx, req)
}

// UserRestCreate implements UserService
func (_d UserServiceWithPrometheus) UserRestCreate(ctx context.Context, req ent.UserRestCreateReq) (res *ent.User, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "UserRestCreate", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UserRestCreate(ctx, req)
}

// UserRestCreateMany implements UserService
func (_d UserServiceWithPrometheus) UserRestCreateMany(ctx context.Context, req ent.UserRestCreateManyReq) (res ent.Users, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "UserRestCreateMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UserRestCreateMany(ctx, req)
}

// UserRestDeleteById implements UserService
func (_d UserServiceWithPrometheus) UserRestDeleteById(ctx context.Context, req ent.UserRestDeleteByIdReq) (success bool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "UserRestDeleteById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UserRestDeleteById(ctx, req)
}

// UserRestDeleteMany implements UserService
func (_d UserServiceWithPrometheus) UserRestDeleteMany(ctx context.Context, req ent.UserRestDeleteManyReq) (success bool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "UserRestDeleteMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UserRestDeleteMany(ctx, req)
}

// UserRestGetById implements UserService
func (_d UserServiceWithPrometheus) UserRestGetById(ctx context.Context, req ent.UserRestGetByIdReq) (res ent.UserBaseGetRes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "UserRestGetById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UserRestGetById(ctx, req)
}

// UserRestUpdateById implements UserService
func (_d UserServiceWithPrometheus) UserRestUpdateById(ctx context.Context, req ent.UserRestUpdateByIdReq) (res *ent.User, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "UserRestUpdateById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UserRestUpdateById(ctx, req)
}

// UserRestUpdateMany implements UserService
func (_d UserServiceWithPrometheus) UserRestUpdateMany(ctx context.Context, req ent.UserRestUpdateManyReq) (success bool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "UserRestUpdateMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UserRestUpdateMany(ctx, req)
}
