package user

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"

	"go.opentelemetry.io/otel/trace"

	endpoint "github.com/go-kit/kit/endpoint"

	"hello/pkg/ent"
)

const (
	UserRestAddBindRolesByUserIdMethodName = "UserRestAddBindRolesByUserId"

	UserRestByQueriesAllMethodName = "UserRestByQueriesAll"

	UserRestCreateMethodName = "UserRestCreate"

	UserRestCreateManyMethodName = "UserRestCreateMany"

	UserRestCreateRolesByUserIdMethodName = "UserRestCreateRolesByUserId"

	UserRestDeleteByIdMethodName = "UserRestDeleteById"

	UserRestDeleteManyMethodName = "UserRestDeleteMany"

	UserRestDeleteRolesByUserIdMethodName = "UserRestDeleteRolesByUserId"

	UserRestGetByIdMethodName = "UserRestGetById"

	UserRestGetRolesByUserIdMethodName = "UserRestGetRolesByUserId"

	UserRestRemoveBindRolesByUserIdMethodName = "UserRestRemoveBindRolesByUserId"

	UserRestUpdateBindRolesByUserIdMethodName = "UserRestUpdateBindRolesByUserId"

	UserRestUpdateByIdMethodName = "UserRestUpdateById"

	UserRestUpdateManyMethodName = "UserRestUpdateMany"
)

type Mws map[string][]endpoint.Middleware

type Endpoints struct {
	UserRestAddBindRolesByUserIdEndpoint endpoint.Endpoint

	UserRestByQueriesAllEndpoint endpoint.Endpoint

	UserRestCreateEndpoint endpoint.Endpoint

	UserRestCreateManyEndpoint endpoint.Endpoint

	UserRestCreateRolesByUserIdEndpoint endpoint.Endpoint

	UserRestDeleteByIdEndpoint endpoint.Endpoint

	UserRestDeleteManyEndpoint endpoint.Endpoint

	UserRestDeleteRolesByUserIdEndpoint endpoint.Endpoint

	UserRestGetByIdEndpoint endpoint.Endpoint

	UserRestGetRolesByUserIdEndpoint endpoint.Endpoint

	UserRestRemoveBindRolesByUserIdEndpoint endpoint.Endpoint

	UserRestUpdateBindRolesByUserIdEndpoint endpoint.Endpoint

	UserRestUpdateByIdEndpoint endpoint.Endpoint

	UserRestUpdateManyEndpoint endpoint.Endpoint
}

func AddEndpointMiddlewareToAllMethods(mw map[string][]endpoint.Middleware, m endpoint.Middleware) {
	methods := []string{

		UserRestAddBindRolesByUserIdMethodName,

		UserRestByQueriesAllMethodName,

		UserRestCreateMethodName,

		UserRestCreateManyMethodName,

		UserRestCreateRolesByUserIdMethodName,

		UserRestDeleteByIdMethodName,

		UserRestDeleteManyMethodName,

		UserRestDeleteRolesByUserIdMethodName,

		UserRestGetByIdMethodName,

		UserRestGetRolesByUserIdMethodName,

		UserRestRemoveBindRolesByUserIdMethodName,

		UserRestUpdateBindRolesByUserIdMethodName,

		UserRestUpdateByIdMethodName,

		UserRestUpdateManyMethodName,
	}
	for _, v := range methods {
		mw[v] = append(mw[v], m)
	}
}

func AddEndpointMiddlewareToAllMethodsWithMethodName(mw map[string][]endpoint.Middleware, m func(n string) endpoint.Middleware) {
	methods := []string{

		UserRestAddBindRolesByUserIdMethodName,

		UserRestByQueriesAllMethodName,

		UserRestCreateMethodName,

		UserRestCreateManyMethodName,

		UserRestCreateRolesByUserIdMethodName,

		UserRestDeleteByIdMethodName,

		UserRestDeleteManyMethodName,

		UserRestDeleteRolesByUserIdMethodName,

		UserRestGetByIdMethodName,

		UserRestGetRolesByUserIdMethodName,

		UserRestRemoveBindRolesByUserIdMethodName,

		UserRestUpdateBindRolesByUserIdMethodName,

		UserRestUpdateByIdMethodName,

		UserRestUpdateManyMethodName,
	}
	for _, v := range methods {
		mw[v] = append(mw[v], m(v))
	}
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func NewEndpoints(s UserService, mdw Mws) Endpoints {
	eps := Endpoints{

		UserRestAddBindRolesByUserIdEndpoint: MakeUserRestAddBindRolesByUserIdEndpoint(s),

		UserRestByQueriesAllEndpoint: MakeUserRestByQueriesAllEndpoint(s),

		UserRestCreateEndpoint: MakeUserRestCreateEndpoint(s),

		UserRestCreateManyEndpoint: MakeUserRestCreateManyEndpoint(s),

		UserRestCreateRolesByUserIdEndpoint: MakeUserRestCreateRolesByUserIdEndpoint(s),

		UserRestDeleteByIdEndpoint: MakeUserRestDeleteByIdEndpoint(s),

		UserRestDeleteManyEndpoint: MakeUserRestDeleteManyEndpoint(s),

		UserRestDeleteRolesByUserIdEndpoint: MakeUserRestDeleteRolesByUserIdEndpoint(s),

		UserRestGetByIdEndpoint: MakeUserRestGetByIdEndpoint(s),

		UserRestGetRolesByUserIdEndpoint: MakeUserRestGetRolesByUserIdEndpoint(s),

		UserRestRemoveBindRolesByUserIdEndpoint: MakeUserRestRemoveBindRolesByUserIdEndpoint(s),

		UserRestUpdateBindRolesByUserIdEndpoint: MakeUserRestUpdateBindRolesByUserIdEndpoint(s),

		UserRestUpdateByIdEndpoint: MakeUserRestUpdateByIdEndpoint(s),

		UserRestUpdateManyEndpoint: MakeUserRestUpdateManyEndpoint(s),
	}

	for _, m := range mdw[UserRestAddBindRolesByUserIdMethodName] {
		eps.UserRestAddBindRolesByUserIdEndpoint = m(eps.UserRestAddBindRolesByUserIdEndpoint)
	}

	for _, m := range mdw[UserRestByQueriesAllMethodName] {
		eps.UserRestByQueriesAllEndpoint = m(eps.UserRestByQueriesAllEndpoint)
	}

	for _, m := range mdw[UserRestCreateMethodName] {
		eps.UserRestCreateEndpoint = m(eps.UserRestCreateEndpoint)
	}

	for _, m := range mdw[UserRestCreateManyMethodName] {
		eps.UserRestCreateManyEndpoint = m(eps.UserRestCreateManyEndpoint)
	}

	for _, m := range mdw[UserRestCreateRolesByUserIdMethodName] {
		eps.UserRestCreateRolesByUserIdEndpoint = m(eps.UserRestCreateRolesByUserIdEndpoint)
	}

	for _, m := range mdw[UserRestDeleteByIdMethodName] {
		eps.UserRestDeleteByIdEndpoint = m(eps.UserRestDeleteByIdEndpoint)
	}

	for _, m := range mdw[UserRestDeleteManyMethodName] {
		eps.UserRestDeleteManyEndpoint = m(eps.UserRestDeleteManyEndpoint)
	}

	for _, m := range mdw[UserRestDeleteRolesByUserIdMethodName] {
		eps.UserRestDeleteRolesByUserIdEndpoint = m(eps.UserRestDeleteRolesByUserIdEndpoint)
	}

	for _, m := range mdw[UserRestGetByIdMethodName] {
		eps.UserRestGetByIdEndpoint = m(eps.UserRestGetByIdEndpoint)
	}

	for _, m := range mdw[UserRestGetRolesByUserIdMethodName] {
		eps.UserRestGetRolesByUserIdEndpoint = m(eps.UserRestGetRolesByUserIdEndpoint)
	}

	for _, m := range mdw[UserRestRemoveBindRolesByUserIdMethodName] {
		eps.UserRestRemoveBindRolesByUserIdEndpoint = m(eps.UserRestRemoveBindRolesByUserIdEndpoint)
	}

	for _, m := range mdw[UserRestUpdateBindRolesByUserIdMethodName] {
		eps.UserRestUpdateBindRolesByUserIdEndpoint = m(eps.UserRestUpdateBindRolesByUserIdEndpoint)
	}

	for _, m := range mdw[UserRestUpdateByIdMethodName] {
		eps.UserRestUpdateByIdEndpoint = m(eps.UserRestUpdateByIdEndpoint)
	}

	for _, m := range mdw[UserRestUpdateManyMethodName] {
		eps.UserRestUpdateManyEndpoint = m(eps.UserRestUpdateManyEndpoint)
	}

	return eps
}

func MakeUserRestAddBindRolesByUserIdEndpoint(s UserService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.UserRestAddBindRolesByUserIdReq)
		rs, err := s.UserRestAddBindRolesByUserId(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeUserRestByQueriesAllEndpoint(s UserService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.UserRestByQueriesAllReq)
		rs, err := s.UserRestByQueriesAll(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeUserRestCreateEndpoint(s UserService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.UserRestCreateReq)
		rs, err := s.UserRestCreate(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeUserRestCreateManyEndpoint(s UserService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.UserRestCreateManyReq)
		rs, err := s.UserRestCreateMany(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeUserRestCreateRolesByUserIdEndpoint(s UserService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.UserRestCreateRolesByUserIdReq)
		rs, err := s.UserRestCreateRolesByUserId(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeUserRestDeleteByIdEndpoint(s UserService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.UserRestDeleteByIdReq)
		rs, err := s.UserRestDeleteById(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeUserRestDeleteManyEndpoint(s UserService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.UserRestDeleteManyReq)
		rs, err := s.UserRestDeleteMany(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeUserRestDeleteRolesByUserIdEndpoint(s UserService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.UserRestDeleteRolesByUserIdReq)
		rs, err := s.UserRestDeleteRolesByUserId(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeUserRestGetByIdEndpoint(s UserService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.UserRestGetByIdReq)
		rs, err := s.UserRestGetById(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeUserRestGetRolesByUserIdEndpoint(s UserService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.UserRestGetRolesByUserIdReq)
		rs, err := s.UserRestGetRolesByUserId(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeUserRestRemoveBindRolesByUserIdEndpoint(s UserService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.UserRestRemoveBindRolesByUserIdReq)
		rs, err := s.UserRestRemoveBindRolesByUserId(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeUserRestUpdateBindRolesByUserIdEndpoint(s UserService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.UserRestUpdateBindRolesByUserIdReq)
		rs, err := s.UserRestUpdateBindRolesByUserId(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeUserRestUpdateByIdEndpoint(s UserService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.UserRestUpdateByIdReq)
		rs, err := s.UserRestUpdateById(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeUserRestUpdateManyEndpoint(s UserService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.UserRestUpdateManyReq)
		rs, err := s.UserRestUpdateMany(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}
