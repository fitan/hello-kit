package user

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"hello/pkg/ent"
	"hello/utils/log"

	"go.uber.org/zap"
)

// UserServiceWithLog implements UserService that is instrumented with logging
type UserServiceWithLog struct {
	_log  *zap.SugaredLogger
	_base UserService
}

// NewUserServiceWithLog instruments an implementation of the UserService with simple logging
func NewUserServiceWithLog(base UserService, log *zap.SugaredLogger) UserServiceWithLog {
	return UserServiceWithLog{
		_base: base,
		_log:  log,
	}
}

// GetById implements UserService
func (_d UserServiceWithLog) GetById(ctx context.Context, req GetByIdReq) (up1 *ent.User, err error) {

	_log := _d._log.With(log.TraceId(ctx))

	defer func() {
		_log.Debugw("UserServiceWithLog calling GetById", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"up1": up1,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"up1": up1,
				"err": err})
		}

	}()
	return _d._base.GetById(ctx, req)
}

// GetList implements UserService
func (_d UserServiceWithLog) GetList(ctx context.Context, req GetListReq) (upa1 []*ent.User, err error) {

	_log := _d._log.With(log.TraceId(ctx))

	defer func() {
		_log.Debugw("UserServiceWithLog calling GetList", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"upa1": upa1,
			"err":  err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"upa1": upa1,
				"err":  err})
		}

	}()
	return _d._base.GetList(ctx, req)
}
