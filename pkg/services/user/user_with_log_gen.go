package user

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"

	ginkHttp "github.com/fitan/gink/transport/http"
	"go.opentelemetry.io/otel/trace"
	"go.uber.org/zap"

	"hello/pkg/ent"
)

// UserServiceWithLog implements UserService that is instrumented with logging
type UserServiceWithLog struct {
	_log  *zap.SugaredLogger
	_base UserService
}

// NewUserServiceWithLog instruments an implementation of the UserService with simple logging
func NewUserServiceWithLog(base UserService, log *zap.SugaredLogger) UserServiceWithLog {
	return UserServiceWithLog{
		_base: base,
		_log:  log,
	}
}

// UserRestByQueriesAll implements UserService
func (_d UserServiceWithLog) UserRestByQueriesAll(ctx context.Context, req ent.UserRestByQueriesAllReq) (res ent.UserRestByQueriesAllRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling UserRestByQueriesAll", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": err})
			}

			if err != nil {
				_log.Errorw("with_log calling UserRestByQueriesAll", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": err})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling UserRestByQueriesAll", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling UserRestByQueriesAll", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}
	}()
	return _d._base.UserRestByQueriesAll(ctx, req)
}

// UserRestCreate implements UserService
func (_d UserServiceWithLog) UserRestCreate(ctx context.Context, req ent.UserRestCreateReq) (res *ent.User, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling UserRestCreate", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": err})
			}

			if err != nil {
				_log.Errorw("with_log calling UserRestCreate", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": err})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling UserRestCreate", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling UserRestCreate", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}
	}()
	return _d._base.UserRestCreate(ctx, req)
}

// UserRestCreateMany implements UserService
func (_d UserServiceWithLog) UserRestCreateMany(ctx context.Context, req ent.UserRestCreateManyReq) (res ent.Users, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling UserRestCreateMany", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": err})
			}

			if err != nil {
				_log.Errorw("with_log calling UserRestCreateMany", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": err})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling UserRestCreateMany", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling UserRestCreateMany", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}
	}()
	return _d._base.UserRestCreateMany(ctx, req)
}

// UserRestDeleteById implements UserService
func (_d UserServiceWithLog) UserRestDeleteById(ctx context.Context, req ent.UserRestDeleteByIdReq) (success bool, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling UserRestDeleteById", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"success": success,
					"err":     err})
			}

			if err != nil {
				_log.Errorw("with_log calling UserRestDeleteById", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"success": success,
					"err":     err})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling UserRestDeleteById", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     err})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling UserRestDeleteById", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     err})
		}
	}()
	return _d._base.UserRestDeleteById(ctx, req)
}

// UserRestDeleteMany implements UserService
func (_d UserServiceWithLog) UserRestDeleteMany(ctx context.Context, req ent.UserRestDeleteManyReq) (success bool, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling UserRestDeleteMany", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"success": success,
					"err":     err})
			}

			if err != nil {
				_log.Errorw("with_log calling UserRestDeleteMany", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"success": success,
					"err":     err})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling UserRestDeleteMany", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     err})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling UserRestDeleteMany", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     err})
		}
	}()
	return _d._base.UserRestDeleteMany(ctx, req)
}

// UserRestGetById implements UserService
func (_d UserServiceWithLog) UserRestGetById(ctx context.Context, req ent.UserRestGetByIdReq) (res ent.UserBaseGetRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling UserRestGetById", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": err})
			}

			if err != nil {
				_log.Errorw("with_log calling UserRestGetById", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": err})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling UserRestGetById", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling UserRestGetById", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}
	}()
	return _d._base.UserRestGetById(ctx, req)
}

// UserRestUpdateById implements UserService
func (_d UserServiceWithLog) UserRestUpdateById(ctx context.Context, req ent.UserRestUpdateByIdReq) (res *ent.User, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling UserRestUpdateById", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": err})
			}

			if err != nil {
				_log.Errorw("with_log calling UserRestUpdateById", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": err})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling UserRestUpdateById", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling UserRestUpdateById", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}
	}()
	return _d._base.UserRestUpdateById(ctx, req)
}

// UserRestUpdateMany implements UserService
func (_d UserServiceWithLog) UserRestUpdateMany(ctx context.Context, req ent.UserRestUpdateManyReq) (success bool, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling UserRestUpdateMany", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"success": success,
					"err":     err})
			}

			if err != nil {
				_log.Errorw("with_log calling UserRestUpdateMany", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"success": success,
					"err":     err})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling UserRestUpdateMany", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     err})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling UserRestUpdateMany", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     err})
		}
	}()
	return _d._base.UserRestUpdateMany(ctx, req)
}
