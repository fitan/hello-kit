package user

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"

	"github.com/fitan/gink/transport/http"
	"github.com/gin-gonic/gin"
)

type Ops map[string][]http.ServerOption

func AddHttpOptionToAllMethods(options map[string][]http.ServerOption, option http.ServerOption) {
	methods := []string{

		"GetById",

		"GetList",
	}
	for _, v := range methods {
		options[v] = append(options[v], option)
	}
}

type HttpHandler struct {
}

func NewHTTPHandler(r *gin.Engine, endpoints Endpoints, options Ops) HttpHandler {

	makeGetByIdHandler(r, endpoints, options["GetById"])

	makeGetListHandler(r, endpoints, options["GetList"])

	return HttpHandler{}
}

func makeGetByIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.GET("/user/:id", http.NewServer(endpoints.GetByIdEndpoint, decodeGetByIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeGetByIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req GetByIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

func makeGetListHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.GET("/user", http.NewServer(endpoints.GetListEndpoint, decodeGetListRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeGetListRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req GetListReq
	var err error

	err = ctx.ShouldBindQuery(&req.Query)
	if err != nil {
		return nil, err
	}

	return req, err
}
