package pod

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"

	"github.com/fitan/gink/transport/http"
	"github.com/gin-gonic/gin"

	"hello/pkg/ent"
)

type Ops map[string][]http.ServerOption

func AddHttpOptionToAllMethods(options map[string][]http.ServerOption, option http.ServerOption) {
	methods := []string{

		"ByQueries",

		"Create",

		"CreateMany",

		"CreateServicetreeByPodId",

		"DeleteById",

		"DeleteMany",

		"GetById",

		"GetServicetreeByPodId",

		"UpdateById",

		"UpdateMany",
	}
	for _, v := range methods {
		options[v] = append(options[v], option)
	}
}

type HttpHandler struct {
}

func NewHTTPHandler(r *gin.Engine, endpoints Endpoints, options Ops) HttpHandler {

	makeByQueriesHandler(r, endpoints, options["ByQueries"])

	makeCreateHandler(r, endpoints, options["Create"])

	makeCreateManyHandler(r, endpoints, options["CreateMany"])

	makeCreateServicetreeByPodIdHandler(r, endpoints, options["CreateServicetreeByPodId"])

	makeDeleteByIdHandler(r, endpoints, options["DeleteById"])

	makeDeleteManyHandler(r, endpoints, options["DeleteMany"])

	makeGetByIdHandler(r, endpoints, options["GetById"])

	makeGetServicetreeByPodIdHandler(r, endpoints, options["GetServicetreeByPodId"])

	makeUpdateByIdHandler(r, endpoints, options["UpdateById"])

	makeUpdateManyHandler(r, endpoints, options["UpdateMany"])

	return HttpHandler{}
}

type SwagResponse struct {
	TraceId string      `json:"traceId"`
	Data    interface{} `json:"data"`
}

type ByQueriesQuerySwag ent.PodQueryOps

// @Accept  json
// @Tags PodService
// @Param query query ByQueriesQuerySwag false " "
// @Success 200 {object} SwagResponse{data=ent.PodRestByQueriesRes}
// @Router /pods [get]
func makeByQueriesHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.GET("/pods", http.NewServer(endpoints.ByQueriesEndpoint, decodeByQueriesRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeByQueriesRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.PodRestByQueriesReq
	var err error

	err = ctx.ShouldBindQuery(&req.Query)
	if err != nil {
		return nil, err
	}

	return req, err
}

type CreateBodySwag ent.PodBaseCreateReq

// @Accept  json
// @Tags PodService
// @Param body body CreateBodySwag true " "
// @Success 200 {object} SwagResponse{data=ent.Pod}
// @Router /pod [post]
func makeCreateHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.POST("/pod", http.NewServer(endpoints.CreateEndpoint, decodeCreateRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeCreateRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.PodRestCreateReq
	var err error

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

type CreateManyBodySwag []ent.PodBaseCreateReq

// @Accept  json
// @Tags PodService
// @Param body body CreateManyBodySwag true " "
// @Success 200 {object} SwagResponse{data=ent.Pods}
// @Router /pods [post]
func makeCreateManyHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.POST("/pods", http.NewServer(endpoints.CreateManyEndpoint, decodeCreateManyRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeCreateManyRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.PodRestCreateManyReq
	var err error

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

type CreateServicetreeByPodIdBodySwag ent.SpiderDevTblServicetreeBaseCreateReq

// @Accept  json
// @Tags PodService
// @Param body body CreateServicetreeByPodIdBodySwag true " "
// @Param id path string true " "
// @Success 200 {object} SwagResponse{data=ent.Pod}
// @Router /pods/{id}/servicetree [post]
func makeCreateServicetreeByPodIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.POST("/pods/:id/servicetree", http.NewServer(endpoints.CreateServicetreeByPodIdEndpoint, decodeCreateServicetreeByPodIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeCreateServicetreeByPodIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.PodRestCreateServicetreeByPodIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags PodService
// @Param id path string true " "
// @Success 200 {object} SwagResponse{data=bool}
// @Router /pods/{id} [delete]
func makeDeleteByIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.DELETE("/pods/:id", http.NewServer(endpoints.DeleteByIdEndpoint, decodeDeleteByIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeDeleteByIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.PodRestDeleteByIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

type DeleteManyQuerySwag struct {
	Ids []int64 `json:"ids" form:"ids"`
}

// @Accept  json
// @Tags PodService
// @Param query query DeleteManyQuerySwag false " "
// @Success 200 {object} SwagResponse{data=bool}
// @Router /pods [delete]
func makeDeleteManyHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.DELETE("/pods", http.NewServer(endpoints.DeleteManyEndpoint, decodeDeleteManyRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeDeleteManyRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.PodRestDeleteManyReq
	var err error

	err = ctx.ShouldBindQuery(&req.Query)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags PodService
// @Param id path string true " "
// @Success 200 {object} SwagResponse{data=ent.PodBaseGetRes}
// @Router /pods/{id} [get]
func makeGetByIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.GET("/pods/:id", http.NewServer(endpoints.GetByIdEndpoint, decodeGetByIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeGetByIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.PodRestGetByIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags PodService
// @Param id path string true " "
// @Success 200 {object} SwagResponse{data=ent.SpiderDevTblServicetreeBaseGetRes}
// @Router /pods/{id}/servicetree [get]
func makeGetServicetreeByPodIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.GET("/pods/:id/servicetree", http.NewServer(endpoints.GetServicetreeByPodIdEndpoint, decodeGetServicetreeByPodIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeGetServicetreeByPodIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.PodRestGetServicetreeByPodIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

type UpdateByIdBodySwag ent.PodBaseUpdateReq

// @Accept  json
// @Tags PodService
// @Param body body UpdateByIdBodySwag true " "
// @Param id path string true " "
// @Success 200 {object} SwagResponse{data=ent.Pod}
// @Router /pods/{id} [put]
func makeUpdateByIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.PUT("/pods/:id", http.NewServer(endpoints.UpdateByIdEndpoint, decodeUpdateByIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeUpdateByIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.PodRestUpdateByIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

type UpdateManyBodySwag []ent.PodBaseUpdateReq

// @Accept  json
// @Tags PodService
// @Param body body UpdateManyBodySwag true " "
// @Success 200 {object} SwagResponse{data=bool}
// @Router /pods [put]
func makeUpdateManyHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.PUT("/pods", http.NewServer(endpoints.UpdateManyEndpoint, decodeUpdateManyRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeUpdateManyRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.PodRestUpdateManyReq
	var err error

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}
