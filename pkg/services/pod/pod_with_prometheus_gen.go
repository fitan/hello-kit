package pod

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"

	"hello/pkg/ent"
)

// PodServiceWithPrometheus implements PodService interface with all methods wrapped
// with Prometheus metrics
type PodServiceWithPrometheus struct {
	base         PodService
	instanceName string
}

var podserviceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "services_pod_duration_seconds",
		Help:       "podservice runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"})

// NewPodServiceWithPrometheus returns an instance of the PodService decorated with prometheus summary metric
func NewPodServiceWithPrometheus(base PodService) PodServiceWithPrometheus {
	return PodServiceWithPrometheus{
		base:         base,
		instanceName: "podservice",
	}
}

// ByQueries implements PodService
func (_d PodServiceWithPrometheus) ByQueries(ctx context.Context, req ent.PodRestByQueriesReq) (res ent.PodRestByQueriesRes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		podserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "ByQueries", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ByQueries(ctx, req)
}

// Create implements PodService
func (_d PodServiceWithPrometheus) Create(ctx context.Context, req ent.PodRestCreateReq) (res *ent.Pod, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		podserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "Create", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Create(ctx, req)
}

// CreateMany implements PodService
func (_d PodServiceWithPrometheus) CreateMany(ctx context.Context, req ent.PodRestCreateManyReq) (res ent.Pods, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		podserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "CreateMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.CreateMany(ctx, req)
}

// CreateServicetreeByPodId implements PodService
func (_d PodServiceWithPrometheus) CreateServicetreeByPodId(ctx context.Context, req ent.PodRestCreateServicetreeByPodIdReq) (res *ent.Pod, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		podserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "CreateServicetreeByPodId", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.CreateServicetreeByPodId(ctx, req)
}

// DeleteById implements PodService
func (_d PodServiceWithPrometheus) DeleteById(ctx context.Context, req ent.PodRestDeleteByIdReq) (success bool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		podserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteById(ctx, req)
}

// DeleteMany implements PodService
func (_d PodServiceWithPrometheus) DeleteMany(ctx context.Context, req ent.PodRestDeleteManyReq) (success bool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		podserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteMany(ctx, req)
}

// GetById implements PodService
func (_d PodServiceWithPrometheus) GetById(ctx context.Context, req ent.PodRestGetByIdReq) (res ent.PodBaseGetRes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		podserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetById(ctx, req)
}

// GetServicetreeByPodId implements PodService
func (_d PodServiceWithPrometheus) GetServicetreeByPodId(ctx context.Context, req ent.PodRestGetServicetreeByPodIdReq) (res ent.SpiderDevTblServicetreeBaseGetRes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		podserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetServicetreeByPodId", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetServicetreeByPodId(ctx, req)
}

// UpdateById implements PodService
func (_d PodServiceWithPrometheus) UpdateById(ctx context.Context, req ent.PodRestUpdateByIdReq) (res *ent.Pod, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		podserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateById(ctx, req)
}

// UpdateMany implements PodService
func (_d PodServiceWithPrometheus) UpdateMany(ctx context.Context, req ent.PodRestUpdateManyReq) (success bool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		podserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateMany(ctx, req)
}
