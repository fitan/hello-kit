package pod

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"

	"go.opentelemetry.io/otel/trace"
	"go.uber.org/zap"

	"hello/pkg/ent"
)

// PodServiceWithLog implements PodService that is instrumented with logging
type PodServiceWithLog struct {
	_log  *zap.SugaredLogger
	_base PodService
}

// NewPodServiceWithLog instruments an implementation of the PodService with simple logging
func NewPodServiceWithLog(base PodService, log *zap.SugaredLogger) PodServiceWithLog {
	return PodServiceWithLog{
		_base: base,
		_log:  log,
	}
}

// ByQueries implements PodService
func (_d PodServiceWithLog) ByQueries(ctx context.Context, req ent.PodRestByQueriesReq) (res ent.PodRestByQueriesRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("PodServiceWithLog calling ByQueries", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.ByQueries(ctx, req)
}

// Create implements PodService
func (_d PodServiceWithLog) Create(ctx context.Context, req ent.PodRestCreateReq) (res *ent.Pod, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("PodServiceWithLog calling Create", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.Create(ctx, req)
}

// CreateMany implements PodService
func (_d PodServiceWithLog) CreateMany(ctx context.Context, req ent.PodRestCreateManyReq) (res ent.Pods, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("PodServiceWithLog calling CreateMany", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.CreateMany(ctx, req)
}

// CreateServicetreeByPodId implements PodService
func (_d PodServiceWithLog) CreateServicetreeByPodId(ctx context.Context, req ent.PodRestCreateServicetreeByPodIdReq) (res *ent.Pod, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("PodServiceWithLog calling CreateServicetreeByPodId", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.CreateServicetreeByPodId(ctx, req)
}

// DeleteById implements PodService
func (_d PodServiceWithLog) DeleteById(ctx context.Context, req ent.PodRestDeleteByIdReq) (success bool, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("PodServiceWithLog calling DeleteById", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"success": success,
			"err":     err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     err})
		}

	}()
	return _d._base.DeleteById(ctx, req)
}

// DeleteMany implements PodService
func (_d PodServiceWithLog) DeleteMany(ctx context.Context, req ent.PodRestDeleteManyReq) (success bool, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("PodServiceWithLog calling DeleteMany", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"success": success,
			"err":     err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     err})
		}

	}()
	return _d._base.DeleteMany(ctx, req)
}

// GetById implements PodService
func (_d PodServiceWithLog) GetById(ctx context.Context, req ent.PodRestGetByIdReq) (res ent.PodBaseGetRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("PodServiceWithLog calling GetById", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.GetById(ctx, req)
}

// GetServicetreeByPodId implements PodService
func (_d PodServiceWithLog) GetServicetreeByPodId(ctx context.Context, req ent.PodRestGetServicetreeByPodIdReq) (res ent.SpiderDevTblServicetreeBaseGetRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("PodServiceWithLog calling GetServicetreeByPodId", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.GetServicetreeByPodId(ctx, req)
}

// UpdateById implements PodService
func (_d PodServiceWithLog) UpdateById(ctx context.Context, req ent.PodRestUpdateByIdReq) (res *ent.Pod, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("PodServiceWithLog calling UpdateById", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.UpdateById(ctx, req)
}

// UpdateMany implements PodService
func (_d PodServiceWithLog) UpdateMany(ctx context.Context, req ent.PodRestUpdateManyReq) (success bool, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("PodServiceWithLog calling UpdateMany", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"success": success,
			"err":     err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     err})
		}

	}()
	return _d._base.UpdateMany(ctx, req)
}
