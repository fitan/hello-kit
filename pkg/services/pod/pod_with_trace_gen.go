package pod

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"encoding/json"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
	semconv "go.opentelemetry.io/otel/semconv/v1.7.0"
	"go.opentelemetry.io/otel/trace"

	"hello/pkg/ent"
)

// PodServiceWithTracing implements PodService interface instrumented with opentracing spans
type PodServiceWithTracing struct {
	PodService
}

// NewPodServiceWithTracing returns PodServiceWithTracing
func NewPodServiceWithTracing(base PodService) PodService {
	d := PodServiceWithTracing{
		PodService: base,
	}

	return d
}

// ByQueries implements PodService
func (_d PodServiceWithTracing) ByQueries(ctx context.Context, req ent.PodRestByQueriesReq) (res ent.PodRestByQueriesRes, err error) {

	var name = "PodService.ByQueries"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.PodService.ByQueries(ctx, req)
}

// Create implements PodService
func (_d PodServiceWithTracing) Create(ctx context.Context, req ent.PodRestCreateReq) (res *ent.Pod, err error) {

	var name = "PodService.Create"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.PodService.Create(ctx, req)
}

// CreateMany implements PodService
func (_d PodServiceWithTracing) CreateMany(ctx context.Context, req ent.PodRestCreateManyReq) (res ent.Pods, err error) {

	var name = "PodService.CreateMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.PodService.CreateMany(ctx, req)
}

// CreateServicetreeByPodId implements PodService
func (_d PodServiceWithTracing) CreateServicetreeByPodId(ctx context.Context, req ent.PodRestCreateServicetreeByPodIdReq) (res *ent.Pod, err error) {

	var name = "PodService.CreateServicetreeByPodId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.PodService.CreateServicetreeByPodId(ctx, req)
}

// DeleteById implements PodService
func (_d PodServiceWithTracing) DeleteById(ctx context.Context, req ent.PodRestDeleteByIdReq) (success bool, err error) {

	var name = "PodService.DeleteById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"success": success,
					"err":     err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.PodService.DeleteById(ctx, req)
}

// DeleteMany implements PodService
func (_d PodServiceWithTracing) DeleteMany(ctx context.Context, req ent.PodRestDeleteManyReq) (success bool, err error) {

	var name = "PodService.DeleteMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"success": success,
					"err":     err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.PodService.DeleteMany(ctx, req)
}

// GetById implements PodService
func (_d PodServiceWithTracing) GetById(ctx context.Context, req ent.PodRestGetByIdReq) (res ent.PodBaseGetRes, err error) {

	var name = "PodService.GetById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.PodService.GetById(ctx, req)
}

// GetServicetreeByPodId implements PodService
func (_d PodServiceWithTracing) GetServicetreeByPodId(ctx context.Context, req ent.PodRestGetServicetreeByPodIdReq) (res ent.SpiderDevTblServicetreeBaseGetRes, err error) {

	var name = "PodService.GetServicetreeByPodId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.PodService.GetServicetreeByPodId(ctx, req)
}

// UpdateById implements PodService
func (_d PodServiceWithTracing) UpdateById(ctx context.Context, req ent.PodRestUpdateByIdReq) (res *ent.Pod, err error) {

	var name = "PodService.UpdateById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.PodService.UpdateById(ctx, req)
}

// UpdateMany implements PodService
func (_d PodServiceWithTracing) UpdateMany(ctx context.Context, req ent.PodRestUpdateManyReq) (success bool, err error) {

	var name = "PodService.UpdateMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"success": success,
					"err":     err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.PodService.UpdateMany(ctx, req)
}
