package resource

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"hello/utils/debug"

	"github.com/fitan/gink/transport/http"
	"github.com/gin-gonic/gin"

	"hello/pkg/ent"
)

type Ops map[string][]http.ServerOption

func AddHttpOptionToAllMethods(options map[string][]http.ServerOption, option http.ServerOption) {
	methods := []string{

		ResourceRestAddBindNextByResourceIdMethodName,

		ResourceRestAddBindPreByResourceIdMethodName,

		ResourceRestByQueriesAllMethodName,

		ResourceRestCreateMethodName,

		ResourceRestCreateManyMethodName,

		ResourceRestCreatePreByResourceIdMethodName,

		ResourceRestCreateResourcesByResourceIdMethodName,

		ResourceRestDeleteByIdMethodName,

		ResourceRestDeleteManyMethodName,

		ResourceRestDeleteNextByResourceIdMethodName,

		ResourceRestDeletePreByResourceIdMethodName,

		ResourceRestGetByIdMethodName,

		ResourceRestGetNextByResourceIdMethodName,

		ResourceRestGetPreByResourceIdMethodName,

		ResourceRestRemoveBindNextByResourceIdMethodName,

		ResourceRestRemoveBindPreByResourceIdMethodName,

		ResourceRestUpdateBindNextByResourceIdMethodName,

		ResourceRestUpdateBindPreByResourceIdMethodName,

		ResourceRestUpdateByIdMethodName,

		ResourceRestUpdateManyMethodName,
	}
	for _, v := range methods {
		options[v] = append(options[v], option)
	}
}

type HttpHandler struct {
}

func NewHTTPHandler(r *gin.RouterGroup, endpoints Endpoints, options Ops, debugSwitch *debug.DebugSwitch) HttpHandler {

	debugSwitch.Register("ResourceRestAddBindNextByResourceId", r.BasePath()+"/resources/:resourceId/next/bind/add", "PUT")

	debugSwitch.Register("ResourceRestAddBindPreByResourceId", r.BasePath()+"/resources/:resourceId/pre/:preId/bind/add", "PUT")

	debugSwitch.Register("ResourceRestByQueriesAll", r.BasePath()+"/resources", "GET")

	debugSwitch.Register("ResourceRestCreate", r.BasePath()+"/resource", "POST")

	debugSwitch.Register("ResourceRestCreateMany", r.BasePath()+"/resources", "POST")

	debugSwitch.Register("ResourceRestCreatePreByResourceId", r.BasePath()+"/resources/:resourceId/pre", "POST")

	debugSwitch.Register("ResourceRestCreateResourcesByResourceId", r.BasePath()+"/resources/:resourceId/next", "POST")

	debugSwitch.Register("ResourceRestDeleteById", r.BasePath()+"/resources/:resourceId", "DELETE")

	debugSwitch.Register("ResourceRestDeleteMany", r.BasePath()+"/resources", "DELETE")

	debugSwitch.Register("ResourceRestDeleteNextByResourceId", r.BasePath()+"/resources/:resourceId/next", "DELETE")

	debugSwitch.Register("ResourceRestDeletePreByResourceId", r.BasePath()+"/resources/:resourceId/pre", "DELETE")

	debugSwitch.Register("ResourceRestGetById", r.BasePath()+"/resources/:resourceId", "GET")

	debugSwitch.Register("ResourceRestGetNextByResourceId", r.BasePath()+"/resources/:resourceId/next", "GET")

	debugSwitch.Register("ResourceRestGetPreByResourceId", r.BasePath()+"/resources/:resourceId/pre", "GET")

	debugSwitch.Register("ResourceRestRemoveBindNextByResourceId", r.BasePath()+"/resources/:resourceId/next/bind/remove", "PUT")

	debugSwitch.Register("ResourceRestRemoveBindPreByResourceId", r.BasePath()+"/resources/:resourceId/pre/bind/remove", "PUT")

	debugSwitch.Register("ResourceRestUpdateBindNextByResourceId", r.BasePath()+"/resources/:resourceId/next/bind/update", "PUT")

	debugSwitch.Register("ResourceRestUpdateBindPreByResourceId", r.BasePath()+"/resources/:resourceId/pre/:preId/bind/update", "PUT")

	debugSwitch.Register("ResourceRestUpdateById", r.BasePath()+"/resources/:resourceId", "PUT")

	debugSwitch.Register("ResourceRestUpdateMany", r.BasePath()+"/resources", "PUT")

	makeResourceRestAddBindNextByResourceIdHandler(r, endpoints, options[ResourceRestAddBindNextByResourceIdMethodName])

	makeResourceRestAddBindPreByResourceIdHandler(r, endpoints, options[ResourceRestAddBindPreByResourceIdMethodName])

	makeResourceRestByQueriesAllHandler(r, endpoints, options[ResourceRestByQueriesAllMethodName])

	makeResourceRestCreateHandler(r, endpoints, options[ResourceRestCreateMethodName])

	makeResourceRestCreateManyHandler(r, endpoints, options[ResourceRestCreateManyMethodName])

	makeResourceRestCreatePreByResourceIdHandler(r, endpoints, options[ResourceRestCreatePreByResourceIdMethodName])

	makeResourceRestCreateResourcesByResourceIdHandler(r, endpoints, options[ResourceRestCreateResourcesByResourceIdMethodName])

	makeResourceRestDeleteByIdHandler(r, endpoints, options[ResourceRestDeleteByIdMethodName])

	makeResourceRestDeleteManyHandler(r, endpoints, options[ResourceRestDeleteManyMethodName])

	makeResourceRestDeleteNextByResourceIdHandler(r, endpoints, options[ResourceRestDeleteNextByResourceIdMethodName])

	makeResourceRestDeletePreByResourceIdHandler(r, endpoints, options[ResourceRestDeletePreByResourceIdMethodName])

	makeResourceRestGetByIdHandler(r, endpoints, options[ResourceRestGetByIdMethodName])

	makeResourceRestGetNextByResourceIdHandler(r, endpoints, options[ResourceRestGetNextByResourceIdMethodName])

	makeResourceRestGetPreByResourceIdHandler(r, endpoints, options[ResourceRestGetPreByResourceIdMethodName])

	makeResourceRestRemoveBindNextByResourceIdHandler(r, endpoints, options[ResourceRestRemoveBindNextByResourceIdMethodName])

	makeResourceRestRemoveBindPreByResourceIdHandler(r, endpoints, options[ResourceRestRemoveBindPreByResourceIdMethodName])

	makeResourceRestUpdateBindNextByResourceIdHandler(r, endpoints, options[ResourceRestUpdateBindNextByResourceIdMethodName])

	makeResourceRestUpdateBindPreByResourceIdHandler(r, endpoints, options[ResourceRestUpdateBindPreByResourceIdMethodName])

	makeResourceRestUpdateByIdHandler(r, endpoints, options[ResourceRestUpdateByIdMethodName])

	makeResourceRestUpdateManyHandler(r, endpoints, options[ResourceRestUpdateManyMethodName])

	return HttpHandler{}
}

type SwagResponse struct {
	TraceId string      `json:"traceId"`
	Status  int         `json:"status"`
	Data    interface{} `json:"data"`
}

type ResourceRestAddBindNextByResourceIdBodySwag struct {
	NextIds []int `json:"nextIds"`
}

// @Accept  json
// @Tags ResourceService
// @Param body body ResourceRestAddBindNextByResourceIdBodySwag true " "
// @Param resourceId path string true " "
// @Success 200 {object} SwagResponse{data=string}
// @Router /resources/{resourceId}/next/bind/add [put]
func makeResourceRestAddBindNextByResourceIdHandler(r *gin.RouterGroup, endpoints Endpoints, options []http.ServerOption) {
	r.PUT("/resources/:resourceId/next/bind/add", http.NewServer(endpoints.ResourceRestAddBindNextByResourceIdEndpoint, decodeResourceRestAddBindNextByResourceIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestAddBindNextByResourceIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestAddBindNextByResourceIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags ResourceService
// @Param resourceId path string true " "
// @Param preId path string true " "
// @Success 200 {object} SwagResponse{data=string}
// @Router /resources/{resourceId}/pre/{preId}/bind/add [put]
func makeResourceRestAddBindPreByResourceIdHandler(r *gin.RouterGroup, endpoints Endpoints, options []http.ServerOption) {
	r.PUT("/resources/:resourceId/pre/:preId/bind/add", http.NewServer(endpoints.ResourceRestAddBindPreByResourceIdEndpoint, decodeResourceRestAddBindPreByResourceIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestAddBindPreByResourceIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestAddBindPreByResourceIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ResourceRestByQueriesAllQuerySwag ent.ResourceQueryOps

// @Accept  json
// @Tags ResourceService
// @Param query query ResourceRestByQueriesAllQuerySwag false " "
// @Success 200 {object} SwagResponse{data=ent.ResourceRestByQueriesAllRes}
// @Router /resources [get]
func makeResourceRestByQueriesAllHandler(r *gin.RouterGroup, endpoints Endpoints, options []http.ServerOption) {
	r.GET("/resources", http.NewServer(endpoints.ResourceRestByQueriesAllEndpoint, decodeResourceRestByQueriesAllRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestByQueriesAllRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestByQueriesAllReq
	var err error

	err = ctx.ShouldBindQuery(&req.Query)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ResourceRestCreateBodySwag ent.ResourceBaseCreateReq

// @Accept  json
// @Tags ResourceService
// @Param body body ResourceRestCreateBodySwag true " "
// @Success 200 {object} SwagResponse{data=ent.Resource}
// @Router /resource [post]
func makeResourceRestCreateHandler(r *gin.RouterGroup, endpoints Endpoints, options []http.ServerOption) {
	r.POST("/resource", http.NewServer(endpoints.ResourceRestCreateEndpoint, decodeResourceRestCreateRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestCreateRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestCreateReq
	var err error

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ResourceRestCreateManyBodySwag []ent.ResourceBaseCreateReq

// @Accept  json
// @Tags ResourceService
// @Param body body ResourceRestCreateManyBodySwag true " "
// @Success 200 {object} SwagResponse{data=ent.Resources}
// @Router /resources [post]
func makeResourceRestCreateManyHandler(r *gin.RouterGroup, endpoints Endpoints, options []http.ServerOption) {
	r.POST("/resources", http.NewServer(endpoints.ResourceRestCreateManyEndpoint, decodeResourceRestCreateManyRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestCreateManyRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestCreateManyReq
	var err error

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ResourceRestCreatePreByResourceIdBodySwag ent.ResourceBaseCreateReq

// @Accept  json
// @Tags ResourceService
// @Param body body ResourceRestCreatePreByResourceIdBodySwag true " "
// @Param resourceId path string true " "
// @Success 200 {object} SwagResponse{data=ent.Resource}
// @Router /resources/{resourceId}/pre [post]
func makeResourceRestCreatePreByResourceIdHandler(r *gin.RouterGroup, endpoints Endpoints, options []http.ServerOption) {
	r.POST("/resources/:resourceId/pre", http.NewServer(endpoints.ResourceRestCreatePreByResourceIdEndpoint, decodeResourceRestCreatePreByResourceIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestCreatePreByResourceIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestCreatePreByResourceIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ResourceRestCreateResourcesByResourceIdBodySwag []ent.ResourceBaseCreateReq

// @Accept  json
// @Tags ResourceService
// @Param body body ResourceRestCreateResourcesByResourceIdBodySwag true " "
// @Param resourceId path string true " "
// @Success 200 {object} SwagResponse{data=ent.Resource}
// @Router /resources/{resourceId}/next [post]
func makeResourceRestCreateResourcesByResourceIdHandler(r *gin.RouterGroup, endpoints Endpoints, options []http.ServerOption) {
	r.POST("/resources/:resourceId/next", http.NewServer(endpoints.ResourceRestCreateResourcesByResourceIdEndpoint, decodeResourceRestCreateResourcesByResourceIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestCreateResourcesByResourceIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestCreateResourcesByResourceIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags ResourceService
// @Param resourceId path string true " "
// @Success 200 {object} SwagResponse{data=bool}
// @Router /resources/{resourceId} [delete]
func makeResourceRestDeleteByIdHandler(r *gin.RouterGroup, endpoints Endpoints, options []http.ServerOption) {
	r.DELETE("/resources/:resourceId", http.NewServer(endpoints.ResourceRestDeleteByIdEndpoint, decodeResourceRestDeleteByIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestDeleteByIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestDeleteByIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ResourceRestDeleteManyQuerySwag struct {
	Ids []int `json:"ids" form:"ids"`
}

// @Accept  json
// @Tags ResourceService
// @Param query query ResourceRestDeleteManyQuerySwag false " "
// @Success 200 {object} SwagResponse{data=bool}
// @Router /resources [delete]
func makeResourceRestDeleteManyHandler(r *gin.RouterGroup, endpoints Endpoints, options []http.ServerOption) {
	r.DELETE("/resources", http.NewServer(endpoints.ResourceRestDeleteManyEndpoint, decodeResourceRestDeleteManyRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestDeleteManyRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestDeleteManyReq
	var err error

	err = ctx.ShouldBindQuery(&req.Query)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ResourceRestDeleteNextByResourceIdQuerySwag struct {
	NextIds []int `json:"nextIds" form:"nextIds"`
}

// @Accept  json
// @Tags ResourceService
// @Param query query ResourceRestDeleteNextByResourceIdQuerySwag false " "
// @Param resourceId path string true " "
// @Success 200 {object} SwagResponse{data=string}
// @Router /resources/{resourceId}/next [delete]
func makeResourceRestDeleteNextByResourceIdHandler(r *gin.RouterGroup, endpoints Endpoints, options []http.ServerOption) {
	r.DELETE("/resources/:resourceId/next", http.NewServer(endpoints.ResourceRestDeleteNextByResourceIdEndpoint, decodeResourceRestDeleteNextByResourceIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestDeleteNextByResourceIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestDeleteNextByResourceIdReq
	var err error

	err = ctx.ShouldBindQuery(&req.Query)
	if err != nil {
		return nil, err
	}

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags ResourceService
// @Param resourceId path string true " "
// @Param preId path string true " "
// @Success 200 {object} SwagResponse{data=string}
// @Router /resources/{resourceId}/pre [delete]
func makeResourceRestDeletePreByResourceIdHandler(r *gin.RouterGroup, endpoints Endpoints, options []http.ServerOption) {
	r.DELETE("/resources/:resourceId/pre", http.NewServer(endpoints.ResourceRestDeletePreByResourceIdEndpoint, decodeResourceRestDeletePreByResourceIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestDeletePreByResourceIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestDeletePreByResourceIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags ResourceService
// @Param resourceId path string true " "
// @Success 200 {object} SwagResponse{data=ent.ResourceBaseGetRes}
// @Router /resources/{resourceId} [get]
func makeResourceRestGetByIdHandler(r *gin.RouterGroup, endpoints Endpoints, options []http.ServerOption) {
	r.GET("/resources/:resourceId", http.NewServer(endpoints.ResourceRestGetByIdEndpoint, decodeResourceRestGetByIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestGetByIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestGetByIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ResourceRestGetNextByResourceIdQuerySwag ent.ResourceQueryOps

// @Accept  json
// @Tags ResourceService
// @Param query query ResourceRestGetNextByResourceIdQuerySwag false " "
// @Param resourceId path string true " "
// @Success 200 {object} SwagResponse{data=ent.ResourceRestGetNextByResourceIdRes}
// @Router /resources/{resourceId}/next [get]
func makeResourceRestGetNextByResourceIdHandler(r *gin.RouterGroup, endpoints Endpoints, options []http.ServerOption) {
	r.GET("/resources/:resourceId/next", http.NewServer(endpoints.ResourceRestGetNextByResourceIdEndpoint, decodeResourceRestGetNextByResourceIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestGetNextByResourceIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestGetNextByResourceIdReq
	var err error

	err = ctx.ShouldBindQuery(&req.Query)
	if err != nil {
		return nil, err
	}

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags ResourceService
// @Param resourceId path string true " "
// @Success 200 {object} SwagResponse{data=ent.ResourceBaseGetRes}
// @Router /resources/{resourceId}/pre [get]
func makeResourceRestGetPreByResourceIdHandler(r *gin.RouterGroup, endpoints Endpoints, options []http.ServerOption) {
	r.GET("/resources/:resourceId/pre", http.NewServer(endpoints.ResourceRestGetPreByResourceIdEndpoint, decodeResourceRestGetPreByResourceIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestGetPreByResourceIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestGetPreByResourceIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ResourceRestRemoveBindNextByResourceIdBodySwag struct {
	NextIds []int `json:"nextIds"`
}

// @Accept  json
// @Tags ResourceService
// @Param body body ResourceRestRemoveBindNextByResourceIdBodySwag true " "
// @Param resourceId path string true " "
// @Success 200 {object} SwagResponse{data=string}
// @Router /resources/{resourceId}/next/bind/remove [put]
func makeResourceRestRemoveBindNextByResourceIdHandler(r *gin.RouterGroup, endpoints Endpoints, options []http.ServerOption) {
	r.PUT("/resources/:resourceId/next/bind/remove", http.NewServer(endpoints.ResourceRestRemoveBindNextByResourceIdEndpoint, decodeResourceRestRemoveBindNextByResourceIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestRemoveBindNextByResourceIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestRemoveBindNextByResourceIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags ResourceService
// @Param resourceId path string true " "
// @Success 200 {object} SwagResponse{data=string}
// @Router /resources/{resourceId}/pre/bind/remove [put]
func makeResourceRestRemoveBindPreByResourceIdHandler(r *gin.RouterGroup, endpoints Endpoints, options []http.ServerOption) {
	r.PUT("/resources/:resourceId/pre/bind/remove", http.NewServer(endpoints.ResourceRestRemoveBindPreByResourceIdEndpoint, decodeResourceRestRemoveBindPreByResourceIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestRemoveBindPreByResourceIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestRemoveBindPreByResourceIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ResourceRestUpdateBindNextByResourceIdBodySwag struct {
	OldIds []int `json:"OldIds"`
	NewIds []int `json:"NewIds"`
}

// @Accept  json
// @Tags ResourceService
// @Param body body ResourceRestUpdateBindNextByResourceIdBodySwag true " "
// @Param resourceId path string true " "
// @Success 200 {object} SwagResponse{data=string}
// @Router /resources/{resourceId}/next/bind/update [put]
func makeResourceRestUpdateBindNextByResourceIdHandler(r *gin.RouterGroup, endpoints Endpoints, options []http.ServerOption) {
	r.PUT("/resources/:resourceId/next/bind/update", http.NewServer(endpoints.ResourceRestUpdateBindNextByResourceIdEndpoint, decodeResourceRestUpdateBindNextByResourceIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestUpdateBindNextByResourceIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestUpdateBindNextByResourceIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags ResourceService
// @Param resourceId path string true " "
// @Param preId path string true " "
// @Success 200 {object} SwagResponse{data=string}
// @Router /resources/{resourceId}/pre/{preId}/bind/update [put]
func makeResourceRestUpdateBindPreByResourceIdHandler(r *gin.RouterGroup, endpoints Endpoints, options []http.ServerOption) {
	r.PUT("/resources/:resourceId/pre/:preId/bind/update", http.NewServer(endpoints.ResourceRestUpdateBindPreByResourceIdEndpoint, decodeResourceRestUpdateBindPreByResourceIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestUpdateBindPreByResourceIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestUpdateBindPreByResourceIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ResourceRestUpdateByIdBodySwag ent.ResourceBaseUpdateReq

// @Accept  json
// @Tags ResourceService
// @Param body body ResourceRestUpdateByIdBodySwag true " "
// @Param resourceId path string true " "
// @Success 200 {object} SwagResponse{data=ent.Resource}
// @Router /resources/{resourceId} [put]
func makeResourceRestUpdateByIdHandler(r *gin.RouterGroup, endpoints Endpoints, options []http.ServerOption) {
	r.PUT("/resources/:resourceId", http.NewServer(endpoints.ResourceRestUpdateByIdEndpoint, decodeResourceRestUpdateByIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestUpdateByIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestUpdateByIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ResourceRestUpdateManyBodySwag []ent.ResourceBaseUpdateReq

// @Accept  json
// @Tags ResourceService
// @Param body body ResourceRestUpdateManyBodySwag true " "
// @Success 200 {object} SwagResponse{data=bool}
// @Router /resources [put]
func makeResourceRestUpdateManyHandler(r *gin.RouterGroup, endpoints Endpoints, options []http.ServerOption) {
	r.PUT("/resources", http.NewServer(endpoints.ResourceRestUpdateManyEndpoint, decodeResourceRestUpdateManyRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestUpdateManyRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestUpdateManyReq
	var err error

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}
