package resource

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"hello/pkg/debug"

	"github.com/fitan/gink/transport/http"
	"github.com/gin-gonic/gin"

	"hello/pkg/ent"
)

type Ops map[string][]http.ServerOption

func AddHttpOptionToAllMethods(options map[string][]http.ServerOption, option http.ServerOption) {
	methods := []string{

		ResourceRestByQueriesAllMethodName,

		ResourceRestCreateMethodName,

		ResourceRestCreateManyMethodName,

		ResourceRestDeleteByIdMethodName,

		ResourceRestDeleteManyMethodName,

		ResourceRestGetByIdMethodName,

		ResourceRestUpdateByIdMethodName,

		ResourceRestUpdateManyMethodName,
	}
	for _, v := range methods {
		options[v] = append(options[v], option)
	}
}

type HttpHandler struct {
}

func NewHTTPHandler(r *gin.Engine, endpoints Endpoints, options Ops, debugSwitch *debug.DebugSwitch) HttpHandler {

	debugSwitch.Register("ResourceRestByQueriesAll", "/resources", "GET")

	debugSwitch.Register("ResourceRestCreate", "/resource", "POST")

	debugSwitch.Register("ResourceRestCreateMany", "/resources", "POST")

	debugSwitch.Register("ResourceRestDeleteById", "/resources/:resourceId", "DELETE")

	debugSwitch.Register("ResourceRestDeleteMany", "/resources", "DELETE")

	debugSwitch.Register("ResourceRestGetById", "/resources/:resourceId", "GET")

	debugSwitch.Register("ResourceRestUpdateById", "/resources/:resourceId", "PUT")

	debugSwitch.Register("ResourceRestUpdateMany", "/resources", "PUT")

	makeResourceRestByQueriesAllHandler(r, endpoints, options[ResourceRestByQueriesAllMethodName])

	makeResourceRestCreateHandler(r, endpoints, options[ResourceRestCreateMethodName])

	makeResourceRestCreateManyHandler(r, endpoints, options[ResourceRestCreateManyMethodName])

	makeResourceRestDeleteByIdHandler(r, endpoints, options[ResourceRestDeleteByIdMethodName])

	makeResourceRestDeleteManyHandler(r, endpoints, options[ResourceRestDeleteManyMethodName])

	makeResourceRestGetByIdHandler(r, endpoints, options[ResourceRestGetByIdMethodName])

	makeResourceRestUpdateByIdHandler(r, endpoints, options[ResourceRestUpdateByIdMethodName])

	makeResourceRestUpdateManyHandler(r, endpoints, options[ResourceRestUpdateManyMethodName])

	return HttpHandler{}
}

type SwagResponse struct {
	TraceId string      `json:"traceId"`
	Status  int         `json:"status"`
	Data    interface{} `json:"data"`
}

type ResourceRestByQueriesAllQuerySwag ent.ResourceQueryOps

// @Accept  json
// @Tags ResourceService
// @Param query query ResourceRestByQueriesAllQuerySwag false " "
// @Success 200 {object} SwagResponse{data=ent.ResourceRestByQueriesAllRes}
// @Router /resources [get]
func makeResourceRestByQueriesAllHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.GET("/resources", http.NewServer(endpoints.ResourceRestByQueriesAllEndpoint, decodeResourceRestByQueriesAllRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestByQueriesAllRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestByQueriesAllReq
	var err error

	err = ctx.ShouldBindQuery(&req.Query)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ResourceRestCreateBodySwag ent.ResourceBaseCreateReq

// @Accept  json
// @Tags ResourceService
// @Param body body ResourceRestCreateBodySwag true " "
// @Success 200 {object} SwagResponse{data=ent.Resource}
// @Router /resource [post]
func makeResourceRestCreateHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.POST("/resource", http.NewServer(endpoints.ResourceRestCreateEndpoint, decodeResourceRestCreateRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestCreateRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestCreateReq
	var err error

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ResourceRestCreateManyBodySwag []ent.ResourceBaseCreateReq

// @Accept  json
// @Tags ResourceService
// @Param body body ResourceRestCreateManyBodySwag true " "
// @Success 200 {object} SwagResponse{data=ent.Resources}
// @Router /resources [post]
func makeResourceRestCreateManyHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.POST("/resources", http.NewServer(endpoints.ResourceRestCreateManyEndpoint, decodeResourceRestCreateManyRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestCreateManyRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestCreateManyReq
	var err error

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags ResourceService
// @Param resourceId path string true " "
// @Success 200 {object} SwagResponse{data=bool}
// @Router /resources/{resourceId} [delete]
func makeResourceRestDeleteByIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.DELETE("/resources/:resourceId", http.NewServer(endpoints.ResourceRestDeleteByIdEndpoint, decodeResourceRestDeleteByIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestDeleteByIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestDeleteByIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ResourceRestDeleteManyQuerySwag struct {
	Ids []int `json:"ids" form:"ids"`
}

// @Accept  json
// @Tags ResourceService
// @Param query query ResourceRestDeleteManyQuerySwag false " "
// @Success 200 {object} SwagResponse{data=bool}
// @Router /resources [delete]
func makeResourceRestDeleteManyHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.DELETE("/resources", http.NewServer(endpoints.ResourceRestDeleteManyEndpoint, decodeResourceRestDeleteManyRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestDeleteManyRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestDeleteManyReq
	var err error

	err = ctx.ShouldBindQuery(&req.Query)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags ResourceService
// @Param resourceId path string true " "
// @Success 200 {object} SwagResponse{data=ent.ResourceBaseGetRes}
// @Router /resources/{resourceId} [get]
func makeResourceRestGetByIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.GET("/resources/:resourceId", http.NewServer(endpoints.ResourceRestGetByIdEndpoint, decodeResourceRestGetByIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestGetByIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestGetByIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ResourceRestUpdateByIdBodySwag ent.ResourceBaseUpdateReq

// @Accept  json
// @Tags ResourceService
// @Param body body ResourceRestUpdateByIdBodySwag true " "
// @Param resourceId path string true " "
// @Success 200 {object} SwagResponse{data=ent.Resource}
// @Router /resources/{resourceId} [put]
func makeResourceRestUpdateByIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.PUT("/resources/:resourceId", http.NewServer(endpoints.ResourceRestUpdateByIdEndpoint, decodeResourceRestUpdateByIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestUpdateByIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestUpdateByIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ResourceRestUpdateManyBodySwag []ent.ResourceBaseUpdateReq

// @Accept  json
// @Tags ResourceService
// @Param body body ResourceRestUpdateManyBodySwag true " "
// @Success 200 {object} SwagResponse{data=bool}
// @Router /resources [put]
func makeResourceRestUpdateManyHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.PUT("/resources", http.NewServer(endpoints.ResourceRestUpdateManyEndpoint, decodeResourceRestUpdateManyRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeResourceRestUpdateManyRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ResourceRestUpdateManyReq
	var err error

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}
