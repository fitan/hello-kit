package casbin

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"fmt"

	ginkHttp "github.com/fitan/gink/transport/http"
	"go.opentelemetry.io/otel/trace"
	"go.uber.org/zap"

	"context"
)

// CasbinServiceWithLog implements CasbinService that is instrumented with logging
type CasbinServiceWithLog struct {
	_log  *zap.SugaredLogger
	_base CasbinService
}

// NewCasbinServiceWithLog instruments an implementation of the CasbinService with simple logging
func NewCasbinServiceWithLog(base CasbinService, log *zap.SugaredLogger) CasbinServiceWithLog {
	return CasbinServiceWithLog{
		_base: base,
		_log:  log,
	}
}

// AddRoleAuthorization implements CasbinService
func (_d CasbinServiceWithLog) AddRoleAuthorization(ctx context.Context, role Role) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling AddRoleAuthorization", "params", map[string]interface{}{
					"role": role}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling AddRoleAuthorization", "params", map[string]interface{}{
					"role": role}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling AddRoleAuthorization", "params", map[string]interface{}{
				"role": role}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling AddRoleAuthorization", "params", map[string]interface{}{
				"role": role}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.AddRoleAuthorization(ctx, role)
}

// BindPermission implements CasbinService
func (_d CasbinServiceWithLog) BindPermission(ctx context.Context, permission Permission) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling BindPermission", "params", map[string]interface{}{
					"permission": permission}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling BindPermission", "params", map[string]interface{}{
					"permission": permission}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling BindPermission", "params", map[string]interface{}{
				"permission": permission}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling BindPermission", "params", map[string]interface{}{
				"permission": permission}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.BindPermission(ctx, permission)
}

// CheckPermission implements CasbinService
func (_d CasbinServiceWithLog) CheckPermission(ctx context.Context, permission CheckPermission) (b1 bool, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling CheckPermission", "params", map[string]interface{}{
					"permission": permission}, "results", map[string]interface{}{
					"b1":  b1,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling CheckPermission", "params", map[string]interface{}{
					"permission": permission}, "results", map[string]interface{}{
					"b1":  b1,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling CheckPermission", "params", map[string]interface{}{
				"permission": permission}, "results", map[string]interface{}{
				"b1":  b1,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling CheckPermission", "params", map[string]interface{}{
				"permission": permission}, "results", map[string]interface{}{
				"b1":  b1,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.CheckPermission(ctx, permission)
}

// DelRoleAuthorization implements CasbinService
func (_d CasbinServiceWithLog) DelRoleAuthorization(ctx context.Context, role Role) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling DelRoleAuthorization", "params", map[string]interface{}{
					"role": role}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling DelRoleAuthorization", "params", map[string]interface{}{
					"role": role}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling DelRoleAuthorization", "params", map[string]interface{}{
				"role": role}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling DelRoleAuthorization", "params", map[string]interface{}{
				"role": role}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.DelRoleAuthorization(ctx, role)
}

// GetPermissionByUser implements CasbinService
func (_d CasbinServiceWithLog) GetPermissionByUser(ctx context.Context, permission Permission) (res []Permission) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			_log.Infow("with_log calling GetPermissionByUser", "params", map[string]interface{}{
				"permission": permission}, "results", map[string]interface{}{
				"res": res})
		}
	}()
	return _d._base.GetPermissionByUser(ctx, permission)
}

// UnBindPermission implements CasbinService
func (_d CasbinServiceWithLog) UnBindPermission(ctx context.Context, permission Permission) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling UnBindPermission", "params", map[string]interface{}{
					"permission": permission}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling UnBindPermission", "params", map[string]interface{}{
					"permission": permission}, "results", map[string]interface{}{
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling UnBindPermission", "params", map[string]interface{}{
				"permission": permission}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling UnBindPermission", "params", map[string]interface{}{
				"permission": permission}, "results", map[string]interface{}{
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.UnBindPermission(ctx, permission)
}
