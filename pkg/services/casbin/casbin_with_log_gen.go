package casbin

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"go.opentelemetry.io/otel/trace"
	"go.uber.org/zap"

	"context"
)

// CasbinServiceWithLog implements CasbinService that is instrumented with logging
type CasbinServiceWithLog struct {
	_log  *zap.SugaredLogger
	_base CasbinService
}

// NewCasbinServiceWithLog instruments an implementation of the CasbinService with simple logging
func NewCasbinServiceWithLog(base CasbinService, log *zap.SugaredLogger) CasbinServiceWithLog {
	return CasbinServiceWithLog{
		_base: base,
		_log:  log,
	}
}

// BindPermission implements CasbinService
func (_d CasbinServiceWithLog) BindPermission(ctx context.Context, userId int, roleId int, resourceId int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("CasbinServiceWithLog calling BindPermission", "params", map[string]interface{}{
			"userId":     userId,
			"roleId":     roleId,
			"resourceId": resourceId}, "results", map[string]interface{}{
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"userId":     userId,
				"roleId":     roleId,
				"resourceId": resourceId}, "results", map[string]interface{}{
				"err": err})
		}

	}()
	return _d._base.BindPermission(ctx, userId, roleId, resourceId)
}

// UnBindPermission implements CasbinService
func (_d CasbinServiceWithLog) UnBindPermission(ctx context.Context, userId int, roleId int, resourceId int) (err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("CasbinServiceWithLog calling UnBindPermission", "params", map[string]interface{}{
			"userId":     userId,
			"roleId":     roleId,
			"resourceId": resourceId}, "results", map[string]interface{}{
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"userId":     userId,
				"roleId":     roleId,
				"resourceId": resourceId}, "results", map[string]interface{}{
				"err": err})
		}

	}()
	return _d._base.UnBindPermission(ctx, userId, roleId, resourceId)
}
