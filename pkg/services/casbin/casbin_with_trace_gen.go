package casbin

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"encoding/json"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
	semconv "go.opentelemetry.io/otel/semconv/v1.7.0"
	"go.opentelemetry.io/otel/trace"
)

// CasbinServiceWithTracing implements CasbinService interface instrumented with opentracing spans
type CasbinServiceWithTracing struct {
	CasbinService
}

// NewCasbinServiceWithTracing returns CasbinServiceWithTracing
func NewCasbinServiceWithTracing(base CasbinService) CasbinService {
	d := CasbinServiceWithTracing{
		CasbinService: base,
	}

	return d
}

// BindPermission implements CasbinService
func (_d CasbinServiceWithTracing) BindPermission(ctx context.Context, userId int, roleId int, resourceId int) (err error) {

	var name = "CasbinService.BindPermission"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"userId":     userId,
					"roleId":     roleId,
					"resourceId": resourceId},
				"result": map[string]interface{}{
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.CasbinService.BindPermission(ctx, userId, roleId, resourceId)
}

// UnBindPermission implements CasbinService
func (_d CasbinServiceWithTracing) UnBindPermission(ctx context.Context, userId int, roleId int, resourceId int) (err error) {

	var name = "CasbinService.UnBindPermission"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"userId":     userId,
					"roleId":     roleId,
					"resourceId": resourceId},
				"result": map[string]interface{}{
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.CasbinService.UnBindPermission(ctx, userId, roleId, resourceId)
}
