package casbin

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"time"

	"context"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// CasbinServiceWithPrometheus implements CasbinService interface with all methods wrapped
// with Prometheus metrics
type CasbinServiceWithPrometheus struct {
	base         CasbinService
	instanceName string
}

var casbinserviceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "services_casbin_duration_seconds",
		Help:       "casbinservice runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"})

// NewCasbinServiceWithPrometheus returns an instance of the CasbinService decorated with prometheus summary metric
func NewCasbinServiceWithPrometheus(base CasbinService) CasbinServiceWithPrometheus {
	return CasbinServiceWithPrometheus{
		base:         base,
		instanceName: "(down .Interface.Name)",
	}
}

// BindPermission implements CasbinService
func (_d CasbinServiceWithPrometheus) BindPermission(ctx context.Context, userId int, roleId int, resourceId int) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		casbinserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "BindPermission", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.BindPermission(ctx, userId, roleId, resourceId)
}

// UnBindPermission implements CasbinService
func (_d CasbinServiceWithPrometheus) UnBindPermission(ctx context.Context, userId int, roleId int, resourceId int) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		casbinserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "UnBindPermission", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UnBindPermission(ctx, userId, roleId, resourceId)
}
