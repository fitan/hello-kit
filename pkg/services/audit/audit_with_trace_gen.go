package audit

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"encoding/json"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
	semconv "go.opentelemetry.io/otel/semconv/v1.7.0"
	"go.opentelemetry.io/otel/trace"

	"hello/pkg/ent"
)

// AuditServiceWithTracing implements AuditService interface instrumented with opentracing spans
type AuditServiceWithTracing struct {
	AuditService
}

// NewAuditServiceWithTracing returns AuditServiceWithTracing
func NewAuditServiceWithTracing(base AuditService) AuditService {
	d := AuditServiceWithTracing{
		AuditService: base,
	}

	return d
}

// AuditRestByQueriesAll implements AuditService
func (_d AuditServiceWithTracing) AuditRestByQueriesAll(ctx context.Context, req ent.AuditRestByQueriesAllReq) (res ent.AuditRestByQueriesAllRes, err error) {

	var name = "AuditService.AuditRestByQueriesAll"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.AuditService.AuditRestByQueriesAll(ctx, req)
}

// AuditRestCreate implements AuditService
func (_d AuditServiceWithTracing) AuditRestCreate(ctx context.Context, req ent.AuditRestCreateReq) (res *ent.Audit, err error) {

	var name = "AuditService.AuditRestCreate"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.AuditService.AuditRestCreate(ctx, req)
}

// AuditRestCreateMany implements AuditService
func (_d AuditServiceWithTracing) AuditRestCreateMany(ctx context.Context, req ent.AuditRestCreateManyReq) (res ent.Audits, err error) {

	var name = "AuditService.AuditRestCreateMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.AuditService.AuditRestCreateMany(ctx, req)
}

// AuditRestDeleteById implements AuditService
func (_d AuditServiceWithTracing) AuditRestDeleteById(ctx context.Context, req ent.AuditRestDeleteByIdReq) (success bool, err error) {

	var name = "AuditService.AuditRestDeleteById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"success": success,
					"err":     err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.AuditService.AuditRestDeleteById(ctx, req)
}

// AuditRestDeleteMany implements AuditService
func (_d AuditServiceWithTracing) AuditRestDeleteMany(ctx context.Context, req ent.AuditRestDeleteManyReq) (success bool, err error) {

	var name = "AuditService.AuditRestDeleteMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"success": success,
					"err":     err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.AuditService.AuditRestDeleteMany(ctx, req)
}

// AuditRestGetById implements AuditService
func (_d AuditServiceWithTracing) AuditRestGetById(ctx context.Context, req ent.AuditRestGetByIdReq) (res ent.AuditBaseGetRes, err error) {

	var name = "AuditService.AuditRestGetById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.AuditService.AuditRestGetById(ctx, req)
}

// AuditRestUpdateById implements AuditService
func (_d AuditServiceWithTracing) AuditRestUpdateById(ctx context.Context, req ent.AuditRestUpdateByIdReq) (res *ent.Audit, err error) {

	var name = "AuditService.AuditRestUpdateById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.AuditService.AuditRestUpdateById(ctx, req)
}

// AuditRestUpdateMany implements AuditService
func (_d AuditServiceWithTracing) AuditRestUpdateMany(ctx context.Context, req ent.AuditRestUpdateManyReq) (success bool, err error) {

	var name = "AuditService.AuditRestUpdateMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"success": success,
					"err":     err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.AuditService.AuditRestUpdateMany(ctx, req)
}
