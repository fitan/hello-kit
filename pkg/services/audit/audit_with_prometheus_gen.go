package audit

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"

	"hello/pkg/ent"
)

// AuditServiceWithPrometheus implements AuditService interface with all methods wrapped
// with Prometheus metrics
type AuditServiceWithPrometheus struct {
	base         AuditService
	instanceName string
}

var auditserviceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "services_audit_duration_seconds",
		Help:       "auditservice runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"})

// NewAuditServiceWithPrometheus returns an instance of the AuditService decorated with prometheus summary metric
func NewAuditServiceWithPrometheus(base AuditService) AuditServiceWithPrometheus {
	return AuditServiceWithPrometheus{
		base:         base,
		instanceName: "auditservice",
	}
}

// AuditRestByQueriesAll implements AuditService
func (_d AuditServiceWithPrometheus) AuditRestByQueriesAll(ctx context.Context, req ent.AuditRestByQueriesAllReq) (res ent.AuditRestByQueriesAllRes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		auditserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "AuditRestByQueriesAll", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.AuditRestByQueriesAll(ctx, req)
}

// AuditRestCreate implements AuditService
func (_d AuditServiceWithPrometheus) AuditRestCreate(ctx context.Context, req ent.AuditRestCreateReq) (res *ent.Audit, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		auditserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "AuditRestCreate", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.AuditRestCreate(ctx, req)
}

// AuditRestCreateMany implements AuditService
func (_d AuditServiceWithPrometheus) AuditRestCreateMany(ctx context.Context, req ent.AuditRestCreateManyReq) (res ent.Audits, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		auditserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "AuditRestCreateMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.AuditRestCreateMany(ctx, req)
}

// AuditRestDeleteById implements AuditService
func (_d AuditServiceWithPrometheus) AuditRestDeleteById(ctx context.Context, req ent.AuditRestDeleteByIdReq) (success bool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		auditserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "AuditRestDeleteById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.AuditRestDeleteById(ctx, req)
}

// AuditRestDeleteMany implements AuditService
func (_d AuditServiceWithPrometheus) AuditRestDeleteMany(ctx context.Context, req ent.AuditRestDeleteManyReq) (success bool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		auditserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "AuditRestDeleteMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.AuditRestDeleteMany(ctx, req)
}

// AuditRestGetById implements AuditService
func (_d AuditServiceWithPrometheus) AuditRestGetById(ctx context.Context, req ent.AuditRestGetByIdReq) (res ent.AuditBaseGetRes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		auditserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "AuditRestGetById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.AuditRestGetById(ctx, req)
}

// AuditRestUpdateById implements AuditService
func (_d AuditServiceWithPrometheus) AuditRestUpdateById(ctx context.Context, req ent.AuditRestUpdateByIdReq) (res *ent.Audit, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		auditserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "AuditRestUpdateById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.AuditRestUpdateById(ctx, req)
}

// AuditRestUpdateMany implements AuditService
func (_d AuditServiceWithPrometheus) AuditRestUpdateMany(ctx context.Context, req ent.AuditRestUpdateManyReq) (success bool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		auditserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "AuditRestUpdateMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.AuditRestUpdateMany(ctx, req)
}
