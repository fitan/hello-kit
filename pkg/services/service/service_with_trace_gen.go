package service

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"encoding/json"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
	semconv "go.opentelemetry.io/otel/semconv/v1.7.0"
	"go.opentelemetry.io/otel/trace"

	"hello/pkg/ent"
)

// ServiceServiceWithTracing implements ServiceService interface instrumented with opentracing spans
type ServiceServiceWithTracing struct {
	ServiceService
}

// NewServiceServiceWithTracing returns ServiceServiceWithTracing
func NewServiceServiceWithTracing(base ServiceService) ServiceService {
	d := ServiceServiceWithTracing{
		ServiceService: base,
	}

	return d
}

// ServiceRestAddBindProjectByServiceId implements ServiceService
func (_d ServiceServiceWithTracing) ServiceRestAddBindProjectByServiceId(ctx context.Context, req ent.ServiceRestAddBindProjectByServiceIdReq) (res string, err error) {

	var name = "ServiceService.ServiceRestAddBindProjectByServiceId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ServiceService.ServiceRestAddBindProjectByServiceId(ctx, req)
}

// ServiceRestByQueriesAll implements ServiceService
func (_d ServiceServiceWithTracing) ServiceRestByQueriesAll(ctx context.Context, req ent.ServiceRestByQueriesAllReq) (res ent.ServiceRestByQueriesAllRes, err error) {

	var name = "ServiceService.ServiceRestByQueriesAll"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ServiceService.ServiceRestByQueriesAll(ctx, req)
}

// ServiceRestCreate implements ServiceService
func (_d ServiceServiceWithTracing) ServiceRestCreate(ctx context.Context, req ent.ServiceRestCreateReq) (res *ent.Service, err error) {

	var name = "ServiceService.ServiceRestCreate"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ServiceService.ServiceRestCreate(ctx, req)
}

// ServiceRestCreateMany implements ServiceService
func (_d ServiceServiceWithTracing) ServiceRestCreateMany(ctx context.Context, req ent.ServiceRestCreateManyReq) (res ent.Services, err error) {

	var name = "ServiceService.ServiceRestCreateMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ServiceService.ServiceRestCreateMany(ctx, req)
}

// ServiceRestCreateProjectByServiceId implements ServiceService
func (_d ServiceServiceWithTracing) ServiceRestCreateProjectByServiceId(ctx context.Context, req ent.ServiceRestCreateProjectByServiceIdReq) (res *ent.Service, err error) {

	var name = "ServiceService.ServiceRestCreateProjectByServiceId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ServiceService.ServiceRestCreateProjectByServiceId(ctx, req)
}

// ServiceRestDeleteById implements ServiceService
func (_d ServiceServiceWithTracing) ServiceRestDeleteById(ctx context.Context, req ent.ServiceRestDeleteByIdReq) (success bool, err error) {

	var name = "ServiceService.ServiceRestDeleteById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"success": success,
					"err":     err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ServiceService.ServiceRestDeleteById(ctx, req)
}

// ServiceRestDeleteMany implements ServiceService
func (_d ServiceServiceWithTracing) ServiceRestDeleteMany(ctx context.Context, req ent.ServiceRestDeleteManyReq) (success bool, err error) {

	var name = "ServiceService.ServiceRestDeleteMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"success": success,
					"err":     err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ServiceService.ServiceRestDeleteMany(ctx, req)
}

// ServiceRestDeleteProjectByServiceId implements ServiceService
func (_d ServiceServiceWithTracing) ServiceRestDeleteProjectByServiceId(ctx context.Context, req ent.ServiceRestDeleteProjectByServiceIdReq) (res string, err error) {

	var name = "ServiceService.ServiceRestDeleteProjectByServiceId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ServiceService.ServiceRestDeleteProjectByServiceId(ctx, req)
}

// ServiceRestGetById implements ServiceService
func (_d ServiceServiceWithTracing) ServiceRestGetById(ctx context.Context, req ent.ServiceRestGetByIdReq) (res ent.ServiceBaseGetRes, err error) {

	var name = "ServiceService.ServiceRestGetById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ServiceService.ServiceRestGetById(ctx, req)
}

// ServiceRestGetProjectByServiceId implements ServiceService
func (_d ServiceServiceWithTracing) ServiceRestGetProjectByServiceId(ctx context.Context, req ent.ServiceRestGetProjectByServiceIdReq) (res ent.ProjectBaseGetRes, err error) {

	var name = "ServiceService.ServiceRestGetProjectByServiceId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ServiceService.ServiceRestGetProjectByServiceId(ctx, req)
}

// ServiceRestRemoveBindProjectByServiceId implements ServiceService
func (_d ServiceServiceWithTracing) ServiceRestRemoveBindProjectByServiceId(ctx context.Context, req ent.ServiceRestRemoveBindProjectByServiceIdReq) (res string, err error) {

	var name = "ServiceService.ServiceRestRemoveBindProjectByServiceId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ServiceService.ServiceRestRemoveBindProjectByServiceId(ctx, req)
}

// ServiceRestUpdateBindProjectByServiceId implements ServiceService
func (_d ServiceServiceWithTracing) ServiceRestUpdateBindProjectByServiceId(ctx context.Context, req ent.ServiceRestUpdateBindProjectByServiceIdReq) (res string, err error) {

	var name = "ServiceService.ServiceRestUpdateBindProjectByServiceId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ServiceService.ServiceRestUpdateBindProjectByServiceId(ctx, req)
}

// ServiceRestUpdateById implements ServiceService
func (_d ServiceServiceWithTracing) ServiceRestUpdateById(ctx context.Context, req ent.ServiceRestUpdateByIdReq) (res *ent.Service, err error) {

	var name = "ServiceService.ServiceRestUpdateById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ServiceService.ServiceRestUpdateById(ctx, req)
}

// ServiceRestUpdateMany implements ServiceService
func (_d ServiceServiceWithTracing) ServiceRestUpdateMany(ctx context.Context, req ent.ServiceRestUpdateManyReq) (success bool, err error) {

	var name = "ServiceService.ServiceRestUpdateMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"success": success,
					"err":     err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ServiceService.ServiceRestUpdateMany(ctx, req)
}
