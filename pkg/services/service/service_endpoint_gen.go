package service

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"

	"go.opentelemetry.io/otel/trace"

	endpoint "github.com/go-kit/kit/endpoint"

	"hello/pkg/ent"
)

const (
	ServiceRestAddBindProjectByServiceIdMethodName = "ServiceRestAddBindProjectByServiceId"

	ServiceRestByQueriesAllMethodName = "ServiceRestByQueriesAll"

	ServiceRestCreateMethodName = "ServiceRestCreate"

	ServiceRestCreateManyMethodName = "ServiceRestCreateMany"

	ServiceRestCreateProjectByServiceIdMethodName = "ServiceRestCreateProjectByServiceId"

	ServiceRestDeleteByIdMethodName = "ServiceRestDeleteById"

	ServiceRestDeleteManyMethodName = "ServiceRestDeleteMany"

	ServiceRestDeleteProjectByServiceIdMethodName = "ServiceRestDeleteProjectByServiceId"

	ServiceRestGetByIdMethodName = "ServiceRestGetById"

	ServiceRestGetProjectByServiceIdMethodName = "ServiceRestGetProjectByServiceId"

	ServiceRestRemoveBindProjectByServiceIdMethodName = "ServiceRestRemoveBindProjectByServiceId"

	ServiceRestUpdateBindProjectByServiceIdMethodName = "ServiceRestUpdateBindProjectByServiceId"

	ServiceRestUpdateByIdMethodName = "ServiceRestUpdateById"

	ServiceRestUpdateManyMethodName = "ServiceRestUpdateMany"
)

type Mws map[string][]endpoint.Middleware

type Endpoints struct {
	ServiceRestAddBindProjectByServiceIdEndpoint endpoint.Endpoint

	ServiceRestByQueriesAllEndpoint endpoint.Endpoint

	ServiceRestCreateEndpoint endpoint.Endpoint

	ServiceRestCreateManyEndpoint endpoint.Endpoint

	ServiceRestCreateProjectByServiceIdEndpoint endpoint.Endpoint

	ServiceRestDeleteByIdEndpoint endpoint.Endpoint

	ServiceRestDeleteManyEndpoint endpoint.Endpoint

	ServiceRestDeleteProjectByServiceIdEndpoint endpoint.Endpoint

	ServiceRestGetByIdEndpoint endpoint.Endpoint

	ServiceRestGetProjectByServiceIdEndpoint endpoint.Endpoint

	ServiceRestRemoveBindProjectByServiceIdEndpoint endpoint.Endpoint

	ServiceRestUpdateBindProjectByServiceIdEndpoint endpoint.Endpoint

	ServiceRestUpdateByIdEndpoint endpoint.Endpoint

	ServiceRestUpdateManyEndpoint endpoint.Endpoint
}

func AddEndpointMiddlewareToAllMethods(mw map[string][]endpoint.Middleware, m endpoint.Middleware) {
	methods := []string{

		ServiceRestAddBindProjectByServiceIdMethodName,

		ServiceRestByQueriesAllMethodName,

		ServiceRestCreateMethodName,

		ServiceRestCreateManyMethodName,

		ServiceRestCreateProjectByServiceIdMethodName,

		ServiceRestDeleteByIdMethodName,

		ServiceRestDeleteManyMethodName,

		ServiceRestDeleteProjectByServiceIdMethodName,

		ServiceRestGetByIdMethodName,

		ServiceRestGetProjectByServiceIdMethodName,

		ServiceRestRemoveBindProjectByServiceIdMethodName,

		ServiceRestUpdateBindProjectByServiceIdMethodName,

		ServiceRestUpdateByIdMethodName,

		ServiceRestUpdateManyMethodName,
	}
	for _, v := range methods {
		mw[v] = append(mw[v], m)
	}
}

func AddEndpointMiddlewareToAllMethodsWithMethodName(mw map[string][]endpoint.Middleware, m func(n string) endpoint.Middleware) {
	methods := []string{

		ServiceRestAddBindProjectByServiceIdMethodName,

		ServiceRestByQueriesAllMethodName,

		ServiceRestCreateMethodName,

		ServiceRestCreateManyMethodName,

		ServiceRestCreateProjectByServiceIdMethodName,

		ServiceRestDeleteByIdMethodName,

		ServiceRestDeleteManyMethodName,

		ServiceRestDeleteProjectByServiceIdMethodName,

		ServiceRestGetByIdMethodName,

		ServiceRestGetProjectByServiceIdMethodName,

		ServiceRestRemoveBindProjectByServiceIdMethodName,

		ServiceRestUpdateBindProjectByServiceIdMethodName,

		ServiceRestUpdateByIdMethodName,

		ServiceRestUpdateManyMethodName,
	}
	for _, v := range methods {
		mw[v] = append(mw[v], m(v))
	}
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func NewEndpoints(s ServiceService, mdw Mws) Endpoints {
	eps := Endpoints{

		ServiceRestAddBindProjectByServiceIdEndpoint: MakeServiceRestAddBindProjectByServiceIdEndpoint(s),

		ServiceRestByQueriesAllEndpoint: MakeServiceRestByQueriesAllEndpoint(s),

		ServiceRestCreateEndpoint: MakeServiceRestCreateEndpoint(s),

		ServiceRestCreateManyEndpoint: MakeServiceRestCreateManyEndpoint(s),

		ServiceRestCreateProjectByServiceIdEndpoint: MakeServiceRestCreateProjectByServiceIdEndpoint(s),

		ServiceRestDeleteByIdEndpoint: MakeServiceRestDeleteByIdEndpoint(s),

		ServiceRestDeleteManyEndpoint: MakeServiceRestDeleteManyEndpoint(s),

		ServiceRestDeleteProjectByServiceIdEndpoint: MakeServiceRestDeleteProjectByServiceIdEndpoint(s),

		ServiceRestGetByIdEndpoint: MakeServiceRestGetByIdEndpoint(s),

		ServiceRestGetProjectByServiceIdEndpoint: MakeServiceRestGetProjectByServiceIdEndpoint(s),

		ServiceRestRemoveBindProjectByServiceIdEndpoint: MakeServiceRestRemoveBindProjectByServiceIdEndpoint(s),

		ServiceRestUpdateBindProjectByServiceIdEndpoint: MakeServiceRestUpdateBindProjectByServiceIdEndpoint(s),

		ServiceRestUpdateByIdEndpoint: MakeServiceRestUpdateByIdEndpoint(s),

		ServiceRestUpdateManyEndpoint: MakeServiceRestUpdateManyEndpoint(s),
	}

	for _, m := range mdw[ServiceRestAddBindProjectByServiceIdMethodName] {
		eps.ServiceRestAddBindProjectByServiceIdEndpoint = m(eps.ServiceRestAddBindProjectByServiceIdEndpoint)
	}

	for _, m := range mdw[ServiceRestByQueriesAllMethodName] {
		eps.ServiceRestByQueriesAllEndpoint = m(eps.ServiceRestByQueriesAllEndpoint)
	}

	for _, m := range mdw[ServiceRestCreateMethodName] {
		eps.ServiceRestCreateEndpoint = m(eps.ServiceRestCreateEndpoint)
	}

	for _, m := range mdw[ServiceRestCreateManyMethodName] {
		eps.ServiceRestCreateManyEndpoint = m(eps.ServiceRestCreateManyEndpoint)
	}

	for _, m := range mdw[ServiceRestCreateProjectByServiceIdMethodName] {
		eps.ServiceRestCreateProjectByServiceIdEndpoint = m(eps.ServiceRestCreateProjectByServiceIdEndpoint)
	}

	for _, m := range mdw[ServiceRestDeleteByIdMethodName] {
		eps.ServiceRestDeleteByIdEndpoint = m(eps.ServiceRestDeleteByIdEndpoint)
	}

	for _, m := range mdw[ServiceRestDeleteManyMethodName] {
		eps.ServiceRestDeleteManyEndpoint = m(eps.ServiceRestDeleteManyEndpoint)
	}

	for _, m := range mdw[ServiceRestDeleteProjectByServiceIdMethodName] {
		eps.ServiceRestDeleteProjectByServiceIdEndpoint = m(eps.ServiceRestDeleteProjectByServiceIdEndpoint)
	}

	for _, m := range mdw[ServiceRestGetByIdMethodName] {
		eps.ServiceRestGetByIdEndpoint = m(eps.ServiceRestGetByIdEndpoint)
	}

	for _, m := range mdw[ServiceRestGetProjectByServiceIdMethodName] {
		eps.ServiceRestGetProjectByServiceIdEndpoint = m(eps.ServiceRestGetProjectByServiceIdEndpoint)
	}

	for _, m := range mdw[ServiceRestRemoveBindProjectByServiceIdMethodName] {
		eps.ServiceRestRemoveBindProjectByServiceIdEndpoint = m(eps.ServiceRestRemoveBindProjectByServiceIdEndpoint)
	}

	for _, m := range mdw[ServiceRestUpdateBindProjectByServiceIdMethodName] {
		eps.ServiceRestUpdateBindProjectByServiceIdEndpoint = m(eps.ServiceRestUpdateBindProjectByServiceIdEndpoint)
	}

	for _, m := range mdw[ServiceRestUpdateByIdMethodName] {
		eps.ServiceRestUpdateByIdEndpoint = m(eps.ServiceRestUpdateByIdEndpoint)
	}

	for _, m := range mdw[ServiceRestUpdateManyMethodName] {
		eps.ServiceRestUpdateManyEndpoint = m(eps.ServiceRestUpdateManyEndpoint)
	}

	return eps
}

func MakeServiceRestAddBindProjectByServiceIdEndpoint(s ServiceService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ServiceRestAddBindProjectByServiceIdReq)
		rs, err := s.ServiceRestAddBindProjectByServiceId(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeServiceRestByQueriesAllEndpoint(s ServiceService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ServiceRestByQueriesAllReq)
		rs, err := s.ServiceRestByQueriesAll(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeServiceRestCreateEndpoint(s ServiceService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ServiceRestCreateReq)
		rs, err := s.ServiceRestCreate(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeServiceRestCreateManyEndpoint(s ServiceService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ServiceRestCreateManyReq)
		rs, err := s.ServiceRestCreateMany(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeServiceRestCreateProjectByServiceIdEndpoint(s ServiceService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ServiceRestCreateProjectByServiceIdReq)
		rs, err := s.ServiceRestCreateProjectByServiceId(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeServiceRestDeleteByIdEndpoint(s ServiceService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ServiceRestDeleteByIdReq)
		rs, err := s.ServiceRestDeleteById(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeServiceRestDeleteManyEndpoint(s ServiceService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ServiceRestDeleteManyReq)
		rs, err := s.ServiceRestDeleteMany(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeServiceRestDeleteProjectByServiceIdEndpoint(s ServiceService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ServiceRestDeleteProjectByServiceIdReq)
		rs, err := s.ServiceRestDeleteProjectByServiceId(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeServiceRestGetByIdEndpoint(s ServiceService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ServiceRestGetByIdReq)
		rs, err := s.ServiceRestGetById(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeServiceRestGetProjectByServiceIdEndpoint(s ServiceService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ServiceRestGetProjectByServiceIdReq)
		rs, err := s.ServiceRestGetProjectByServiceId(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeServiceRestRemoveBindProjectByServiceIdEndpoint(s ServiceService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ServiceRestRemoveBindProjectByServiceIdReq)
		rs, err := s.ServiceRestRemoveBindProjectByServiceId(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeServiceRestUpdateBindProjectByServiceIdEndpoint(s ServiceService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ServiceRestUpdateBindProjectByServiceIdReq)
		rs, err := s.ServiceRestUpdateBindProjectByServiceId(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeServiceRestUpdateByIdEndpoint(s ServiceService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ServiceRestUpdateByIdReq)
		rs, err := s.ServiceRestUpdateById(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeServiceRestUpdateManyEndpoint(s ServiceService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ServiceRestUpdateManyReq)
		rs, err := s.ServiceRestUpdateMany(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}
