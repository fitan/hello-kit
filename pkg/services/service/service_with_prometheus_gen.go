package service

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"

	"hello/pkg/ent"
)

// ServiceServiceWithPrometheus implements ServiceService interface with all methods wrapped
// with Prometheus metrics
type ServiceServiceWithPrometheus struct {
	base         ServiceService
	instanceName string
}

var serviceserviceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "services_service_duration_seconds",
		Help:       "serviceservice runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"})

// NewServiceServiceWithPrometheus returns an instance of the ServiceService decorated with prometheus summary metric
func NewServiceServiceWithPrometheus(base ServiceService) ServiceServiceWithPrometheus {
	return ServiceServiceWithPrometheus{
		base:         base,
		instanceName: "serviceservice",
	}
}

// ServiceRestAddBindProjectByServiceId implements ServiceService
func (_d ServiceServiceWithPrometheus) ServiceRestAddBindProjectByServiceId(ctx context.Context, req ent.ServiceRestAddBindProjectByServiceIdReq) (res string, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serviceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "ServiceRestAddBindProjectByServiceId", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ServiceRestAddBindProjectByServiceId(ctx, req)
}

// ServiceRestByQueriesAll implements ServiceService
func (_d ServiceServiceWithPrometheus) ServiceRestByQueriesAll(ctx context.Context, req ent.ServiceRestByQueriesAllReq) (res ent.ServiceRestByQueriesAllRes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serviceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "ServiceRestByQueriesAll", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ServiceRestByQueriesAll(ctx, req)
}

// ServiceRestCreate implements ServiceService
func (_d ServiceServiceWithPrometheus) ServiceRestCreate(ctx context.Context, req ent.ServiceRestCreateReq) (res *ent.Service, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serviceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "ServiceRestCreate", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ServiceRestCreate(ctx, req)
}

// ServiceRestCreateMany implements ServiceService
func (_d ServiceServiceWithPrometheus) ServiceRestCreateMany(ctx context.Context, req ent.ServiceRestCreateManyReq) (res ent.Services, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serviceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "ServiceRestCreateMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ServiceRestCreateMany(ctx, req)
}

// ServiceRestCreateProjectByServiceId implements ServiceService
func (_d ServiceServiceWithPrometheus) ServiceRestCreateProjectByServiceId(ctx context.Context, req ent.ServiceRestCreateProjectByServiceIdReq) (res *ent.Service, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serviceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "ServiceRestCreateProjectByServiceId", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ServiceRestCreateProjectByServiceId(ctx, req)
}

// ServiceRestDeleteById implements ServiceService
func (_d ServiceServiceWithPrometheus) ServiceRestDeleteById(ctx context.Context, req ent.ServiceRestDeleteByIdReq) (success bool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serviceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "ServiceRestDeleteById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ServiceRestDeleteById(ctx, req)
}

// ServiceRestDeleteMany implements ServiceService
func (_d ServiceServiceWithPrometheus) ServiceRestDeleteMany(ctx context.Context, req ent.ServiceRestDeleteManyReq) (success bool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serviceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "ServiceRestDeleteMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ServiceRestDeleteMany(ctx, req)
}

// ServiceRestDeleteProjectByServiceId implements ServiceService
func (_d ServiceServiceWithPrometheus) ServiceRestDeleteProjectByServiceId(ctx context.Context, req ent.ServiceRestDeleteProjectByServiceIdReq) (res string, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serviceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "ServiceRestDeleteProjectByServiceId", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ServiceRestDeleteProjectByServiceId(ctx, req)
}

// ServiceRestGetById implements ServiceService
func (_d ServiceServiceWithPrometheus) ServiceRestGetById(ctx context.Context, req ent.ServiceRestGetByIdReq) (res ent.ServiceBaseGetRes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serviceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "ServiceRestGetById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ServiceRestGetById(ctx, req)
}

// ServiceRestGetProjectByServiceId implements ServiceService
func (_d ServiceServiceWithPrometheus) ServiceRestGetProjectByServiceId(ctx context.Context, req ent.ServiceRestGetProjectByServiceIdReq) (res ent.ProjectBaseGetRes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serviceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "ServiceRestGetProjectByServiceId", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ServiceRestGetProjectByServiceId(ctx, req)
}

// ServiceRestRemoveBindProjectByServiceId implements ServiceService
func (_d ServiceServiceWithPrometheus) ServiceRestRemoveBindProjectByServiceId(ctx context.Context, req ent.ServiceRestRemoveBindProjectByServiceIdReq) (res string, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serviceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "ServiceRestRemoveBindProjectByServiceId", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ServiceRestRemoveBindProjectByServiceId(ctx, req)
}

// ServiceRestUpdateBindProjectByServiceId implements ServiceService
func (_d ServiceServiceWithPrometheus) ServiceRestUpdateBindProjectByServiceId(ctx context.Context, req ent.ServiceRestUpdateBindProjectByServiceIdReq) (res string, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serviceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "ServiceRestUpdateBindProjectByServiceId", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ServiceRestUpdateBindProjectByServiceId(ctx, req)
}

// ServiceRestUpdateById implements ServiceService
func (_d ServiceServiceWithPrometheus) ServiceRestUpdateById(ctx context.Context, req ent.ServiceRestUpdateByIdReq) (res *ent.Service, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serviceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "ServiceRestUpdateById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ServiceRestUpdateById(ctx, req)
}

// ServiceRestUpdateMany implements ServiceService
func (_d ServiceServiceWithPrometheus) ServiceRestUpdateMany(ctx context.Context, req ent.ServiceRestUpdateManyReq) (success bool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serviceserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "ServiceRestUpdateMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ServiceRestUpdateMany(ctx, req)
}
