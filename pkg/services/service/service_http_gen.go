package service

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	debug2 "hello/utils/debug"

	"github.com/fitan/gink/transport/http"
	"github.com/gin-gonic/gin"

	"hello/pkg/ent"
)

type Ops map[string][]http.ServerOption

func AddHttpOptionToAllMethods(options map[string][]http.ServerOption, option http.ServerOption) {
	methods := []string{

		ServiceRestAddBindProjectByServiceIdMethodName,

		ServiceRestByQueriesAllMethodName,

		ServiceRestCreateMethodName,

		ServiceRestCreateManyMethodName,

		ServiceRestCreateProjectByServiceIdMethodName,

		ServiceRestDeleteByIdMethodName,

		ServiceRestDeleteManyMethodName,

		ServiceRestDeleteProjectByServiceIdMethodName,

		ServiceRestGetByIdMethodName,

		ServiceRestGetProjectByServiceIdMethodName,

		ServiceRestRemoveBindProjectByServiceIdMethodName,

		ServiceRestUpdateBindProjectByServiceIdMethodName,

		ServiceRestUpdateByIdMethodName,

		ServiceRestUpdateManyMethodName,
	}
	for _, v := range methods {
		options[v] = append(options[v], option)
	}
}

type HttpHandler struct {
}

func NewHTTPHandler(r *gin.Engine, endpoints Endpoints, options Ops, debugSwitch *debug2.DebugSwitch) HttpHandler {

	debugSwitch.Register("ServiceRestAddBindProjectByServiceId", "/services/:serviceId/project/:projectId/bind/add", "PUT")

	debugSwitch.Register("ServiceRestByQueriesAll", "/services", "GET")

	debugSwitch.Register("ServiceRestCreate", "/service", "POST")

	debugSwitch.Register("ServiceRestCreateMany", "/services", "POST")

	debugSwitch.Register("ServiceRestCreateProjectByServiceId", "/services/:serviceId/project", "POST")

	debugSwitch.Register("ServiceRestDeleteById", "/services/:serviceId", "DELETE")

	debugSwitch.Register("ServiceRestDeleteMany", "/services", "DELETE")

	debugSwitch.Register("ServiceRestDeleteProjectByServiceId", "/services/:serviceId/project", "DELETE")

	debugSwitch.Register("ServiceRestGetById", "/services/:serviceId", "GET")

	debugSwitch.Register("ServiceRestGetProjectByServiceId", "/services/:serviceId/project", "GET")

	debugSwitch.Register("ServiceRestRemoveBindProjectByServiceId", "/services/:serviceId/project/bind/remove", "PUT")

	debugSwitch.Register("ServiceRestUpdateBindProjectByServiceId", "/services/:serviceId/project/:projectId/bind/update", "PUT")

	debugSwitch.Register("ServiceRestUpdateById", "/services/:serviceId", "PUT")

	debugSwitch.Register("ServiceRestUpdateMany", "/services", "PUT")

	makeServiceRestAddBindProjectByServiceIdHandler(r, endpoints, options[ServiceRestAddBindProjectByServiceIdMethodName])

	makeServiceRestByQueriesAllHandler(r, endpoints, options[ServiceRestByQueriesAllMethodName])

	makeServiceRestCreateHandler(r, endpoints, options[ServiceRestCreateMethodName])

	makeServiceRestCreateManyHandler(r, endpoints, options[ServiceRestCreateManyMethodName])

	makeServiceRestCreateProjectByServiceIdHandler(r, endpoints, options[ServiceRestCreateProjectByServiceIdMethodName])

	makeServiceRestDeleteByIdHandler(r, endpoints, options[ServiceRestDeleteByIdMethodName])

	makeServiceRestDeleteManyHandler(r, endpoints, options[ServiceRestDeleteManyMethodName])

	makeServiceRestDeleteProjectByServiceIdHandler(r, endpoints, options[ServiceRestDeleteProjectByServiceIdMethodName])

	makeServiceRestGetByIdHandler(r, endpoints, options[ServiceRestGetByIdMethodName])

	makeServiceRestGetProjectByServiceIdHandler(r, endpoints, options[ServiceRestGetProjectByServiceIdMethodName])

	makeServiceRestRemoveBindProjectByServiceIdHandler(r, endpoints, options[ServiceRestRemoveBindProjectByServiceIdMethodName])

	makeServiceRestUpdateBindProjectByServiceIdHandler(r, endpoints, options[ServiceRestUpdateBindProjectByServiceIdMethodName])

	makeServiceRestUpdateByIdHandler(r, endpoints, options[ServiceRestUpdateByIdMethodName])

	makeServiceRestUpdateManyHandler(r, endpoints, options[ServiceRestUpdateManyMethodName])

	return HttpHandler{}
}

type SwagResponse struct {
	TraceId string      `json:"traceId"`
	Status  int         `json:"status"`
	Data    interface{} `json:"data"`
}

// @Accept  json
// @Tags ServiceService
// @Param serviceId path string true " "
// @Param projectId path string true " "
// @Success 200 {object} SwagResponse{data=string}
// @Router /services/{serviceId}/project/{projectId}/bind/add [put]
func makeServiceRestAddBindProjectByServiceIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.PUT("/services/:serviceId/project/:projectId/bind/add", http.NewServer(endpoints.ServiceRestAddBindProjectByServiceIdEndpoint, decodeServiceRestAddBindProjectByServiceIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeServiceRestAddBindProjectByServiceIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ServiceRestAddBindProjectByServiceIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ServiceRestByQueriesAllQuerySwag ent.ServiceQueryOps

// @Accept  json
// @Tags ServiceService
// @Param query query ServiceRestByQueriesAllQuerySwag false " "
// @Success 200 {object} SwagResponse{data=ent.ServiceRestByQueriesAllRes}
// @Router /services [get]
func makeServiceRestByQueriesAllHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.GET("/services", http.NewServer(endpoints.ServiceRestByQueriesAllEndpoint, decodeServiceRestByQueriesAllRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeServiceRestByQueriesAllRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ServiceRestByQueriesAllReq
	var err error

	err = ctx.ShouldBindQuery(&req.Query)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ServiceRestCreateBodySwag ent.ServiceBaseCreateReq

// @Accept  json
// @Tags ServiceService
// @Param body body ServiceRestCreateBodySwag true " "
// @Success 200 {object} SwagResponse{data=ent.Service}
// @Router /service [post]
func makeServiceRestCreateHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.POST("/service", http.NewServer(endpoints.ServiceRestCreateEndpoint, decodeServiceRestCreateRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeServiceRestCreateRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ServiceRestCreateReq
	var err error

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ServiceRestCreateManyBodySwag []ent.ServiceBaseCreateReq

// @Accept  json
// @Tags ServiceService
// @Param body body ServiceRestCreateManyBodySwag true " "
// @Success 200 {object} SwagResponse{data=ent.Services}
// @Router /services [post]
func makeServiceRestCreateManyHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.POST("/services", http.NewServer(endpoints.ServiceRestCreateManyEndpoint, decodeServiceRestCreateManyRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeServiceRestCreateManyRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ServiceRestCreateManyReq
	var err error

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ServiceRestCreateProjectByServiceIdBodySwag ent.ProjectBaseCreateReq

// @Accept  json
// @Tags ServiceService
// @Param body body ServiceRestCreateProjectByServiceIdBodySwag true " "
// @Param serviceId path string true " "
// @Success 200 {object} SwagResponse{data=ent.Service}
// @Router /services/{serviceId}/project [post]
func makeServiceRestCreateProjectByServiceIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.POST("/services/:serviceId/project", http.NewServer(endpoints.ServiceRestCreateProjectByServiceIdEndpoint, decodeServiceRestCreateProjectByServiceIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeServiceRestCreateProjectByServiceIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ServiceRestCreateProjectByServiceIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags ServiceService
// @Param serviceId path string true " "
// @Success 200 {object} SwagResponse{data=bool}
// @Router /services/{serviceId} [delete]
func makeServiceRestDeleteByIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.DELETE("/services/:serviceId", http.NewServer(endpoints.ServiceRestDeleteByIdEndpoint, decodeServiceRestDeleteByIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeServiceRestDeleteByIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ServiceRestDeleteByIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ServiceRestDeleteManyQuerySwag struct {
	Ids []int `json:"ids" form:"ids"`
}

// @Accept  json
// @Tags ServiceService
// @Param query query ServiceRestDeleteManyQuerySwag false " "
// @Success 200 {object} SwagResponse{data=bool}
// @Router /services [delete]
func makeServiceRestDeleteManyHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.DELETE("/services", http.NewServer(endpoints.ServiceRestDeleteManyEndpoint, decodeServiceRestDeleteManyRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeServiceRestDeleteManyRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ServiceRestDeleteManyReq
	var err error

	err = ctx.ShouldBindQuery(&req.Query)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags ServiceService
// @Param serviceId path string true " "
// @Param projectId path string true " "
// @Success 200 {object} SwagResponse{data=string}
// @Router /services/{serviceId}/project [delete]
func makeServiceRestDeleteProjectByServiceIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.DELETE("/services/:serviceId/project", http.NewServer(endpoints.ServiceRestDeleteProjectByServiceIdEndpoint, decodeServiceRestDeleteProjectByServiceIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeServiceRestDeleteProjectByServiceIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ServiceRestDeleteProjectByServiceIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags ServiceService
// @Param serviceId path string true " "
// @Success 200 {object} SwagResponse{data=ent.ServiceBaseGetRes}
// @Router /services/{serviceId} [get]
func makeServiceRestGetByIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.GET("/services/:serviceId", http.NewServer(endpoints.ServiceRestGetByIdEndpoint, decodeServiceRestGetByIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeServiceRestGetByIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ServiceRestGetByIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags ServiceService
// @Param serviceId path string true " "
// @Success 200 {object} SwagResponse{data=ent.ProjectBaseGetRes}
// @Router /services/{serviceId}/project [get]
func makeServiceRestGetProjectByServiceIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.GET("/services/:serviceId/project", http.NewServer(endpoints.ServiceRestGetProjectByServiceIdEndpoint, decodeServiceRestGetProjectByServiceIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeServiceRestGetProjectByServiceIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ServiceRestGetProjectByServiceIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags ServiceService
// @Param serviceId path string true " "
// @Success 200 {object} SwagResponse{data=string}
// @Router /services/{serviceId}/project/bind/remove [put]
func makeServiceRestRemoveBindProjectByServiceIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.PUT("/services/:serviceId/project/bind/remove", http.NewServer(endpoints.ServiceRestRemoveBindProjectByServiceIdEndpoint, decodeServiceRestRemoveBindProjectByServiceIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeServiceRestRemoveBindProjectByServiceIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ServiceRestRemoveBindProjectByServiceIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags ServiceService
// @Param serviceId path string true " "
// @Param projectId path string true " "
// @Success 200 {object} SwagResponse{data=string}
// @Router /services/{serviceId}/project/{projectId}/bind/update [put]
func makeServiceRestUpdateBindProjectByServiceIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.PUT("/services/:serviceId/project/:projectId/bind/update", http.NewServer(endpoints.ServiceRestUpdateBindProjectByServiceIdEndpoint, decodeServiceRestUpdateBindProjectByServiceIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeServiceRestUpdateBindProjectByServiceIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ServiceRestUpdateBindProjectByServiceIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ServiceRestUpdateByIdBodySwag ent.ServiceBaseUpdateReq

// @Accept  json
// @Tags ServiceService
// @Param body body ServiceRestUpdateByIdBodySwag true " "
// @Param serviceId path string true " "
// @Success 200 {object} SwagResponse{data=ent.Service}
// @Router /services/{serviceId} [put]
func makeServiceRestUpdateByIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.PUT("/services/:serviceId", http.NewServer(endpoints.ServiceRestUpdateByIdEndpoint, decodeServiceRestUpdateByIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeServiceRestUpdateByIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ServiceRestUpdateByIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ServiceRestUpdateManyBodySwag []ent.ServiceBaseUpdateReq

// @Accept  json
// @Tags ServiceService
// @Param body body ServiceRestUpdateManyBodySwag true " "
// @Success 200 {object} SwagResponse{data=bool}
// @Router /services [put]
func makeServiceRestUpdateManyHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.PUT("/services", http.NewServer(endpoints.ServiceRestUpdateManyEndpoint, decodeServiceRestUpdateManyRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeServiceRestUpdateManyRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ServiceRestUpdateManyReq
	var err error

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}
