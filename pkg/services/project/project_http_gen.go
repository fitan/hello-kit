package project

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"github.com/fitan/gink/transport/http"
	"github.com/gin-gonic/gin"
	"hello/pkg/debug"

	"hello/pkg/ent"
)

type Ops map[string][]http.ServerOption

func AddHttpOptionToAllMethods(options map[string][]http.ServerOption, option http.ServerOption) {
	methods := []string{

		ProjectRestByQueriesAllMethodName,

		ProjectRestCreateMethodName,

		ProjectRestCreateManyMethodName,

		ProjectRestCreateServicesSliceByProjectIdMethodName,

		ProjectRestDeleteByIdMethodName,

		ProjectRestDeleteManyMethodName,

		ProjectRestGetByIdMethodName,

		ProjectRestGetServicesSliceByProjectIdMethodName,

		ProjectRestUpdateByIdMethodName,

		ProjectRestUpdateManyMethodName,
	}
	for _, v := range methods {
		options[v] = append(options[v], option)
	}
}

type HttpHandler struct {
}

func NewHTTPHandler(r *gin.Engine, endpoints Endpoints, options Ops, debugSwitch *debug.DebugSwitch) HttpHandler {

	debugSwitch.Register("ProjectRestByQueriesAll", "/projects", "GET")

	debugSwitch.Register("ProjectRestCreate", "/project", "POST")

	debugSwitch.Register("ProjectRestCreateMany", "/projects", "POST")

	debugSwitch.Register("ProjectRestCreateServicesSliceByProjectId", "/projects/:projectId/servicesslice", "POST")

	debugSwitch.Register("ProjectRestDeleteById", "/projects/:projectId", "DELETE")

	debugSwitch.Register("ProjectRestDeleteMany", "/projects", "DELETE")

	debugSwitch.Register("ProjectRestGetById", "/projects/:projectId", "GET")

	debugSwitch.Register("ProjectRestGetServicesSliceByProjectId", "/projects/:projectId/services", "GET")

	debugSwitch.Register("ProjectRestUpdateById", "/projects/:projectId", "PUT")

	debugSwitch.Register("ProjectRestUpdateMany", "/projects", "PUT")

	makeProjectRestByQueriesAllHandler(r, endpoints, options[ProjectRestByQueriesAllMethodName])

	makeProjectRestCreateHandler(r, endpoints, options[ProjectRestCreateMethodName])

	makeProjectRestCreateManyHandler(r, endpoints, options[ProjectRestCreateManyMethodName])

	makeProjectRestCreateServicesSliceByProjectIdHandler(r, endpoints, options[ProjectRestCreateServicesSliceByProjectIdMethodName])

	makeProjectRestDeleteByIdHandler(r, endpoints, options[ProjectRestDeleteByIdMethodName])

	makeProjectRestDeleteManyHandler(r, endpoints, options[ProjectRestDeleteManyMethodName])

	makeProjectRestGetByIdHandler(r, endpoints, options[ProjectRestGetByIdMethodName])

	makeProjectRestGetServicesSliceByProjectIdHandler(r, endpoints, options[ProjectRestGetServicesSliceByProjectIdMethodName])

	makeProjectRestUpdateByIdHandler(r, endpoints, options[ProjectRestUpdateByIdMethodName])

	makeProjectRestUpdateManyHandler(r, endpoints, options[ProjectRestUpdateManyMethodName])

	return HttpHandler{}
}

type SwagResponse struct {
	TraceId string      `json:"traceId"`
	Status  int         `json:"status"`
	Data    interface{} `json:"data"`
}

type ProjectRestByQueriesAllQuerySwag ent.ProjectQueryOps

// @Accept  json
// @Tags ProjectService
// @Param query query ProjectRestByQueriesAllQuerySwag false " "
// @Success 200 {object} SwagResponse{data=ent.ProjectRestByQueriesAllRes}
// @Router /projects [get]
func makeProjectRestByQueriesAllHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.GET("/projects", http.NewServer(endpoints.ProjectRestByQueriesAllEndpoint, decodeProjectRestByQueriesAllRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeProjectRestByQueriesAllRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ProjectRestByQueriesAllReq
	var err error

	err = ctx.ShouldBindQuery(&req.Query)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ProjectRestCreateBodySwag ent.ProjectBaseCreateReq

// @Accept  json
// @Tags ProjectService
// @Param body body ProjectRestCreateBodySwag true " "
// @Success 200 {object} SwagResponse{data=ent.Project}
// @Router /project [post]
func makeProjectRestCreateHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.POST("/project", http.NewServer(endpoints.ProjectRestCreateEndpoint, decodeProjectRestCreateRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeProjectRestCreateRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ProjectRestCreateReq
	var err error

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ProjectRestCreateManyBodySwag []ent.ProjectBaseCreateReq

// @Accept  json
// @Tags ProjectService
// @Param body body ProjectRestCreateManyBodySwag true " "
// @Success 200 {object} SwagResponse{data=ent.Projects}
// @Router /projects [post]
func makeProjectRestCreateManyHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.POST("/projects", http.NewServer(endpoints.ProjectRestCreateManyEndpoint, decodeProjectRestCreateManyRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeProjectRestCreateManyRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ProjectRestCreateManyReq
	var err error

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ProjectRestCreateServicesSliceByProjectIdBodySwag []ent.ServiceBaseCreateReq

// @Accept  json
// @Tags ProjectService
// @Param body body ProjectRestCreateServicesSliceByProjectIdBodySwag true " "
// @Param projectId path string true " "
// @Success 200 {object} SwagResponse{data=ent.Project}
// @Router /projects/{projectId}/servicesslice [post]
func makeProjectRestCreateServicesSliceByProjectIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.POST("/projects/:projectId/servicesslice", http.NewServer(endpoints.ProjectRestCreateServicesSliceByProjectIdEndpoint, decodeProjectRestCreateServicesSliceByProjectIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeProjectRestCreateServicesSliceByProjectIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ProjectRestCreateServicesSliceByProjectIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags ProjectService
// @Param projectId path string true " "
// @Success 200 {object} SwagResponse{data=bool}
// @Router /projects/{projectId} [delete]
func makeProjectRestDeleteByIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.DELETE("/projects/:projectId", http.NewServer(endpoints.ProjectRestDeleteByIdEndpoint, decodeProjectRestDeleteByIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeProjectRestDeleteByIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ProjectRestDeleteByIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ProjectRestDeleteManyQuerySwag struct {
	Ids []int `json:"ids" form:"ids"`
}

// @Accept  json
// @Tags ProjectService
// @Param query query ProjectRestDeleteManyQuerySwag false " "
// @Success 200 {object} SwagResponse{data=bool}
// @Router /projects [delete]
func makeProjectRestDeleteManyHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.DELETE("/projects", http.NewServer(endpoints.ProjectRestDeleteManyEndpoint, decodeProjectRestDeleteManyRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeProjectRestDeleteManyRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ProjectRestDeleteManyReq
	var err error

	err = ctx.ShouldBindQuery(&req.Query)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags ProjectService
// @Param projectId path string true " "
// @Success 200 {object} SwagResponse{data=ent.ProjectBaseGetRes}
// @Router /projects/{projectId} [get]
func makeProjectRestGetByIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.GET("/projects/:projectId", http.NewServer(endpoints.ProjectRestGetByIdEndpoint, decodeProjectRestGetByIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeProjectRestGetByIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ProjectRestGetByIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ProjectRestGetServicesSliceByProjectIdQuerySwag ent.ServiceQueryOps

// @Accept  json
// @Tags ProjectService
// @Param query query ProjectRestGetServicesSliceByProjectIdQuerySwag false " "
// @Param projectId path string true " "
// @Success 200 {object} SwagResponse{data=ent.ProjectRestGetServicesSliceByProjectIdRes}
// @Router /projects/{projectId}/services [get]
func makeProjectRestGetServicesSliceByProjectIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.GET("/projects/:projectId/services", http.NewServer(endpoints.ProjectRestGetServicesSliceByProjectIdEndpoint, decodeProjectRestGetServicesSliceByProjectIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeProjectRestGetServicesSliceByProjectIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ProjectRestGetServicesSliceByProjectIdReq
	var err error

	err = ctx.ShouldBindQuery(&req.Query)
	if err != nil {
		return nil, err
	}

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ProjectRestUpdateByIdBodySwag ent.ProjectBaseUpdateReq

// @Accept  json
// @Tags ProjectService
// @Param body body ProjectRestUpdateByIdBodySwag true " "
// @Param projectId path string true " "
// @Success 200 {object} SwagResponse{data=ent.Project}
// @Router /projects/{projectId} [put]
func makeProjectRestUpdateByIdHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.PUT("/projects/:projectId", http.NewServer(endpoints.ProjectRestUpdateByIdEndpoint, decodeProjectRestUpdateByIdRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeProjectRestUpdateByIdRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ProjectRestUpdateByIdReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}

type ProjectRestUpdateManyBodySwag []ent.ProjectBaseUpdateReq

// @Accept  json
// @Tags ProjectService
// @Param body body ProjectRestUpdateManyBodySwag true " "
// @Success 200 {object} SwagResponse{data=bool}
// @Router /projects [put]
func makeProjectRestUpdateManyHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.PUT("/projects", http.NewServer(endpoints.ProjectRestUpdateManyEndpoint, decodeProjectRestUpdateManyRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeProjectRestUpdateManyRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req ent.ProjectRestUpdateManyReq
	var err error

	err = ctx.ShouldBindJSON(&req.Body)
	if err != nil {
		return nil, err
	}

	return req, err
}
