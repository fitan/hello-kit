package project

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"fmt"

	ginkHttp "github.com/fitan/gink/transport/http"
	"go.opentelemetry.io/otel/trace"
	"go.uber.org/zap"

	"hello/pkg/ent"
)

// ProjectServiceWithLog implements ProjectService that is instrumented with logging
type ProjectServiceWithLog struct {
	_log  *zap.SugaredLogger
	_base ProjectService
}

// NewProjectServiceWithLog instruments an implementation of the ProjectService with simple logging
func NewProjectServiceWithLog(base ProjectService, log *zap.SugaredLogger) ProjectServiceWithLog {
	return ProjectServiceWithLog{
		_base: base,
		_log:  log,
	}
}

// ProjectRestAddBindServicesByProjectId implements ProjectService
func (_d ProjectServiceWithLog) ProjectRestAddBindServicesByProjectId(ctx context.Context, req ent.ProjectRestAddBindServicesByProjectIdReq) (res string, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling ProjectRestAddBindServicesByProjectId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling ProjectRestAddBindServicesByProjectId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling ProjectRestAddBindServicesByProjectId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling ProjectRestAddBindServicesByProjectId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.ProjectRestAddBindServicesByProjectId(ctx, req)
}

// ProjectRestByQueriesAll implements ProjectService
func (_d ProjectServiceWithLog) ProjectRestByQueriesAll(ctx context.Context, req ent.ProjectRestByQueriesAllReq) (res ent.ProjectRestByQueriesAllRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling ProjectRestByQueriesAll", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling ProjectRestByQueriesAll", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling ProjectRestByQueriesAll", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling ProjectRestByQueriesAll", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.ProjectRestByQueriesAll(ctx, req)
}

// ProjectRestCreate implements ProjectService
func (_d ProjectServiceWithLog) ProjectRestCreate(ctx context.Context, req ent.ProjectRestCreateReq) (res *ent.Project, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling ProjectRestCreate", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling ProjectRestCreate", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling ProjectRestCreate", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling ProjectRestCreate", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.ProjectRestCreate(ctx, req)
}

// ProjectRestCreateMany implements ProjectService
func (_d ProjectServiceWithLog) ProjectRestCreateMany(ctx context.Context, req ent.ProjectRestCreateManyReq) (res ent.Projects, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling ProjectRestCreateMany", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling ProjectRestCreateMany", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling ProjectRestCreateMany", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling ProjectRestCreateMany", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.ProjectRestCreateMany(ctx, req)
}

// ProjectRestCreateServicesByProjectId implements ProjectService
func (_d ProjectServiceWithLog) ProjectRestCreateServicesByProjectId(ctx context.Context, req ent.ProjectRestCreateServicesByProjectIdReq) (res *ent.Project, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling ProjectRestCreateServicesByProjectId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling ProjectRestCreateServicesByProjectId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling ProjectRestCreateServicesByProjectId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling ProjectRestCreateServicesByProjectId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.ProjectRestCreateServicesByProjectId(ctx, req)
}

// ProjectRestDeleteById implements ProjectService
func (_d ProjectServiceWithLog) ProjectRestDeleteById(ctx context.Context, req ent.ProjectRestDeleteByIdReq) (success bool, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling ProjectRestDeleteById", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"success": success,
					"err":     fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling ProjectRestDeleteById", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"success": success,
					"err":     fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling ProjectRestDeleteById", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling ProjectRestDeleteById", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.ProjectRestDeleteById(ctx, req)
}

// ProjectRestDeleteMany implements ProjectService
func (_d ProjectServiceWithLog) ProjectRestDeleteMany(ctx context.Context, req ent.ProjectRestDeleteManyReq) (success bool, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling ProjectRestDeleteMany", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"success": success,
					"err":     fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling ProjectRestDeleteMany", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"success": success,
					"err":     fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling ProjectRestDeleteMany", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling ProjectRestDeleteMany", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.ProjectRestDeleteMany(ctx, req)
}

// ProjectRestDeleteServicesByProjectId implements ProjectService
func (_d ProjectServiceWithLog) ProjectRestDeleteServicesByProjectId(ctx context.Context, req ent.ProjectRestDeleteServicesByProjectIdReq) (res string, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling ProjectRestDeleteServicesByProjectId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling ProjectRestDeleteServicesByProjectId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling ProjectRestDeleteServicesByProjectId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling ProjectRestDeleteServicesByProjectId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.ProjectRestDeleteServicesByProjectId(ctx, req)
}

// ProjectRestGetById implements ProjectService
func (_d ProjectServiceWithLog) ProjectRestGetById(ctx context.Context, req ent.ProjectRestGetByIdReq) (res ent.ProjectBaseGetRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling ProjectRestGetById", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling ProjectRestGetById", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling ProjectRestGetById", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling ProjectRestGetById", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.ProjectRestGetById(ctx, req)
}

// ProjectRestGetServicesByProjectId implements ProjectService
func (_d ProjectServiceWithLog) ProjectRestGetServicesByProjectId(ctx context.Context, req ent.ProjectRestGetServicesByProjectIdReq) (res ent.ProjectRestGetServicesByProjectIdRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling ProjectRestGetServicesByProjectId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling ProjectRestGetServicesByProjectId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling ProjectRestGetServicesByProjectId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling ProjectRestGetServicesByProjectId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.ProjectRestGetServicesByProjectId(ctx, req)
}

// ProjectRestRemoveBindServicesByProjectId implements ProjectService
func (_d ProjectServiceWithLog) ProjectRestRemoveBindServicesByProjectId(ctx context.Context, req ent.ProjectRestRemoveBindServicesByProjectIdReq) (res string, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling ProjectRestRemoveBindServicesByProjectId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling ProjectRestRemoveBindServicesByProjectId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling ProjectRestRemoveBindServicesByProjectId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling ProjectRestRemoveBindServicesByProjectId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.ProjectRestRemoveBindServicesByProjectId(ctx, req)
}

// ProjectRestUpdateBindServicesByProjectId implements ProjectService
func (_d ProjectServiceWithLog) ProjectRestUpdateBindServicesByProjectId(ctx context.Context, req ent.ProjectRestUpdateBindServicesByProjectIdReq) (res string, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling ProjectRestUpdateBindServicesByProjectId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling ProjectRestUpdateBindServicesByProjectId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling ProjectRestUpdateBindServicesByProjectId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling ProjectRestUpdateBindServicesByProjectId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.ProjectRestUpdateBindServicesByProjectId(ctx, req)
}

// ProjectRestUpdateById implements ProjectService
func (_d ProjectServiceWithLog) ProjectRestUpdateById(ctx context.Context, req ent.ProjectRestUpdateByIdReq) (res *ent.Project, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling ProjectRestUpdateById", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling ProjectRestUpdateById", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling ProjectRestUpdateById", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling ProjectRestUpdateById", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.ProjectRestUpdateById(ctx, req)
}

// ProjectRestUpdateMany implements ProjectService
func (_d ProjectServiceWithLog) ProjectRestUpdateMany(ctx context.Context, req ent.ProjectRestUpdateManyReq) (success bool, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling ProjectRestUpdateMany", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"success": success,
					"err":     fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling ProjectRestUpdateMany", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"success": success,
					"err":     fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling ProjectRestUpdateMany", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling ProjectRestUpdateMany", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.ProjectRestUpdateMany(ctx, req)
}
