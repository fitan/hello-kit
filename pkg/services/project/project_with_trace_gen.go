package project

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"encoding/json"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
	semconv "go.opentelemetry.io/otel/semconv/v1.7.0"
	"go.opentelemetry.io/otel/trace"

	"hello/pkg/ent"
)

// ProjectServiceWithTracing implements ProjectService interface instrumented with opentracing spans
type ProjectServiceWithTracing struct {
	ProjectService
}

// NewProjectServiceWithTracing returns ProjectServiceWithTracing
func NewProjectServiceWithTracing(base ProjectService) ProjectService {
	d := ProjectServiceWithTracing{
		ProjectService: base,
	}

	return d
}

// ProjectRestByQueriesAll implements ProjectService
func (_d ProjectServiceWithTracing) ProjectRestByQueriesAll(ctx context.Context, req ent.ProjectRestByQueriesAllReq) (res ent.ProjectRestByQueriesAllRes, err error) {

	var name = "ProjectService.ProjectRestByQueriesAll"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.ProjectRestByQueriesAll(ctx, req)
}

// ProjectRestCreate implements ProjectService
func (_d ProjectServiceWithTracing) ProjectRestCreate(ctx context.Context, req ent.ProjectRestCreateReq) (res *ent.Project, err error) {

	var name = "ProjectService.ProjectRestCreate"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.ProjectRestCreate(ctx, req)
}

// ProjectRestCreateMany implements ProjectService
func (_d ProjectServiceWithTracing) ProjectRestCreateMany(ctx context.Context, req ent.ProjectRestCreateManyReq) (res ent.Projects, err error) {

	var name = "ProjectService.ProjectRestCreateMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.ProjectRestCreateMany(ctx, req)
}

// ProjectRestCreateServicesByProjectId implements ProjectService
func (_d ProjectServiceWithTracing) ProjectRestCreateServicesByProjectId(ctx context.Context, req ent.ProjectRestCreateServicesByProjectIdReq) (res *ent.Project, err error) {

	var name = "ProjectService.ProjectRestCreateServicesByProjectId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.ProjectRestCreateServicesByProjectId(ctx, req)
}

// ProjectRestDeleteById implements ProjectService
func (_d ProjectServiceWithTracing) ProjectRestDeleteById(ctx context.Context, req ent.ProjectRestDeleteByIdReq) (success bool, err error) {

	var name = "ProjectService.ProjectRestDeleteById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"success": success,
					"err":     err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.ProjectRestDeleteById(ctx, req)
}

// ProjectRestDeleteMany implements ProjectService
func (_d ProjectServiceWithTracing) ProjectRestDeleteMany(ctx context.Context, req ent.ProjectRestDeleteManyReq) (success bool, err error) {

	var name = "ProjectService.ProjectRestDeleteMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"success": success,
					"err":     err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.ProjectRestDeleteMany(ctx, req)
}

// ProjectRestGetById implements ProjectService
func (_d ProjectServiceWithTracing) ProjectRestGetById(ctx context.Context, req ent.ProjectRestGetByIdReq) (res ent.ProjectBaseGetRes, err error) {

	var name = "ProjectService.ProjectRestGetById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.ProjectRestGetById(ctx, req)
}

// ProjectRestGetServicesByProjectId implements ProjectService
func (_d ProjectServiceWithTracing) ProjectRestGetServicesByProjectId(ctx context.Context, req ent.ProjectRestGetServicesByProjectIdReq) (res ent.ProjectRestGetServicesByProjectIdRes, err error) {

	var name = "ProjectService.ProjectRestGetServicesByProjectId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.ProjectRestGetServicesByProjectId(ctx, req)
}

// ProjectRestUpdateById implements ProjectService
func (_d ProjectServiceWithTracing) ProjectRestUpdateById(ctx context.Context, req ent.ProjectRestUpdateByIdReq) (res *ent.Project, err error) {

	var name = "ProjectService.ProjectRestUpdateById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.ProjectRestUpdateById(ctx, req)
}

// ProjectRestUpdateMany implements ProjectService
func (_d ProjectServiceWithTracing) ProjectRestUpdateMany(ctx context.Context, req ent.ProjectRestUpdateManyReq) (success bool, err error) {

	var name = "ProjectService.ProjectRestUpdateMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"success": success,
					"err":     err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.ProjectService.ProjectRestUpdateMany(ctx, req)
}
