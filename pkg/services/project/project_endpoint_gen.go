package project

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"

	"go.opentelemetry.io/otel/trace"

	endpoint "github.com/go-kit/kit/endpoint"

	"hello/pkg/ent"
)

const (
	ProjectRestByQueriesAllMethodName = "ProjectRestByQueriesAll"

	ProjectRestCreateMethodName = "ProjectRestCreate"

	ProjectRestCreateManyMethodName = "ProjectRestCreateMany"

	ProjectRestCreateServicesSliceByProjectIdMethodName = "ProjectRestCreateServicesSliceByProjectId"

	ProjectRestDeleteByIdMethodName = "ProjectRestDeleteById"

	ProjectRestDeleteManyMethodName = "ProjectRestDeleteMany"

	ProjectRestGetByIdMethodName = "ProjectRestGetById"

	ProjectRestGetServicesSliceByProjectIdMethodName = "ProjectRestGetServicesSliceByProjectId"

	ProjectRestUpdateByIdMethodName = "ProjectRestUpdateById"

	ProjectRestUpdateManyMethodName = "ProjectRestUpdateMany"
)

type Mws map[string][]endpoint.Middleware

type Endpoints struct {
	ProjectRestByQueriesAllEndpoint endpoint.Endpoint

	ProjectRestCreateEndpoint endpoint.Endpoint

	ProjectRestCreateManyEndpoint endpoint.Endpoint

	ProjectRestCreateServicesSliceByProjectIdEndpoint endpoint.Endpoint

	ProjectRestDeleteByIdEndpoint endpoint.Endpoint

	ProjectRestDeleteManyEndpoint endpoint.Endpoint

	ProjectRestGetByIdEndpoint endpoint.Endpoint

	ProjectRestGetServicesSliceByProjectIdEndpoint endpoint.Endpoint

	ProjectRestUpdateByIdEndpoint endpoint.Endpoint

	ProjectRestUpdateManyEndpoint endpoint.Endpoint
}

func AddEndpointMiddlewareToAllMethods(mw map[string][]endpoint.Middleware, m endpoint.Middleware) {
	methods := []string{

		ProjectRestByQueriesAllMethodName,

		ProjectRestCreateMethodName,

		ProjectRestCreateManyMethodName,

		ProjectRestCreateServicesSliceByProjectIdMethodName,

		ProjectRestDeleteByIdMethodName,

		ProjectRestDeleteManyMethodName,

		ProjectRestGetByIdMethodName,

		ProjectRestGetServicesSliceByProjectIdMethodName,

		ProjectRestUpdateByIdMethodName,

		ProjectRestUpdateManyMethodName,
	}
	for _, v := range methods {
		mw[v] = append(mw[v], m)
	}
}

func AddEndpointMiddlewareToAllMethodsWithMethodName(mw map[string][]endpoint.Middleware, m func(n string) endpoint.Middleware) {
	methods := []string{

		ProjectRestByQueriesAllMethodName,

		ProjectRestCreateMethodName,

		ProjectRestCreateManyMethodName,

		ProjectRestCreateServicesSliceByProjectIdMethodName,

		ProjectRestDeleteByIdMethodName,

		ProjectRestDeleteManyMethodName,

		ProjectRestGetByIdMethodName,

		ProjectRestGetServicesSliceByProjectIdMethodName,

		ProjectRestUpdateByIdMethodName,

		ProjectRestUpdateManyMethodName,
	}
	for _, v := range methods {
		mw[v] = append(mw[v], m(v))
	}
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func NewEndpoints(s ProjectService, mdw Mws) Endpoints {
	eps := Endpoints{

		ProjectRestByQueriesAllEndpoint: MakeProjectRestByQueriesAllEndpoint(s),

		ProjectRestCreateEndpoint: MakeProjectRestCreateEndpoint(s),

		ProjectRestCreateManyEndpoint: MakeProjectRestCreateManyEndpoint(s),

		ProjectRestCreateServicesSliceByProjectIdEndpoint: MakeProjectRestCreateServicesSliceByProjectIdEndpoint(s),

		ProjectRestDeleteByIdEndpoint: MakeProjectRestDeleteByIdEndpoint(s),

		ProjectRestDeleteManyEndpoint: MakeProjectRestDeleteManyEndpoint(s),

		ProjectRestGetByIdEndpoint: MakeProjectRestGetByIdEndpoint(s),

		ProjectRestGetServicesSliceByProjectIdEndpoint: MakeProjectRestGetServicesSliceByProjectIdEndpoint(s),

		ProjectRestUpdateByIdEndpoint: MakeProjectRestUpdateByIdEndpoint(s),

		ProjectRestUpdateManyEndpoint: MakeProjectRestUpdateManyEndpoint(s),
	}

	for _, m := range mdw[ProjectRestByQueriesAllMethodName] {
		eps.ProjectRestByQueriesAllEndpoint = m(eps.ProjectRestByQueriesAllEndpoint)
	}

	for _, m := range mdw[ProjectRestCreateMethodName] {
		eps.ProjectRestCreateEndpoint = m(eps.ProjectRestCreateEndpoint)
	}

	for _, m := range mdw[ProjectRestCreateManyMethodName] {
		eps.ProjectRestCreateManyEndpoint = m(eps.ProjectRestCreateManyEndpoint)
	}

	for _, m := range mdw[ProjectRestCreateServicesSliceByProjectIdMethodName] {
		eps.ProjectRestCreateServicesSliceByProjectIdEndpoint = m(eps.ProjectRestCreateServicesSliceByProjectIdEndpoint)
	}

	for _, m := range mdw[ProjectRestDeleteByIdMethodName] {
		eps.ProjectRestDeleteByIdEndpoint = m(eps.ProjectRestDeleteByIdEndpoint)
	}

	for _, m := range mdw[ProjectRestDeleteManyMethodName] {
		eps.ProjectRestDeleteManyEndpoint = m(eps.ProjectRestDeleteManyEndpoint)
	}

	for _, m := range mdw[ProjectRestGetByIdMethodName] {
		eps.ProjectRestGetByIdEndpoint = m(eps.ProjectRestGetByIdEndpoint)
	}

	for _, m := range mdw[ProjectRestGetServicesSliceByProjectIdMethodName] {
		eps.ProjectRestGetServicesSliceByProjectIdEndpoint = m(eps.ProjectRestGetServicesSliceByProjectIdEndpoint)
	}

	for _, m := range mdw[ProjectRestUpdateByIdMethodName] {
		eps.ProjectRestUpdateByIdEndpoint = m(eps.ProjectRestUpdateByIdEndpoint)
	}

	for _, m := range mdw[ProjectRestUpdateManyMethodName] {
		eps.ProjectRestUpdateManyEndpoint = m(eps.ProjectRestUpdateManyEndpoint)
	}

	return eps
}

func MakeProjectRestByQueriesAllEndpoint(s ProjectService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ProjectRestByQueriesAllReq)
		rs, err := s.ProjectRestByQueriesAll(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeProjectRestCreateEndpoint(s ProjectService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ProjectRestCreateReq)
		rs, err := s.ProjectRestCreate(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeProjectRestCreateManyEndpoint(s ProjectService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ProjectRestCreateManyReq)
		rs, err := s.ProjectRestCreateMany(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeProjectRestCreateServicesSliceByProjectIdEndpoint(s ProjectService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ProjectRestCreateServicesSliceByProjectIdReq)
		rs, err := s.ProjectRestCreateServicesSliceByProjectId(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeProjectRestDeleteByIdEndpoint(s ProjectService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ProjectRestDeleteByIdReq)
		rs, err := s.ProjectRestDeleteById(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeProjectRestDeleteManyEndpoint(s ProjectService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ProjectRestDeleteManyReq)
		rs, err := s.ProjectRestDeleteMany(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeProjectRestGetByIdEndpoint(s ProjectService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ProjectRestGetByIdReq)
		rs, err := s.ProjectRestGetById(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeProjectRestGetServicesSliceByProjectIdEndpoint(s ProjectService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ProjectRestGetServicesSliceByProjectIdReq)
		rs, err := s.ProjectRestGetServicesSliceByProjectId(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeProjectRestUpdateByIdEndpoint(s ProjectService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ProjectRestUpdateByIdReq)
		rs, err := s.ProjectRestUpdateById(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeProjectRestUpdateManyEndpoint(s ProjectService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.ProjectRestUpdateManyReq)
		rs, err := s.ProjectRestUpdateMany(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}
