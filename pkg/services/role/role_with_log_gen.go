package role

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"fmt"

	ginkHttp "github.com/fitan/gink/transport/http"
	"go.opentelemetry.io/otel/trace"
	"go.uber.org/zap"

	"hello/pkg/ent"
)

// RoleServiceWithLog implements RoleService that is instrumented with logging
type RoleServiceWithLog struct {
	_log  *zap.SugaredLogger
	_base RoleService
}

// NewRoleServiceWithLog instruments an implementation of the RoleService with simple logging
func NewRoleServiceWithLog(base RoleService, log *zap.SugaredLogger) RoleServiceWithLog {
	return RoleServiceWithLog{
		_base: base,
		_log:  log,
	}
}

// RoleRestAddBindResourcesByRoleId implements RoleService
func (_d RoleServiceWithLog) RoleRestAddBindResourcesByRoleId(ctx context.Context, req ent.RoleRestAddBindResourcesByRoleIdReq) (res string, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RoleRestAddBindResourcesByRoleId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RoleRestAddBindResourcesByRoleId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RoleRestAddBindResourcesByRoleId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RoleRestAddBindResourcesByRoleId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RoleRestAddBindResourcesByRoleId(ctx, req)
}

// RoleRestByQueriesAll implements RoleService
func (_d RoleServiceWithLog) RoleRestByQueriesAll(ctx context.Context, req ent.RoleRestByQueriesAllReq) (res ent.RoleRestByQueriesAllRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RoleRestByQueriesAll", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RoleRestByQueriesAll", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RoleRestByQueriesAll", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RoleRestByQueriesAll", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RoleRestByQueriesAll(ctx, req)
}

// RoleRestCreate implements RoleService
func (_d RoleServiceWithLog) RoleRestCreate(ctx context.Context, req ent.RoleRestCreateReq) (res *ent.Role, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RoleRestCreate", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RoleRestCreate", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RoleRestCreate", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RoleRestCreate", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RoleRestCreate(ctx, req)
}

// RoleRestCreateMany implements RoleService
func (_d RoleServiceWithLog) RoleRestCreateMany(ctx context.Context, req ent.RoleRestCreateManyReq) (res ent.Roles, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RoleRestCreateMany", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RoleRestCreateMany", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RoleRestCreateMany", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RoleRestCreateMany", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RoleRestCreateMany(ctx, req)
}

// RoleRestCreateResourcesByRoleId implements RoleService
func (_d RoleServiceWithLog) RoleRestCreateResourcesByRoleId(ctx context.Context, req ent.RoleRestCreateResourcesByRoleIdReq) (res *ent.Role, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RoleRestCreateResourcesByRoleId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RoleRestCreateResourcesByRoleId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RoleRestCreateResourcesByRoleId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RoleRestCreateResourcesByRoleId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RoleRestCreateResourcesByRoleId(ctx, req)
}

// RoleRestDeleteById implements RoleService
func (_d RoleServiceWithLog) RoleRestDeleteById(ctx context.Context, req ent.RoleRestDeleteByIdReq) (success bool, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RoleRestDeleteById", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"success": success,
					"err":     fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RoleRestDeleteById", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"success": success,
					"err":     fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RoleRestDeleteById", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RoleRestDeleteById", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RoleRestDeleteById(ctx, req)
}

// RoleRestDeleteMany implements RoleService
func (_d RoleServiceWithLog) RoleRestDeleteMany(ctx context.Context, req ent.RoleRestDeleteManyReq) (success bool, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RoleRestDeleteMany", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"success": success,
					"err":     fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RoleRestDeleteMany", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"success": success,
					"err":     fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RoleRestDeleteMany", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RoleRestDeleteMany", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RoleRestDeleteMany(ctx, req)
}

// RoleRestDeleteResourcesByRoleId implements RoleService
func (_d RoleServiceWithLog) RoleRestDeleteResourcesByRoleId(ctx context.Context, req ent.RoleRestDeleteResourcesByRoleIdReq) (res string, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RoleRestDeleteResourcesByRoleId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RoleRestDeleteResourcesByRoleId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RoleRestDeleteResourcesByRoleId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RoleRestDeleteResourcesByRoleId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RoleRestDeleteResourcesByRoleId(ctx, req)
}

// RoleRestGetById implements RoleService
func (_d RoleServiceWithLog) RoleRestGetById(ctx context.Context, req ent.RoleRestGetByIdReq) (res ent.RoleBaseGetRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RoleRestGetById", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RoleRestGetById", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RoleRestGetById", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RoleRestGetById", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RoleRestGetById(ctx, req)
}

// RoleRestGetResourcesByRoleId implements RoleService
func (_d RoleServiceWithLog) RoleRestGetResourcesByRoleId(ctx context.Context, req ent.RoleRestGetResourcesByRoleIdReq) (res ent.RoleRestGetResourcesByRoleIdRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RoleRestGetResourcesByRoleId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RoleRestGetResourcesByRoleId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RoleRestGetResourcesByRoleId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RoleRestGetResourcesByRoleId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RoleRestGetResourcesByRoleId(ctx, req)
}

// RoleRestRemoveBindResourcesByRoleId implements RoleService
func (_d RoleServiceWithLog) RoleRestRemoveBindResourcesByRoleId(ctx context.Context, req ent.RoleRestRemoveBindResourcesByRoleIdReq) (res string, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RoleRestRemoveBindResourcesByRoleId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RoleRestRemoveBindResourcesByRoleId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RoleRestRemoveBindResourcesByRoleId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RoleRestRemoveBindResourcesByRoleId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RoleRestRemoveBindResourcesByRoleId(ctx, req)
}

// RoleRestUpdateBindResourcesByRoleId implements RoleService
func (_d RoleServiceWithLog) RoleRestUpdateBindResourcesByRoleId(ctx context.Context, req ent.RoleRestUpdateBindResourcesByRoleIdReq) (res string, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RoleRestUpdateBindResourcesByRoleId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RoleRestUpdateBindResourcesByRoleId", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RoleRestUpdateBindResourcesByRoleId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RoleRestUpdateBindResourcesByRoleId", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RoleRestUpdateBindResourcesByRoleId(ctx, req)
}

// RoleRestUpdateById implements RoleService
func (_d RoleServiceWithLog) RoleRestUpdateById(ctx context.Context, req ent.RoleRestUpdateByIdReq) (res *ent.Role, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RoleRestUpdateById", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RoleRestUpdateById", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"res": res,
					"err": fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RoleRestUpdateById", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RoleRestUpdateById", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RoleRestUpdateById(ctx, req)
}

// RoleRestUpdateMany implements RoleService
func (_d RoleServiceWithLog) RoleRestUpdateMany(ctx context.Context, req ent.RoleRestUpdateManyReq) (success bool, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)

	defer func() {
		if debug {
			if err == nil {
				_log.Infow("with_log calling RoleRestUpdateMany", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"success": success,
					"err":     fmt.Sprintf("%v", err)})
			}

			if err != nil {
				_log.Errorw("with_log calling RoleRestUpdateMany", "params", map[string]interface{}{
					"req": req}, "results", map[string]interface{}{
					"success": success,
					"err":     fmt.Sprintf("%v", err)})
			}

		}
		if !debug && err == nil {
			_log.Debugw("with_log calling RoleRestUpdateMany", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     fmt.Sprintf("%v", err)})
		}

		if err != nil && !debug {
			_log.Errorw("with_log calling RoleRestUpdateMany", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"success": success,
				"err":     fmt.Sprintf("%v", err)})
		}
	}()
	return _d._base.RoleRestUpdateMany(ctx, req)
}
