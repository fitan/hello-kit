package role

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"

	"go.opentelemetry.io/otel/trace"

	endpoint "github.com/go-kit/kit/endpoint"

	"hello/pkg/ent"
)

const (
	RoleRestAddBindResourcesByRoleIdMethodName = "RoleRestAddBindResourcesByRoleId"

	RoleRestByQueriesAllMethodName = "RoleRestByQueriesAll"

	RoleRestCreateMethodName = "RoleRestCreate"

	RoleRestCreateManyMethodName = "RoleRestCreateMany"

	RoleRestCreateResourcesByRoleIdMethodName = "RoleRestCreateResourcesByRoleId"

	RoleRestDeleteByIdMethodName = "RoleRestDeleteById"

	RoleRestDeleteManyMethodName = "RoleRestDeleteMany"

	RoleRestDeleteResourcesByRoleIdMethodName = "RoleRestDeleteResourcesByRoleId"

	RoleRestGetByIdMethodName = "RoleRestGetById"

	RoleRestGetResourcesByRoleIdMethodName = "RoleRestGetResourcesByRoleId"

	RoleRestRemoveBindResourcesByRoleIdMethodName = "RoleRestRemoveBindResourcesByRoleId"

	RoleRestUpdateBindResourcesByRoleIdMethodName = "RoleRestUpdateBindResourcesByRoleId"

	RoleRestUpdateByIdMethodName = "RoleRestUpdateById"

	RoleRestUpdateManyMethodName = "RoleRestUpdateMany"
)

type Mws map[string][]endpoint.Middleware

type Endpoints struct {
	RoleRestAddBindResourcesByRoleIdEndpoint endpoint.Endpoint

	RoleRestByQueriesAllEndpoint endpoint.Endpoint

	RoleRestCreateEndpoint endpoint.Endpoint

	RoleRestCreateManyEndpoint endpoint.Endpoint

	RoleRestCreateResourcesByRoleIdEndpoint endpoint.Endpoint

	RoleRestDeleteByIdEndpoint endpoint.Endpoint

	RoleRestDeleteManyEndpoint endpoint.Endpoint

	RoleRestDeleteResourcesByRoleIdEndpoint endpoint.Endpoint

	RoleRestGetByIdEndpoint endpoint.Endpoint

	RoleRestGetResourcesByRoleIdEndpoint endpoint.Endpoint

	RoleRestRemoveBindResourcesByRoleIdEndpoint endpoint.Endpoint

	RoleRestUpdateBindResourcesByRoleIdEndpoint endpoint.Endpoint

	RoleRestUpdateByIdEndpoint endpoint.Endpoint

	RoleRestUpdateManyEndpoint endpoint.Endpoint
}

func AddEndpointMiddlewareToAllMethods(mw map[string][]endpoint.Middleware, m endpoint.Middleware) {
	methods := []string{

		RoleRestAddBindResourcesByRoleIdMethodName,

		RoleRestByQueriesAllMethodName,

		RoleRestCreateMethodName,

		RoleRestCreateManyMethodName,

		RoleRestCreateResourcesByRoleIdMethodName,

		RoleRestDeleteByIdMethodName,

		RoleRestDeleteManyMethodName,

		RoleRestDeleteResourcesByRoleIdMethodName,

		RoleRestGetByIdMethodName,

		RoleRestGetResourcesByRoleIdMethodName,

		RoleRestRemoveBindResourcesByRoleIdMethodName,

		RoleRestUpdateBindResourcesByRoleIdMethodName,

		RoleRestUpdateByIdMethodName,

		RoleRestUpdateManyMethodName,
	}
	for _, v := range methods {
		mw[v] = append(mw[v], m)
	}
}

func AddEndpointMiddlewareToAllMethodsWithMethodName(mw map[string][]endpoint.Middleware, m func(n string) endpoint.Middleware) {
	methods := []string{

		RoleRestAddBindResourcesByRoleIdMethodName,

		RoleRestByQueriesAllMethodName,

		RoleRestCreateMethodName,

		RoleRestCreateManyMethodName,

		RoleRestCreateResourcesByRoleIdMethodName,

		RoleRestDeleteByIdMethodName,

		RoleRestDeleteManyMethodName,

		RoleRestDeleteResourcesByRoleIdMethodName,

		RoleRestGetByIdMethodName,

		RoleRestGetResourcesByRoleIdMethodName,

		RoleRestRemoveBindResourcesByRoleIdMethodName,

		RoleRestUpdateBindResourcesByRoleIdMethodName,

		RoleRestUpdateByIdMethodName,

		RoleRestUpdateManyMethodName,
	}
	for _, v := range methods {
		mw[v] = append(mw[v], m(v))
	}
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func NewEndpoints(s RoleService, mdw Mws) Endpoints {
	eps := Endpoints{

		RoleRestAddBindResourcesByRoleIdEndpoint: MakeRoleRestAddBindResourcesByRoleIdEndpoint(s),

		RoleRestByQueriesAllEndpoint: MakeRoleRestByQueriesAllEndpoint(s),

		RoleRestCreateEndpoint: MakeRoleRestCreateEndpoint(s),

		RoleRestCreateManyEndpoint: MakeRoleRestCreateManyEndpoint(s),

		RoleRestCreateResourcesByRoleIdEndpoint: MakeRoleRestCreateResourcesByRoleIdEndpoint(s),

		RoleRestDeleteByIdEndpoint: MakeRoleRestDeleteByIdEndpoint(s),

		RoleRestDeleteManyEndpoint: MakeRoleRestDeleteManyEndpoint(s),

		RoleRestDeleteResourcesByRoleIdEndpoint: MakeRoleRestDeleteResourcesByRoleIdEndpoint(s),

		RoleRestGetByIdEndpoint: MakeRoleRestGetByIdEndpoint(s),

		RoleRestGetResourcesByRoleIdEndpoint: MakeRoleRestGetResourcesByRoleIdEndpoint(s),

		RoleRestRemoveBindResourcesByRoleIdEndpoint: MakeRoleRestRemoveBindResourcesByRoleIdEndpoint(s),

		RoleRestUpdateBindResourcesByRoleIdEndpoint: MakeRoleRestUpdateBindResourcesByRoleIdEndpoint(s),

		RoleRestUpdateByIdEndpoint: MakeRoleRestUpdateByIdEndpoint(s),

		RoleRestUpdateManyEndpoint: MakeRoleRestUpdateManyEndpoint(s),
	}

	for _, m := range mdw[RoleRestAddBindResourcesByRoleIdMethodName] {
		eps.RoleRestAddBindResourcesByRoleIdEndpoint = m(eps.RoleRestAddBindResourcesByRoleIdEndpoint)
	}

	for _, m := range mdw[RoleRestByQueriesAllMethodName] {
		eps.RoleRestByQueriesAllEndpoint = m(eps.RoleRestByQueriesAllEndpoint)
	}

	for _, m := range mdw[RoleRestCreateMethodName] {
		eps.RoleRestCreateEndpoint = m(eps.RoleRestCreateEndpoint)
	}

	for _, m := range mdw[RoleRestCreateManyMethodName] {
		eps.RoleRestCreateManyEndpoint = m(eps.RoleRestCreateManyEndpoint)
	}

	for _, m := range mdw[RoleRestCreateResourcesByRoleIdMethodName] {
		eps.RoleRestCreateResourcesByRoleIdEndpoint = m(eps.RoleRestCreateResourcesByRoleIdEndpoint)
	}

	for _, m := range mdw[RoleRestDeleteByIdMethodName] {
		eps.RoleRestDeleteByIdEndpoint = m(eps.RoleRestDeleteByIdEndpoint)
	}

	for _, m := range mdw[RoleRestDeleteManyMethodName] {
		eps.RoleRestDeleteManyEndpoint = m(eps.RoleRestDeleteManyEndpoint)
	}

	for _, m := range mdw[RoleRestDeleteResourcesByRoleIdMethodName] {
		eps.RoleRestDeleteResourcesByRoleIdEndpoint = m(eps.RoleRestDeleteResourcesByRoleIdEndpoint)
	}

	for _, m := range mdw[RoleRestGetByIdMethodName] {
		eps.RoleRestGetByIdEndpoint = m(eps.RoleRestGetByIdEndpoint)
	}

	for _, m := range mdw[RoleRestGetResourcesByRoleIdMethodName] {
		eps.RoleRestGetResourcesByRoleIdEndpoint = m(eps.RoleRestGetResourcesByRoleIdEndpoint)
	}

	for _, m := range mdw[RoleRestRemoveBindResourcesByRoleIdMethodName] {
		eps.RoleRestRemoveBindResourcesByRoleIdEndpoint = m(eps.RoleRestRemoveBindResourcesByRoleIdEndpoint)
	}

	for _, m := range mdw[RoleRestUpdateBindResourcesByRoleIdMethodName] {
		eps.RoleRestUpdateBindResourcesByRoleIdEndpoint = m(eps.RoleRestUpdateBindResourcesByRoleIdEndpoint)
	}

	for _, m := range mdw[RoleRestUpdateByIdMethodName] {
		eps.RoleRestUpdateByIdEndpoint = m(eps.RoleRestUpdateByIdEndpoint)
	}

	for _, m := range mdw[RoleRestUpdateManyMethodName] {
		eps.RoleRestUpdateManyEndpoint = m(eps.RoleRestUpdateManyEndpoint)
	}

	return eps
}

func MakeRoleRestAddBindResourcesByRoleIdEndpoint(s RoleService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.RoleRestAddBindResourcesByRoleIdReq)
		rs, err := s.RoleRestAddBindResourcesByRoleId(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeRoleRestByQueriesAllEndpoint(s RoleService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.RoleRestByQueriesAllReq)
		rs, err := s.RoleRestByQueriesAll(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeRoleRestCreateEndpoint(s RoleService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.RoleRestCreateReq)
		rs, err := s.RoleRestCreate(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeRoleRestCreateManyEndpoint(s RoleService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.RoleRestCreateManyReq)
		rs, err := s.RoleRestCreateMany(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeRoleRestCreateResourcesByRoleIdEndpoint(s RoleService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.RoleRestCreateResourcesByRoleIdReq)
		rs, err := s.RoleRestCreateResourcesByRoleId(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeRoleRestDeleteByIdEndpoint(s RoleService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.RoleRestDeleteByIdReq)
		rs, err := s.RoleRestDeleteById(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeRoleRestDeleteManyEndpoint(s RoleService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.RoleRestDeleteManyReq)
		rs, err := s.RoleRestDeleteMany(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeRoleRestDeleteResourcesByRoleIdEndpoint(s RoleService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.RoleRestDeleteResourcesByRoleIdReq)
		rs, err := s.RoleRestDeleteResourcesByRoleId(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeRoleRestGetByIdEndpoint(s RoleService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.RoleRestGetByIdReq)
		rs, err := s.RoleRestGetById(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeRoleRestGetResourcesByRoleIdEndpoint(s RoleService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.RoleRestGetResourcesByRoleIdReq)
		rs, err := s.RoleRestGetResourcesByRoleId(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeRoleRestRemoveBindResourcesByRoleIdEndpoint(s RoleService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.RoleRestRemoveBindResourcesByRoleIdReq)
		rs, err := s.RoleRestRemoveBindResourcesByRoleId(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeRoleRestUpdateBindResourcesByRoleIdEndpoint(s RoleService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.RoleRestUpdateBindResourcesByRoleIdReq)
		rs, err := s.RoleRestUpdateBindResourcesByRoleId(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeRoleRestUpdateByIdEndpoint(s RoleService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.RoleRestUpdateByIdReq)
		rs, err := s.RoleRestUpdateById(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}

func MakeRoleRestUpdateManyEndpoint(s RoleService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var err error
		result := make(map[string]interface{}, 0)
		defer func() {
			if err != nil {
				result["status"] = 500
			}
			result["status"] = 0
		}()
		req := request.(ent.RoleRestUpdateManyReq)
		rs, err := s.RoleRestUpdateMany(ctx, req)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}
