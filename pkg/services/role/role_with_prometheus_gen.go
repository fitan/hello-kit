package role

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"

	"hello/pkg/ent"
)

// RoleServiceWithPrometheus implements RoleService interface with all methods wrapped
// with Prometheus metrics
type RoleServiceWithPrometheus struct {
	base         RoleService
	instanceName string
}

var roleserviceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "services_role_duration_seconds",
		Help:       "roleservice runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"})

// NewRoleServiceWithPrometheus returns an instance of the RoleService decorated with prometheus summary metric
func NewRoleServiceWithPrometheus(base RoleService) RoleServiceWithPrometheus {
	return RoleServiceWithPrometheus{
		base:         base,
		instanceName: "roleservice",
	}
}

// RoleRestAddBindResourcesByRoleId implements RoleService
func (_d RoleServiceWithPrometheus) RoleRestAddBindResourcesByRoleId(ctx context.Context, req ent.RoleRestAddBindResourcesByRoleIdReq) (res string, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		roleserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RoleRestAddBindResourcesByRoleId", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RoleRestAddBindResourcesByRoleId(ctx, req)
}

// RoleRestByQueriesAll implements RoleService
func (_d RoleServiceWithPrometheus) RoleRestByQueriesAll(ctx context.Context, req ent.RoleRestByQueriesAllReq) (res ent.RoleRestByQueriesAllRes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		roleserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RoleRestByQueriesAll", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RoleRestByQueriesAll(ctx, req)
}

// RoleRestCreate implements RoleService
func (_d RoleServiceWithPrometheus) RoleRestCreate(ctx context.Context, req ent.RoleRestCreateReq) (res *ent.Role, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		roleserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RoleRestCreate", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RoleRestCreate(ctx, req)
}

// RoleRestCreateMany implements RoleService
func (_d RoleServiceWithPrometheus) RoleRestCreateMany(ctx context.Context, req ent.RoleRestCreateManyReq) (res ent.Roles, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		roleserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RoleRestCreateMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RoleRestCreateMany(ctx, req)
}

// RoleRestCreateResourcesByRoleId implements RoleService
func (_d RoleServiceWithPrometheus) RoleRestCreateResourcesByRoleId(ctx context.Context, req ent.RoleRestCreateResourcesByRoleIdReq) (res *ent.Role, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		roleserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RoleRestCreateResourcesByRoleId", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RoleRestCreateResourcesByRoleId(ctx, req)
}

// RoleRestDeleteById implements RoleService
func (_d RoleServiceWithPrometheus) RoleRestDeleteById(ctx context.Context, req ent.RoleRestDeleteByIdReq) (success bool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		roleserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RoleRestDeleteById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RoleRestDeleteById(ctx, req)
}

// RoleRestDeleteMany implements RoleService
func (_d RoleServiceWithPrometheus) RoleRestDeleteMany(ctx context.Context, req ent.RoleRestDeleteManyReq) (success bool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		roleserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RoleRestDeleteMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RoleRestDeleteMany(ctx, req)
}

// RoleRestDeleteResourcesByRoleId implements RoleService
func (_d RoleServiceWithPrometheus) RoleRestDeleteResourcesByRoleId(ctx context.Context, req ent.RoleRestDeleteResourcesByRoleIdReq) (res string, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		roleserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RoleRestDeleteResourcesByRoleId", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RoleRestDeleteResourcesByRoleId(ctx, req)
}

// RoleRestGetById implements RoleService
func (_d RoleServiceWithPrometheus) RoleRestGetById(ctx context.Context, req ent.RoleRestGetByIdReq) (res ent.RoleBaseGetRes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		roleserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RoleRestGetById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RoleRestGetById(ctx, req)
}

// RoleRestGetResourcesByRoleId implements RoleService
func (_d RoleServiceWithPrometheus) RoleRestGetResourcesByRoleId(ctx context.Context, req ent.RoleRestGetResourcesByRoleIdReq) (res ent.RoleRestGetResourcesByRoleIdRes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		roleserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RoleRestGetResourcesByRoleId", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RoleRestGetResourcesByRoleId(ctx, req)
}

// RoleRestRemoveBindResourcesByRoleId implements RoleService
func (_d RoleServiceWithPrometheus) RoleRestRemoveBindResourcesByRoleId(ctx context.Context, req ent.RoleRestRemoveBindResourcesByRoleIdReq) (res string, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		roleserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RoleRestRemoveBindResourcesByRoleId", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RoleRestRemoveBindResourcesByRoleId(ctx, req)
}

// RoleRestUpdateBindResourcesByRoleId implements RoleService
func (_d RoleServiceWithPrometheus) RoleRestUpdateBindResourcesByRoleId(ctx context.Context, req ent.RoleRestUpdateBindResourcesByRoleIdReq) (res string, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		roleserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RoleRestUpdateBindResourcesByRoleId", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RoleRestUpdateBindResourcesByRoleId(ctx, req)
}

// RoleRestUpdateById implements RoleService
func (_d RoleServiceWithPrometheus) RoleRestUpdateById(ctx context.Context, req ent.RoleRestUpdateByIdReq) (res *ent.Role, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		roleserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RoleRestUpdateById", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RoleRestUpdateById(ctx, req)
}

// RoleRestUpdateMany implements RoleService
func (_d RoleServiceWithPrometheus) RoleRestUpdateMany(ctx context.Context, req ent.RoleRestUpdateManyReq) (success bool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		roleserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "RoleRestUpdateMany", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RoleRestUpdateMany(ctx, req)
}
