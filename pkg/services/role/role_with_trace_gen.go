package role

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"encoding/json"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
	semconv "go.opentelemetry.io/otel/semconv/v1.7.0"
	"go.opentelemetry.io/otel/trace"

	"hello/pkg/ent"
)

// RoleServiceWithTracing implements RoleService interface instrumented with opentracing spans
type RoleServiceWithTracing struct {
	RoleService
}

// NewRoleServiceWithTracing returns RoleServiceWithTracing
func NewRoleServiceWithTracing(base RoleService) RoleService {
	d := RoleServiceWithTracing{
		RoleService: base,
	}

	return d
}

// RoleRestAddBindResourcesByRoleId implements RoleService
func (_d RoleServiceWithTracing) RoleRestAddBindResourcesByRoleId(ctx context.Context, req ent.RoleRestAddBindResourcesByRoleIdReq) (res string, err error) {

	var name = "RoleService.RoleRestAddBindResourcesByRoleId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.RoleService.RoleRestAddBindResourcesByRoleId(ctx, req)
}

// RoleRestByQueriesAll implements RoleService
func (_d RoleServiceWithTracing) RoleRestByQueriesAll(ctx context.Context, req ent.RoleRestByQueriesAllReq) (res ent.RoleRestByQueriesAllRes, err error) {

	var name = "RoleService.RoleRestByQueriesAll"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.RoleService.RoleRestByQueriesAll(ctx, req)
}

// RoleRestCreate implements RoleService
func (_d RoleServiceWithTracing) RoleRestCreate(ctx context.Context, req ent.RoleRestCreateReq) (res *ent.Role, err error) {

	var name = "RoleService.RoleRestCreate"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.RoleService.RoleRestCreate(ctx, req)
}

// RoleRestCreateMany implements RoleService
func (_d RoleServiceWithTracing) RoleRestCreateMany(ctx context.Context, req ent.RoleRestCreateManyReq) (res ent.Roles, err error) {

	var name = "RoleService.RoleRestCreateMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.RoleService.RoleRestCreateMany(ctx, req)
}

// RoleRestCreateResourcesByRoleId implements RoleService
func (_d RoleServiceWithTracing) RoleRestCreateResourcesByRoleId(ctx context.Context, req ent.RoleRestCreateResourcesByRoleIdReq) (res *ent.Role, err error) {

	var name = "RoleService.RoleRestCreateResourcesByRoleId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.RoleService.RoleRestCreateResourcesByRoleId(ctx, req)
}

// RoleRestDeleteById implements RoleService
func (_d RoleServiceWithTracing) RoleRestDeleteById(ctx context.Context, req ent.RoleRestDeleteByIdReq) (success bool, err error) {

	var name = "RoleService.RoleRestDeleteById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"success": success,
					"err":     err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.RoleService.RoleRestDeleteById(ctx, req)
}

// RoleRestDeleteMany implements RoleService
func (_d RoleServiceWithTracing) RoleRestDeleteMany(ctx context.Context, req ent.RoleRestDeleteManyReq) (success bool, err error) {

	var name = "RoleService.RoleRestDeleteMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"success": success,
					"err":     err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.RoleService.RoleRestDeleteMany(ctx, req)
}

// RoleRestDeleteResourcesByRoleId implements RoleService
func (_d RoleServiceWithTracing) RoleRestDeleteResourcesByRoleId(ctx context.Context, req ent.RoleRestDeleteResourcesByRoleIdReq) (res string, err error) {

	var name = "RoleService.RoleRestDeleteResourcesByRoleId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.RoleService.RoleRestDeleteResourcesByRoleId(ctx, req)
}

// RoleRestGetById implements RoleService
func (_d RoleServiceWithTracing) RoleRestGetById(ctx context.Context, req ent.RoleRestGetByIdReq) (res ent.RoleBaseGetRes, err error) {

	var name = "RoleService.RoleRestGetById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.RoleService.RoleRestGetById(ctx, req)
}

// RoleRestGetResourcesByRoleId implements RoleService
func (_d RoleServiceWithTracing) RoleRestGetResourcesByRoleId(ctx context.Context, req ent.RoleRestGetResourcesByRoleIdReq) (res ent.RoleRestGetResourcesByRoleIdRes, err error) {

	var name = "RoleService.RoleRestGetResourcesByRoleId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.RoleService.RoleRestGetResourcesByRoleId(ctx, req)
}

// RoleRestRemoveBindResourcesByRoleId implements RoleService
func (_d RoleServiceWithTracing) RoleRestRemoveBindResourcesByRoleId(ctx context.Context, req ent.RoleRestRemoveBindResourcesByRoleIdReq) (res string, err error) {

	var name = "RoleService.RoleRestRemoveBindResourcesByRoleId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.RoleService.RoleRestRemoveBindResourcesByRoleId(ctx, req)
}

// RoleRestUpdateBindResourcesByRoleId implements RoleService
func (_d RoleServiceWithTracing) RoleRestUpdateBindResourcesByRoleId(ctx context.Context, req ent.RoleRestUpdateBindResourcesByRoleIdReq) (res string, err error) {

	var name = "RoleService.RoleRestUpdateBindResourcesByRoleId"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.RoleService.RoleRestUpdateBindResourcesByRoleId(ctx, req)
}

// RoleRestUpdateById implements RoleService
func (_d RoleServiceWithTracing) RoleRestUpdateById(ctx context.Context, req ent.RoleRestUpdateByIdReq) (res *ent.Role, err error) {

	var name = "RoleService.RoleRestUpdateById"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"res": res,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.RoleService.RoleRestUpdateById(ctx, req)
}

// RoleRestUpdateMany implements RoleService
func (_d RoleServiceWithTracing) RoleRestUpdateMany(ctx context.Context, req ent.RoleRestUpdateManyReq) (success bool, err error) {

	var name = "RoleService.RoleRestUpdateMany"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"success": success,
					"err":     err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.RoleService.RoleRestUpdateMany(ctx, req)
}
