package say

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"hello/pkg/services/hello/types"

	"go.opentelemetry.io/otel/trace"
	"go.uber.org/zap"
)

// SayServiceWithLog implements SayService that is instrumented with logging
type SayServiceWithLog struct {
	_log  *zap.SugaredLogger
	_base SayService
}

// NewSayServiceWithLog instruments an implementation of the SayService with simple logging
func NewSayServiceWithLog(base SayService, log *zap.SugaredLogger) SayServiceWithLog {
	return SayServiceWithLog{
		_base: base,
		_log:  log,
	}
}

// Say implements SayService
func (_d SayServiceWithLog) Say(ctx context.Context, req types.SayReq) (res types.SayRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("SayServiceWithLog calling Say", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.Say(ctx, req)
}
