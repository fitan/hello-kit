package hello

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"hello/pkg/ent"

	"go.opentelemetry.io/otel/trace"
	"go.uber.org/zap"
)

// HelloServiceWithLog implements HelloService that is instrumented with logging
type HelloServiceWithLog struct {
	_log  *zap.SugaredLogger
	_base HelloService
}

// NewHelloServiceWithLog instruments an implementation of the HelloService with simple logging
func NewHelloServiceWithLog(base HelloService, log *zap.SugaredLogger) HelloServiceWithLog {
	return HelloServiceWithLog{
		_base: base,
		_log:  log,
	}
}

// Say implements HelloService
func (_d HelloServiceWithLog) Say(ctx context.Context, req SayReq) (up1 *ent.User, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("HelloServiceWithLog calling Say", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"up1": up1,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"up1": up1,
				"err": err})
		}

	}()
	return _d._base.Say(ctx, req)
}
