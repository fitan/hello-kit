package hello

// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap/templates/http
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"encoding/json"
	"net/http"

	http1 "github.com/go-kit/kit/transport/http"
)

func AddHttpOptionToAllMethods(options map[string][]http1.ServerOption, option http1.ServerOption) {
	methods := []string{

		"Foo",

		"Say",

		"Say1",

		"SayHello",

		"SayHello1",
	}
	for _, v := range methods {
		options[v] = append(options[v], option)
	}
}

func NewHTTPHandler(m *http.ServeMux, endpoints Endpoints, options map[string][]http1.ServerOption) {

	makeFooHandler(m, endpoints, options["Foo"])

	makeSayHandler(m, endpoints, options["Say"])

	makeSay1Handler(m, endpoints, options["Say1"])

	makeSayHelloHandler(m, endpoints, options["SayHello"])

	makeSayHello1Handler(m, endpoints, options["SayHello1"])

}

func makeFooHandler(m *http.ServeMux, endpoints Endpoints, options []http1.ServerOption) {
	m.Handle("/Foo", http1.NewServer(endpoints.FooEndpoint, decodeFooRequest, http1.EncodeJSONResponse, options...))
}

func decodeFooRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req string
	err := json.NewDecoder(r.Body).Decode(&req)
	return req, err
}

func makeSayHandler(m *http.ServeMux, endpoints Endpoints, options []http1.ServerOption) {
	m.Handle("/Say", http1.NewServer(endpoints.SayEndpoint, decodeSayRequest, http1.EncodeJSONResponse, options...))
}

func decodeSayRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req SayReq
	err := json.NewDecoder(r.Body).Decode(&req)
	return req, err
}

func makeSay1Handler(m *http.ServeMux, endpoints Endpoints, options []http1.ServerOption) {
	m.Handle("/Say1", http1.NewServer(endpoints.Say1Endpoint, decodeSay1Request, http1.EncodeJSONResponse, options...))
}

func decodeSay1Request(_ context.Context, r *http.Request) (interface{}, error) {
	var req SayReq
	err := json.NewDecoder(r.Body).Decode(&req)
	return req, err
}

func makeSayHelloHandler(m *http.ServeMux, endpoints Endpoints, options []http1.ServerOption) {
	m.Handle("/SayHello", http1.NewServer(endpoints.SayHelloEndpoint, decodeSayHelloRequest, http1.EncodeJSONResponse, options...))
}

func decodeSayHelloRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req SayReq
	err := json.NewDecoder(r.Body).Decode(&req)
	return req, err
}

func makeSayHello1Handler(m *http.ServeMux, endpoints Endpoints, options []http1.ServerOption) {
	m.Handle("/SayHello1", http1.NewServer(endpoints.SayHello1Endpoint, decodeSayHello1Request, http1.EncodeJSONResponse, options...))
}

func decodeSayHello1Request(_ context.Context, r *http.Request) (interface{}, error) {
	var req string
	err := json.NewDecoder(r.Body).Decode(&req)
	return req, err
}
