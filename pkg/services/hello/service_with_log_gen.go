package hello

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"hello/pkg/ent"
	"hello/pkg/services/hello/types"
	"hello/utils/log"

	"go.uber.org/zap"
)

// HelloServiceWithLog implements HelloService that is instrumented with logging
type HelloServiceWithLog struct {
	_log  *zap.SugaredLogger
	_base HelloService
}

// NewHelloServiceWithLog instruments an implementation of the HelloService with simple logging
func NewHelloServiceWithLog(base HelloService, log *zap.SugaredLogger) HelloServiceWithLog {
	return HelloServiceWithLog{
		_base: base,
		_log:  log,
	}
}

// Attempt implements HelloService
func (_d HelloServiceWithLog) Attempt(ctx context.Context, id int, limit int, page int, body types.SayReq) (res types.SayRes, err error) {

	_log := _d._log.With(log.TraceId(ctx))

	defer func() {
		_log.Debugw("HelloServiceWithLog calling Attempt", "params", map[string]interface{}{
			"id":    id,
			"limit": limit,
			"page":  page,
			"body":  body}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"id":    id,
				"limit": limit,
				"page":  page,
				"body":  body}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.Attempt(ctx, id, limit, page, body)
}

// Foo implements HelloService
func (_d HelloServiceWithLog) Foo(ctx context.Context, s types.SayReq) (rs string, err error) {

	_log := _d._log.With(log.TraceId(ctx))

	defer func() {
		_log.Debugw("HelloServiceWithLog calling Foo", "params", map[string]interface{}{
			"s": s}, "results", map[string]interface{}{
			"rs":  rs,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"s": s}, "results", map[string]interface{}{
				"rs":  rs,
				"err": err})
		}

	}()
	return _d._base.Foo(ctx, s)
}

// Say implements HelloService
func (_d HelloServiceWithLog) Say(ctx context.Context, req types.SayReq) (res types.SayRes, err error) {

	_log := _d._log.With(log.TraceId(ctx))

	defer func() {
		_log.Debugw("HelloServiceWithLog calling Say", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.Say(ctx, req)
}

// Say1 implements HelloService
func (_d HelloServiceWithLog) Say1(ctx context.Context, req types.SayReq) (res types.SayRes, err error) {

	_log := _d._log.With(log.TraceId(ctx))

	defer func() {
		_log.Debugw("HelloServiceWithLog calling Say1", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.Say1(ctx, req)
}

// SayHello implements HelloService
func (_d HelloServiceWithLog) SayHello(ctx context.Context, req types.SayReq) (res types.SayRes, err error) {

	_log := _d._log.With(log.TraceId(ctx))

	defer func() {
		_log.Debugw("HelloServiceWithLog calling SayHello", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.SayHello(ctx, req)
}

// SayHello1 implements HelloService
func (_d HelloServiceWithLog) SayHello1(ctx context.Context, s1 types.SayReq) (res []*ent.User, err error) {

	_log := _d._log.With(log.TraceId(ctx))

	defer func() {
		_log.Debugw("HelloServiceWithLog calling SayHello1", "params", map[string]interface{}{
			"s1": s1}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"s1": s1}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.SayHello1(ctx, s1)
}
