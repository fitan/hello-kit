package hello

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"

	"go.opentelemetry.io/otel/trace"

	endpoint "github.com/go-kit/kit/endpoint"
)

type Mws map[string][]endpoint.Middleware

type Endpoints struct {
	GetUserEndpoint endpoint.Endpoint
}

func AddEndpointMiddlewareToAllMethods(mw map[string][]endpoint.Middleware, m endpoint.Middleware) {
	methods := []string{

		"GetUser",
	}
	for _, v := range methods {
		mw[v] = append(mw[v], m)
	}
}

func AddEndpointMiddlewareToAllMethodsWithMethodName(mw map[string][]endpoint.Middleware, m func(n string) endpoint.Middleware) {
	methods := []string{

		"GetUser",
	}
	for _, v := range methods {
		mw[v] = append(mw[v], m(v))
	}
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func NewEndpoints(s HelloService, mdw Mws) Endpoints {
	eps := Endpoints{

		GetUserEndpoint: MakeGetUserEndpoint(s),
	}

	for _, m := range mdw["GetUser"] {
		eps.GetUserEndpoint = m(eps.GetUserEndpoint)
	}

	return eps
}

func MakeGetUserEndpoint(s HelloService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(GetUserReq)
		rs, err := s.GetUser(ctx, req)
		result := make(map[string]interface{}, 0)
		if err != nil {
			result["err"] = err.Error()
			return result, nil
		}
		result["data"] = rs
		result["traceId"] = trace.SpanFromContext(ctx).SpanContext().TraceID().String()
		return result, nil
	}
}
