package hello

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"hello/pkg/services/hello/types"

	"github.com/fitan/gink/transport/http"
	"github.com/gin-gonic/gin"
)

type Ops map[string][]http.ServerOption

func AddHttpOptionToAllMethods(options map[string][]http.ServerOption, option http.ServerOption) {
	methods := []string{

		"Foo",

		"Say",

		"Say1",

		"SayHello",

		"SayHello1",
	}
	for _, v := range methods {
		options[v] = append(options[v], option)
	}
}

type HttpHandler struct {
}

func NewHTTPHandler(r *gin.Engine, endpoints Endpoints, options Ops) HttpHandler {

	makeFooHandler(r, endpoints, options["Foo"])

	makeSayHandler(r, endpoints, options["Say"])

	makeSay1Handler(r, endpoints, options["Say1"])

	makeSayHelloHandler(r, endpoints, options["SayHello"])

	makeSayHello1Handler(r, endpoints, options["SayHello1"])

	return HttpHandler{}
}

type SwagResponse struct {
	TraceId string      `json:"traceId"`
	Data    interface{} `json:"data"`
}

// @Accept  json
// @Tags HelloService
// @Param id path string true " "
// @Success 200 {object} SwagResponse{data=string}
// @Router /foo/{id} [post]
func makeFooHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.POST("/foo/:id", http.NewServer(endpoints.FooEndpoint, decodeFooRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeFooRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req types.SayReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags HelloService
// @Param id path string true " "
// @Success 200 {object} SwagResponse{data=types.SayRes}
// @Router /say/{id} [put]
func makeSayHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.PUT("/say/:id", http.NewServer(endpoints.SayEndpoint, decodeSayRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeSayRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req types.SayReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags HelloService
// @Param id path string true " "
// @Success 200 {object} SwagResponse{data=types.SayRes}
// @Router /say1/{id} [delete]
func makeSay1Handler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.DELETE("/say1/:id", http.NewServer(endpoints.Say1Endpoint, decodeSay1Request, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeSay1Request(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req types.SayReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags HelloService
// @Param id path string true " "
// @Success 200 {object} SwagResponse{data=types.SayRes}
// @Router /sayhello/{id} [get]
func makeSayHelloHandler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.GET("/sayhello/:id", http.NewServer(endpoints.SayHelloEndpoint, decodeSayHelloRequest, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeSayHelloRequest(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req types.SayReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}

// @Accept  json
// @Tags HelloService
// @Param id path string true " "
// @Success 200 {object} SwagResponse{data=[]ent.User}
// @Router /sayhello1/{id} [get]
func makeSayHello1Handler(r *gin.Engine, endpoints Endpoints, options []http.ServerOption) {
	r.GET("/sayhello1/:id", http.NewServer(endpoints.SayHello1Endpoint, decodeSayHello1Request, http.EncodeJSONResponse, options...).ServeHTTP)
}

func decodeSayHello1Request(_ context.Context, ctx *gin.Context) (interface{}, error) {
	var req types.SayReq
	var err error

	err = ctx.ShouldBindUri(&req.Uri)
	if err != nil {
		return nil, err
	}

	return req, err
}
