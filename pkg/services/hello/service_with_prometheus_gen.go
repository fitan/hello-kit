package hello

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"hello/pkg/ent"
	"hello/pkg/services/hello/types"
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// HelloServiceWithPrometheus implements HelloService interface with all methods wrapped
// with Prometheus metrics
type HelloServiceWithPrometheus struct {
	base         HelloService
	instanceName string
}

var helloserviceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "helloservice_duration_seconds",
		Help:       "helloservice runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"})

// NewHelloServiceWithPrometheus returns an instance of the HelloService decorated with prometheus summary metric
func NewHelloServiceWithPrometheus(base HelloService, instanceName string) HelloServiceWithPrometheus {
	return HelloServiceWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// Attempt implements HelloService
func (_d HelloServiceWithPrometheus) Attempt(ctx context.Context, id int, limit int, page int, body types.SayReq) (res types.SayRes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		helloserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "Attempt", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Attempt(ctx, id, limit, page, body)
}

// Foo implements HelloService
func (_d HelloServiceWithPrometheus) Foo(ctx context.Context, s types.SayReq) (rs string, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		helloserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "Foo", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Foo(ctx, s)
}

// Say implements HelloService
func (_d HelloServiceWithPrometheus) Say(ctx context.Context, req types.SayReq) (res types.SayRes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		helloserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "Say", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Say(ctx, req)
}

// Say1 implements HelloService
func (_d HelloServiceWithPrometheus) Say1(ctx context.Context, req types.SayReq) (res types.SayRes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		helloserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "Say1", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Say1(ctx, req)
}

// SayHello implements HelloService
func (_d HelloServiceWithPrometheus) SayHello(ctx context.Context, req types.SayReq) (res types.SayRes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		helloserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "SayHello", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.SayHello(ctx, req)
}

// SayHello1 implements HelloService
func (_d HelloServiceWithPrometheus) SayHello1(ctx context.Context, s1 types.SayReq) (res []*ent.User, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		helloserviceDurationSummaryVec.WithLabelValues(_d.instanceName, "SayHello1", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.SayHello1(ctx, s1)
}
