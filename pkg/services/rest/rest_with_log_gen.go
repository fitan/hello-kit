package rest

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"

	"go.opentelemetry.io/otel/trace"
	"go.uber.org/zap"
)

// RestServiceWithLog implements RestService that is instrumented with logging
type RestServiceWithLog struct {
	_log  *zap.SugaredLogger
	_base RestService
}

// NewRestServiceWithLog instruments an implementation of the RestService with simple logging
func NewRestServiceWithLog(base RestService, log *zap.SugaredLogger) RestServiceWithLog {
	return RestServiceWithLog{
		_base: base,
		_log:  log,
	}
}

// CreateUser implements RestService
func (_d RestServiceWithLog) CreateUser(ctx context.Context, req CreateUserReq) (res CreateUserRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("RestServiceWithLog calling CreateUser", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.CreateUser(ctx, req)
}

// CreateUsers implements RestService
func (_d RestServiceWithLog) CreateUsers(ctx context.Context, req CreateUsersReq) (res CreateUsersRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("RestServiceWithLog calling CreateUsers", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.CreateUsers(ctx, req)
}

// DeleteUserById implements RestService
func (_d RestServiceWithLog) DeleteUserById(ctx context.Context, req DeleteUserByIdReq) (res DeleteUserByIdRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("RestServiceWithLog calling DeleteUserById", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.DeleteUserById(ctx, req)
}

// DeleteUsers implements RestService
func (_d RestServiceWithLog) DeleteUsers(ctx context.Context, req DeleteUsersReq) (res DeleteUsersRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("RestServiceWithLog calling DeleteUsers", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.DeleteUsers(ctx, req)
}

// ReadUserById implements RestService
func (_d RestServiceWithLog) ReadUserById(ctx context.Context, req ReadUserByIdReq) (res ReadUserByIdRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("RestServiceWithLog calling ReadUserById", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.ReadUserById(ctx, req)
}

// ReadUsers implements RestService
func (_d RestServiceWithLog) ReadUsers(ctx context.Context, req ReadUsersReq) (res ReadUsersRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("RestServiceWithLog calling ReadUsers", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.ReadUsers(ctx, req)
}

// UpdateUserById implements RestService
func (_d RestServiceWithLog) UpdateUserById(ctx context.Context, req UpdateUserIdReq) (res UpdateUserIdRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("RestServiceWithLog calling UpdateUserById", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.UpdateUserById(ctx, req)
}

// UpdateUsers implements RestService
func (_d RestServiceWithLog) UpdateUsers(ctx context.Context, req UpdateUsersReq) (res UpdateUsersRes, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("RestServiceWithLog calling UpdateUsers", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"res": res,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"res": res,
				"err": err})
		}

	}()
	return _d._base.UpdateUsers(ctx, req)
}
