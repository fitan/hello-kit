package say1

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"go.opentelemetry.io/otel/trace"
	"go.uber.org/zap"

	"context"

	"hello/pkg/ent"
)

// Say1ServiceWithLog implements Say1Service that is instrumented with logging
type Say1ServiceWithLog struct {
	_log  *zap.SugaredLogger
	_base Say1Service
}

// NewSay1ServiceWithLog instruments an implementation of the Say1Service with simple logging
func NewSay1ServiceWithLog(base Say1Service, log *zap.SugaredLogger) Say1ServiceWithLog {
	return Say1ServiceWithLog{
		_base: base,
		_log:  log,
	}
}

// SayPod implements Say1Service
func (_d Say1ServiceWithLog) SayPod(ctx context.Context, req SayPodReq) (pp1 *ent.Pod, err error) {

	_log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))

	defer func() {
		_log.Debugw("Say1ServiceWithLog calling SayPod", "params", map[string]interface{}{
			"req": req}, "results", map[string]interface{}{
			"pp1": pp1,
			"err": err})
		if err != nil {
			_log.Errorw("with_log", "params", map[string]interface{}{
				"req": req}, "results", map[string]interface{}{
				"pp1": pp1,
				"err": err})
		}

	}()
	return _d._base.SayPod(ctx, req)
}
