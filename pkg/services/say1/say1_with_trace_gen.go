package say1

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"encoding/json"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
	semconv "go.opentelemetry.io/otel/semconv/v1.7.0"
	"go.opentelemetry.io/otel/trace"

	"context"

	"hello/pkg/ent"
)

// Say1ServiceWithTracing implements Say1Service interface instrumented with opentracing spans
type Say1ServiceWithTracing struct {
	Say1Service
}

// NewSay1ServiceWithTracing returns Say1ServiceWithTracing
func NewSay1ServiceWithTracing(base Say1Service) Say1Service {
	d := Say1ServiceWithTracing{
		Say1Service: base,
	}

	return d
}

// SayPod implements Say1Service
func (_d Say1ServiceWithTracing) SayPod(ctx context.Context, req SayPodReq) (pp1 *ent.Pod, err error) {

	var name = "Say1Service.SayPod"
	_, span := otel.Tracer(name).Start(ctx, name)
	defer func() {
		if err != nil {
			l := map[string]interface{}{
				"params": map[string]interface{}{
					"req": req},
				"result": map[string]interface{}{
					"pp1": pp1,
					"err": err},
			}
			s, _ := json.Marshal(l)
			span.AddEvent(semconv.ExceptionEventName, trace.WithAttributes(semconv.ExceptionTypeKey.String("context"), semconv.ExceptionMessageKey.String(string(s))))
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.Say1Service.SayPod(ctx, req)
}
