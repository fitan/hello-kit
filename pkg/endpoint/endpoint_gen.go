// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	endpoint "github.com/go-kit/kit/endpoint"
	service "hello/pkg/service"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	FooEndpoint       endpoint.Endpoint
	SayEndpoint       endpoint.Endpoint
	Say1Endpoint      endpoint.Endpoint
	SayHelloEndpoint  endpoint.Endpoint
	SayHello1Endpoint endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.HelloService, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		FooEndpoint:       MakeFooEndpoint(s),
		Say1Endpoint:      MakeSay1Endpoint(s),
		SayEndpoint:       MakeSayEndpoint(s),
		SayHello1Endpoint: MakeSayHello1Endpoint(s),
		SayHelloEndpoint:  MakeSayHelloEndpoint(s),
	}
	for _, m := range mdw["Foo"] {
		eps.FooEndpoint = m(eps.FooEndpoint)
	}
	for _, m := range mdw["Say"] {
		eps.SayEndpoint = m(eps.SayEndpoint)
	}
	for _, m := range mdw["Say1"] {
		eps.Say1Endpoint = m(eps.Say1Endpoint)
	}
	for _, m := range mdw["SayHello"] {
		eps.SayHelloEndpoint = m(eps.SayHelloEndpoint)
	}
	for _, m := range mdw["SayHello1"] {
		eps.SayHello1Endpoint = m(eps.SayHello1Endpoint)
	}

	return eps
}
