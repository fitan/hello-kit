import (
  "github.com/twitchtv/twirp"
)

{{ $decorator := (or .Vars.DecoratorName (printf "%sWithTwirpError" .Interface.Name)) }}

// {{$decorator}} implements {{.Interface.Type}} interface instrumented such that the request data is injected into twirp.Error as metadata
type {{$decorator}} struct {
  {{.Interface.Type}}
}

// New{{$decorator}} returns {{$decorator}}
func New{{$decorator}} (base {{.Interface.Type}}) {{$decorator}} {
  return {{$decorator}} {
    {{.Interface.Name}}: base,
  }
}

{{range $method := .Interface.Methods}}
  // {{$method.Name}} implements {{$.Interface.Type}}
  func (_d {{$decorator}}) {{$method.Declaration}} {
    {{- if $method.ReturnsError}}
      {{range $param := $method.Params}}
        {{if not ( and $method.AcceptsContext (eq $param.Name "ctx")) }}
          defer injectRequestDataToError({{$param.Name}} ,&err)
        {{end}}
      {{end}}
    {{end}}
    {{$method.Pass (printf "_d.%s." $.Interface.Name) }}
  }
{{end}}

func injectRequestDataToError(req interface{}, perr *error) {
	err := *perr
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}

		jsonReq, _ := json.Marshal(req)
		*perr = twerr.WithMeta("request", string(jsonReq))
	}
}
