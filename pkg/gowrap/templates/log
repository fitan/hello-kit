import (
  "io"
  "log"
)

type Log interface{
  Log(keyvals ...interface{}) error
}

{{ $decorator := (or .Vars.DecoratorName (printf "%sWithLog" .Interface.Name)) }}

// {{$decorator}} implements {{.Interface.Type}} that is instrumented with logging
type {{$decorator}} struct {
  _log Log
  _base {{.Interface.Type}}
}

// New{{$decorator}} instruments an implementation of the {{.Interface.Type}} with simple logging
func New{{$decorator}}(base {{.Interface.Type}},log Log) {{$decorator}} {
  return {{$decorator}}{
    _base: base, 
    _log: log,
  }
}

{{range $method := .Interface.Methods}}
  // {{$method.Name}} implements {{$.Interface.Type}}
  func (_d {{$decorator}}) {{$method.Declaration}} {
      {{- if $method.HasParams}}
        _params := []interface{}{"{{$decorator}} calling", "{{$method.Name}}", "params", {{$method.ParamsMap}} }
        _d._log.Log(_params...)
      {{else}}
        _d._log.Log("{{$decorator}}: calling {{$method.Name}}")
      {{end -}}
      defer func() {
        {{- if $method.HasResults}}
          _results := []interface{}{"{{$decorator}} calling", "{{$method.Name}}", "results", {{$method.ParamsMap}} }
          {{- if $method.ReturnsError}}
            if err != nil {
              _d._log.Log(_results...)
            } else {
              _d._log.Log(_results...)
            }
          {{else}}   
            _d._log.Log(_results...)
          {{end -}}
        {{else}}
          _d._log.Log("{{$decorator}}: {{$method.Name}} finished")
        {{end -}}
      }()
      {{ $method.Pass "_d._base." }}
  }
{{end}}
