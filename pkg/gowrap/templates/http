import (
	"context"
	"encoding/json"
	"net/http"

	http1 "github.com/go-kit/kit/transport/http"
)

func AddHttpOptionToAllMethods(options map[string][]http1.ServerOption, option http1.ServerOption) {
	methods := []string{
{{range $method := .Interface.Methods}}
		"{{$method.Name}}",
{{end}}
	}
	for _, v := range methods {
		options[v] = append(options[v], option)
	}
}

func NewHTTPHandler(m *http.ServeMux, endpoints Endpoints, options map[string][]http1.ServerOption) {
{{range $method := .Interface.Methods}}
	make{{$method.Name}}Handler(m, endpoints, options["{{$method.Name}}"])
{{end}}
}

{{range $method := .Interface.Methods}}
func make{{$method.Name}}Handler(m *http.ServeMux, endpoints Endpoints, options []http1.ServerOption) {
	m.Handle("/{{$method.Name}}", http1.NewServer(endpoints.{{$method.Name}}Endpoint, decode{{$method.Name}}Request, http1.EncodeJSONResponse, options...))
}

func decode{{$method.Name}}Request(_ context.Context, r *http.Request) (interface{}, error) {
	var req {{(index $method.Params 1).Type}}
	err := json.NewDecoder(r.Body).Decode(&req)
	return req, err
}
{{end}}