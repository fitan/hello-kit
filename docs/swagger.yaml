basePath: /
definitions:
  audit.AuditRestCreateBodySwag:
    properties:
      client_ip:
        type: string
      cost_time:
        type: string
      header:
        type: string
      method:
        type: string
      query:
        type: string
      remote_ip:
        type: string
      request:
        type: string
      response:
        type: string
      status_code:
        type: integer
      url:
        type: string
    type: object
  audit.AuditRestUpdateByIdBodySwag:
    properties:
      id:
        type: integer
    type: object
  audit.SwagResponse:
    properties:
      data: {}
      status:
        type: integer
      traceId:
        type: string
    type: object
  ent.Audit:
    properties:
      client_ip:
        description: ClientIP holds the value of the "client_ip" field.
        type: string
      cost_time:
        description: CostTime holds the value of the "cost_time" field.
        type: string
      create_time:
        description: CreateTime holds the value of the "create_time" field.
        type: string
      header:
        description: Header holds the value of the "header" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      method:
        description: Method holds the value of the "method" field.
        type: string
      query:
        description: Query holds the value of the "query" field.
        type: string
      remote_ip:
        description: RemoteIP holds the value of the "remote_ip" field.
        type: string
      request:
        description: Request holds the value of the "request" field.
        type: string
      response:
        description: Response holds the value of the "response" field.
        type: string
      status_code:
        description: StatusCode holds the value of the "status_code" field.
        type: integer
      update_time:
        description: UpdateTime holds the value of the "update_time" field.
        type: string
      url:
        description: URL holds the value of the "url" field.
        type: string
    type: object
  ent.AuditBaseCreateReq:
    properties:
      client_ip:
        type: string
      cost_time:
        type: string
      header:
        type: string
      method:
        type: string
      query:
        type: string
      remote_ip:
        type: string
      request:
        type: string
      response:
        type: string
      status_code:
        type: integer
      url:
        type: string
    type: object
  ent.AuditBaseGetRes:
    properties:
      client_ip:
        type: string
      cost_time:
        type: string
      header:
        type: string
      id:
        type: integer
      method:
        type: string
      query:
        type: string
      remote_ip:
        type: string
      request:
        type: string
      response:
        type: string
      status_code:
        type: integer
      url:
        type: string
    type: object
  ent.AuditBaseUpdateReq:
    properties:
      id:
        type: integer
    type: object
  ent.AuditRestByQueriesAllRes:
    properties:
      items:
        items:
          $ref: '#/definitions/ent.AuditBaseGetRes'
        type: array
      total:
        type: integer
    type: object
  ent.Project:
    properties:
      aname:
        description: Aname holds the value of the "aname" field.
        type: string
      comments:
        description: Comments holds the value of the "comments" field.
        type: string
      create_time:
        description: CreateTime holds the value of the "create_time" field.
        type: string
      edges:
        $ref: '#/definitions/ent.ProjectEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the ProjectQuery when eager-loading is set.
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
      update_time:
        description: UpdateTime holds the value of the "update_time" field.
        type: string
    type: object
  ent.ProjectBaseCreateReq:
    properties:
      aname:
        type: string
      comments:
        type: string
      name:
        type: string
    type: object
  ent.ProjectBaseGetRes:
    properties:
      aname:
        type: string
      comments:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  ent.ProjectBaseUpdateReq:
    properties:
      aname:
        type: string
      comments:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  ent.ProjectEdges:
    properties:
      services:
        description: Services holds the value of the services edge.
        items:
          $ref: '#/definitions/ent.Service'
        type: array
    type: object
  ent.ProjectRestByQueriesAllRes:
    properties:
      items:
        items:
          $ref: '#/definitions/ent.ProjectBaseGetRes'
        type: array
      total:
        type: integer
    type: object
  ent.ProjectRestGetServicesByProjectIdRes:
    properties:
      list:
        items:
          $ref: '#/definitions/ent.ServiceBaseGetRes'
        type: array
      total:
        type: integer
    type: object
  ent.Resource:
    properties:
      action:
        description: Action holds the value of the "action" field.
        type: string
      comments:
        description: Comments holds the value of the "comments" field.
        type: string
      create_time:
        description: CreateTime holds the value of the "create_time" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      key:
        description: Key holds the value of the "key" field.
        type: string
      name:
        description: Name holds the value of the "name" field.
        type: string
      path:
        description: Path holds the value of the "path" field.
        type: string
      update_time:
        description: UpdateTime holds the value of the "update_time" field.
        type: string
    type: object
  ent.ResourceBaseCreateReq:
    properties:
      action:
        type: string
      comments:
        type: string
      key:
        type: string
      name:
        type: string
      path:
        type: string
    type: object
  ent.ResourceBaseGetRes:
    properties:
      action:
        type: string
      comments:
        type: string
      id:
        type: integer
      key:
        type: string
      name:
        type: string
      path:
        type: string
    type: object
  ent.ResourceBaseUpdateReq:
    properties:
      action:
        type: string
      comments:
        type: string
      id:
        type: integer
      key:
        type: string
      name:
        type: string
      path:
        type: string
    type: object
  ent.ResourceRestByQueriesAllRes:
    properties:
      items:
        items:
          $ref: '#/definitions/ent.ResourceBaseGetRes'
        type: array
      total:
        type: integer
    type: object
  ent.Service:
    properties:
      aname:
        description: Aname holds the value of the "aname" field.
        type: string
      classes:
        description: Classes holds the value of the "classes" field.
        type: string
      comments:
        description: Comments holds the value of the "comments" field.
        type: string
      create_time:
        description: CreateTime holds the value of the "create_time" field.
        type: string
      edges:
        $ref: '#/definitions/ent.ServiceEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the ServiceQuery when eager-loading is set.
      git:
        description: Git holds the value of the "git" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      lang:
        description: Lang holds the value of the "lang" field.
        type: string
      name:
        description: Name holds the value of the "name" field.
        type: string
      update_time:
        description: UpdateTime holds the value of the "update_time" field.
        type: string
    type: object
  ent.ServiceBaseCreateReq:
    properties:
      aname:
        type: string
      classes:
        type: string
      comments:
        type: string
      git:
        type: string
      lang:
        type: string
      name:
        type: string
    type: object
  ent.ServiceBaseGetRes:
    properties:
      aname:
        type: string
      classes:
        type: string
      comments:
        type: string
      git:
        type: string
      id:
        type: integer
      lang:
        type: string
      name:
        type: string
    type: object
  ent.ServiceBaseUpdateReq:
    properties:
      aname:
        type: string
      classes:
        type: string
      comments:
        type: string
      git:
        type: string
      id:
        type: integer
      lang:
        type: string
      name:
        type: string
    type: object
  ent.ServiceEdges:
    properties:
      project:
        $ref: '#/definitions/ent.Project'
        description: Project holds the value of the project edge.
    type: object
  ent.ServiceRestByQueriesAllRes:
    properties:
      items:
        items:
          $ref: '#/definitions/ent.ServiceBaseGetRes'
        type: array
      total:
        type: integer
    type: object
  ent.User:
    properties:
      age:
        description: Age holds the value of the "age" field.
        type: integer
      enable:
        description: Enable holds the value of the "enable" field.
        type: boolean
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
      pass_word:
        description: PassWord holds the value of the "pass_word" field.
        type: string
      token:
        description: Token holds the value of the "token" field.
        type: string
    type: object
  ent.UserBaseCreateReq:
    properties:
      age:
        type: integer
      enable:
        type: boolean
      name:
        type: string
      pass_word:
        type: string
      token:
        type: string
    type: object
  ent.UserBaseGetRes:
    properties:
      age:
        type: integer
      enable:
        type: boolean
      id:
        type: integer
      name:
        type: string
      pass_word:
        type: string
      token:
        type: string
    type: object
  ent.UserBaseUpdateReq:
    properties:
      age:
        type: integer
      enable:
        type: boolean
      id:
        type: integer
      name:
        type: string
      pass_word:
        type: string
      token:
        type: string
    type: object
  ent.UserRestByQueriesAllRes:
    properties:
      items:
        items:
          $ref: '#/definitions/ent.UserBaseGetRes'
        type: array
      total:
        type: integer
    type: object
  project.ProjectRestCreateBodySwag:
    properties:
      aname:
        type: string
      comments:
        type: string
      name:
        type: string
    type: object
  project.ProjectRestUpdateByIdBodySwag:
    properties:
      aname:
        type: string
      comments:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  project.SwagResponse:
    properties:
      data: {}
      status:
        type: integer
      traceId:
        type: string
    type: object
  resource.ResourceRestCreateBodySwag:
    properties:
      action:
        type: string
      comments:
        type: string
      key:
        type: string
      name:
        type: string
      path:
        type: string
    type: object
  resource.ResourceRestUpdateByIdBodySwag:
    properties:
      action:
        type: string
      comments:
        type: string
      id:
        type: integer
      key:
        type: string
      name:
        type: string
      path:
        type: string
    type: object
  resource.SwagResponse:
    properties:
      data: {}
      status:
        type: integer
      traceId:
        type: string
    type: object
  service.ServiceRestCreateBodySwag:
    properties:
      aname:
        type: string
      classes:
        type: string
      comments:
        type: string
      git:
        type: string
      lang:
        type: string
      name:
        type: string
    type: object
  service.ServiceRestCreateProjectByServiceIdBodySwag:
    properties:
      aname:
        type: string
      comments:
        type: string
      name:
        type: string
    type: object
  service.ServiceRestUpdateByIdBodySwag:
    properties:
      aname:
        type: string
      classes:
        type: string
      comments:
        type: string
      git:
        type: string
      id:
        type: integer
      lang:
        type: string
      name:
        type: string
    type: object
  service.SwagResponse:
    properties:
      data: {}
      status:
        type: integer
      traceId:
        type: string
    type: object
  user.SwagResponse:
    properties:
      data: {}
      status:
        type: integer
      traceId:
        type: string
    type: object
  user.UserRestCreateBodySwag:
    properties:
      age:
        type: integer
      enable:
        type: boolean
      name:
        type: string
      pass_word:
        type: string
      token:
        type: string
    type: object
  user.UserRestUpdateByIdBodySwag:
    properties:
      age:
        type: integer
      enable:
        type: boolean
      id:
        type: integer
      name:
        type: string
      pass_word:
        type: string
      token:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /audit:
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/audit.AuditRestCreateBodySwag'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/audit.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.Audit'
              type: object
      tags:
      - AuditService
  /audits:
    delete:
      consumes:
      - application/json
      parameters:
      - collectionFormat: multi
        in: query
        items:
          type: integer
        name: ids
        type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/audit.SwagResponse'
            - properties:
                data:
                  type: boolean
              type: object
      tags:
      - AuditService
    get:
      consumes:
      - application/json
      parameters:
      - in: query
        name: ClientIPContains
        type: string
      - in: query
        name: CostTimeContains
        type: string
      - in: query
        name: HeaderContains
        type: string
      - in: query
        name: MethodContains
        type: string
      - in: query
        name: QueryContains
        type: string
      - in: query
        name: RemoteIPContains
        type: string
      - in: query
        name: RequestContains
        type: string
      - in: query
        name: ResponseContains
        type: string
      - in: query
        name: StatusCodeEQ
        type: integer
      - in: query
        name: URLContains
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/audit.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.AuditRestByQueriesAllRes'
              type: object
      tags:
      - AuditService
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/ent.AuditBaseCreateReq'
          type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/audit.SwagResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/ent.Audit'
                  type: array
              type: object
      tags:
      - AuditService
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/ent.AuditBaseUpdateReq'
          type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/audit.SwagResponse'
            - properties:
                data:
                  type: boolean
              type: object
      tags:
      - AuditService
  /audits/{auditId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: auditId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/audit.SwagResponse'
            - properties:
                data:
                  type: boolean
              type: object
      tags:
      - AuditService
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: auditId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/audit.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.AuditBaseGetRes'
              type: object
      tags:
      - AuditService
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/audit.AuditRestUpdateByIdBodySwag'
      - description: ' '
        in: path
        name: auditId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/audit.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.Audit'
              type: object
      tags:
      - AuditService
  /project:
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/project.ProjectRestCreateBodySwag'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/project.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.Project'
              type: object
      tags:
      - ProjectService
  /projects:
    delete:
      consumes:
      - application/json
      parameters:
      - collectionFormat: multi
        in: query
        items:
          type: integer
        name: ids
        type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/project.SwagResponse'
            - properties:
                data:
                  type: boolean
              type: object
      tags:
      - ProjectService
    get:
      consumes:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/project.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.ProjectRestByQueriesAllRes'
              type: object
      tags:
      - ProjectService
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/ent.ProjectBaseCreateReq'
          type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/project.SwagResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/ent.Project'
                  type: array
              type: object
      tags:
      - ProjectService
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/ent.ProjectBaseUpdateReq'
          type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/project.SwagResponse'
            - properties:
                data:
                  type: boolean
              type: object
      tags:
      - ProjectService
  /projects/{projectId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: projectId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/project.SwagResponse'
            - properties:
                data:
                  type: boolean
              type: object
      tags:
      - ProjectService
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: projectId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/project.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.ProjectBaseGetRes'
              type: object
      tags:
      - ProjectService
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/project.ProjectRestUpdateByIdBodySwag'
      - description: ' '
        in: path
        name: projectId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/project.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.Project'
              type: object
      tags:
      - ProjectService
  /projects/{projectId}/services:
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: projectId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/project.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.ProjectRestGetServicesByProjectIdRes'
              type: object
      tags:
      - ProjectService
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/ent.ServiceBaseCreateReq'
          type: array
      - description: ' '
        in: path
        name: projectId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/project.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.Project'
              type: object
      tags:
      - ProjectService
  /resource:
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/resource.ResourceRestCreateBodySwag'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resource.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.Resource'
              type: object
      tags:
      - ResourceService
  /resources:
    delete:
      consumes:
      - application/json
      parameters:
      - collectionFormat: multi
        in: query
        items:
          type: integer
        name: ids
        type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resource.SwagResponse'
            - properties:
                data:
                  type: boolean
              type: object
      tags:
      - ResourceService
    get:
      consumes:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resource.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.ResourceRestByQueriesAllRes'
              type: object
      tags:
      - ResourceService
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/ent.ResourceBaseCreateReq'
          type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resource.SwagResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/ent.Resource'
                  type: array
              type: object
      tags:
      - ResourceService
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/ent.ResourceBaseUpdateReq'
          type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resource.SwagResponse'
            - properties:
                data:
                  type: boolean
              type: object
      tags:
      - ResourceService
  /resources/{resourceId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: resourceId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resource.SwagResponse'
            - properties:
                data:
                  type: boolean
              type: object
      tags:
      - ResourceService
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: resourceId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resource.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.ResourceBaseGetRes'
              type: object
      tags:
      - ResourceService
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/resource.ResourceRestUpdateByIdBodySwag'
      - description: ' '
        in: path
        name: resourceId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resource.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.Resource'
              type: object
      tags:
      - ResourceService
  /service:
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/service.ServiceRestCreateBodySwag'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/service.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.Service'
              type: object
      tags:
      - ServiceService
  /services:
    delete:
      consumes:
      - application/json
      parameters:
      - collectionFormat: multi
        in: query
        items:
          type: integer
        name: ids
        type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/service.SwagResponse'
            - properties:
                data:
                  type: boolean
              type: object
      tags:
      - ServiceService
    get:
      consumes:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/service.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.ServiceRestByQueriesAllRes'
              type: object
      tags:
      - ServiceService
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/ent.ServiceBaseCreateReq'
          type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/service.SwagResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/ent.Service'
                  type: array
              type: object
      tags:
      - ServiceService
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/ent.ServiceBaseUpdateReq'
          type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/service.SwagResponse'
            - properties:
                data:
                  type: boolean
              type: object
      tags:
      - ServiceService
  /services/{serviceId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: serviceId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/service.SwagResponse'
            - properties:
                data:
                  type: boolean
              type: object
      tags:
      - ServiceService
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: serviceId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/service.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.ServiceBaseGetRes'
              type: object
      tags:
      - ServiceService
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/service.ServiceRestUpdateByIdBodySwag'
      - description: ' '
        in: path
        name: serviceId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/service.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.Service'
              type: object
      tags:
      - ServiceService
  /services/{serviceId}/project:
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: serviceId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/service.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.ProjectBaseGetRes'
              type: object
      tags:
      - ServiceService
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/service.ServiceRestCreateProjectByServiceIdBodySwag'
      - description: ' '
        in: path
        name: serviceId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/service.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.Service'
              type: object
      tags:
      - ServiceService
  /user:
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.UserRestCreateBodySwag'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/user.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.User'
              type: object
      tags:
      - UserService
  /users:
    delete:
      consumes:
      - application/json
      parameters:
      - collectionFormat: multi
        in: query
        items:
          type: integer
        name: ids
        type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/user.SwagResponse'
            - properties:
                data:
                  type: boolean
              type: object
      tags:
      - UserService
    get:
      consumes:
      - application/json
      parameters:
      - in: query
        name: AgeEQ
        type: integer
      - in: query
        name: NameEQ
        type: string
      - collectionFormat: multi
        in: query
        items:
          type: string
        name: NameNotIn
        type: array
      - in: query
        name: _limit
        type: integer
      - in: query
        name: _page
        type: integer
      - enum:
        - acs
        - desc
        in: query
        name: order
        type: string
      - in: query
        name: sortBy
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/user.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.UserRestByQueriesAllRes'
              type: object
      tags:
      - UserService
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/ent.UserBaseCreateReq'
          type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/user.SwagResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/ent.User'
                  type: array
              type: object
      tags:
      - UserService
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/ent.UserBaseUpdateReq'
          type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/user.SwagResponse'
            - properties:
                data:
                  type: boolean
              type: object
      tags:
      - UserService
  /users/{userId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: userId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/user.SwagResponse'
            - properties:
                data:
                  type: boolean
              type: object
      tags:
      - UserService
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: userId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/user.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.UserBaseGetRes'
              type: object
      tags:
      - UserService
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.UserRestUpdateByIdBodySwag'
      - description: ' '
        in: path
        name: userId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/user.SwagResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.User'
              type: object
      tags:
      - UserService
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
